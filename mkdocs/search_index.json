{
    "docs": [
        {
            "location": "/", 
            "text": "About the project\n\n\nJasonette is a different way of making native apps.\n\n\nInstead of programming an app on the device, you simply write a JSON file hosted on a server, and the Jasonette apps fetch and use it to build themselves on-demand whenever you open the app.\n\n\n\n\nBefore we jump in, \nhere's where you can stay in touch with the project community:\n\n\n\n\n\u25a0 Follow the project\n\n\n\n    \n\n        \nTwitter\n\n        \nBlog\n\n    \n\n    \n\n        \n@jasonclient\n\n        \nBlog\n\n    \n\n  \n\n        \nGithub iOS\n\n        \nGithub Android\n\n    \n\n        \nJASONETTE-iOS\n\n        \nJASONETTE-Android\n\n    \n\n\n\n\n\n\n    \n\n        \nsubscribe to newsletter\n\n        \nComprehensive newsletter on Important updates, milestones, new projects, and useful tips from the community.\n\n        \n\n        \nSubscribe\n\n        \n\n            \n\n            \n\n        \n\n        \n\n            \n\n        \n\n    \n\n    \n(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);\n\n\n\n\n\n\n\n\u25a0 Join the community\n\n\n\n    \n\n        \nSlack\n\n        \nForum\n\n    \n\n    \n\n        \n\n            \n\n            \n\n        \n\n        \n\n            \n\n                \n\n                \nAsk questions and share tips.\n\n                \nhttps://forum.jasonette.com\n\n            \n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\nQuickstart\n\n\n1.\u00a0\u00a0Download Jasonette for iOS or Android\n\n\n2.\u00a0\u00a0Write and host a JSON recipe that defines your app\n\n\n3.\u00a0\u00a0Add the JSON URL to Jasonette to turn it into your app \n\n\n\n\n\n\nStep 1. Download\n\n\nGo download and come back, we'll wait.\n\n\n\n\n    \n\n        \niOS\n\n        \nAndroid\n\n    \n\n    \n\n        \n\n      \n\n        \n\n        \n\n        iOS Setup\n      \n\n        \n\n        \n\n      \n\n        \n\n        \n\n        Android Setup\n      \n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\nStep 2. Learn\n\n\nWatch the 2 videos below and you'll have learned everything you need to know to get started.\n\n\nThe videos were shot using an iPhone, but it works exactly the same for Android.\n\n\n\n\nA. Do you know JSON?\n\n\nBefore we dive in, do you know JSON? If not, just check out \nthis tutorial\n, takes 2 minutes.\n\n\n\n\nB. Get a JSON server\n\n\nYou'll be serving your entire app from a server, so you will need somewhere to host JSON, just like you need somewhere to host websites. There are many ways to do this:\n\n\n\n\n1. Jasonbase.com (https://www.jasonbase.com)\n\n\n[Recommended]\n A JSON hosting service created by \n@gliechtenstein\n while building Jasonette because there was no easy way to host, edit, and serve JSON online instantly. This is the site used in the tutorial videos. Feel free to use this for your Jasonette apps. \nIt's FREE.\n\n\n\n\n\n2. Code hosting or pastebin sites\n\nYou can also use \nGithub\n or \nPastebin\n. Not really recommended for development because these sites are \nNOT built for this type of usage\n. They actually discourage you from using them as API endpoint. Furthermore, their content is cached so you'll often keep getting old responses whenever you update your JSON content, which is a pain. \nHowever, you can use them AFTER you've finished editing, or use it for open sourcing though. \nHere's an example.\n\n\n\n\n\n\n3. Plug into your existing server\n\nYou can skip all this and set up your own web app with a JSON endpoint, or just plug into your existing web app.\n\n\n\n\n\n\n\nC. Learn the basics\n\n\nThis video walks you through the basics of Jasonette, such as how it works, how to get started, etc. It was shot using iOS but it basically works the same for Android.\n\n\n\n\n\n\n\n\n\n\n\nD. Learn JASON syntax\n\n\nThis video teaches you how to actually write a JSON markup to build sophisticated interactive layouts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 3. Learn more (Reference)\n\n\n\n\nAnatomy of a Jason view\n\n\nLearn the basic structure of a JASON view\n\nJust like HTML has basic tags such as body, div, span, li, etc, Jasonette has JSON based tags to describe the structure of a view.\n\n\n\n\nComponents\n\n\nLearn component syntax\n\nComponents are the most basic units of user interface, such as image, label, textarea, button, slider, etc. \n\n\n\nLayout\n\n\nLearn layouts\n\nIn many cases we combine multiple components to construct a unit. We use layouts to do this.\n\n\n\n\nLink multiple views\n\n\nLearn linking\n\nAbove three sections are all you need to know to display content in a view. But what if we want multiple views? We can link them using \nhref\n.\n\n\n\n\nActions\n\n\nLearn actions\n\nActions define a task or a sequence of tasks you wish to run, such as network request, audio play, camera access, geolocation, displaying banners, etc.\n\n\n\n\nTemplates\n\n\nLearn templates\n\nYou can use templates to dynamically render data, such as remote network content, local data, and user input.\n\n\n\n\nExamples\n\n\nActual JSON examples you can try out with Jasonette:\n\n\nTry examples here", 
            "title": "\u25a0 Getting started"
        }, 
        {
            "location": "/#about-the-project", 
            "text": "Jasonette is a different way of making native apps.  Instead of programming an app on the device, you simply write a JSON file hosted on a server, and the Jasonette apps fetch and use it to build themselves on-demand whenever you open the app.   Before we jump in,  here's where you can stay in touch with the project community:", 
            "title": "About the project"
        }, 
        {
            "location": "/#follow-the-project", 
            "text": "Twitter \n         Blog", 
            "title": "\u25a0 Follow the project"
        }, 
        {
            "location": "/#join-the-community", 
            "text": "Slack \n         Forum", 
            "title": "\u25a0 Join the community"
        }, 
        {
            "location": "/#quickstart", 
            "text": "1.\u00a0\u00a0Download Jasonette for iOS or Android  2.\u00a0\u00a0Write and host a JSON recipe that defines your app  3.\u00a0\u00a0Add the JSON URL to Jasonette to turn it into your app", 
            "title": "Quickstart"
        }, 
        {
            "location": "/#step-1-download", 
            "text": "Go download and come back, we'll wait.  \n     \n         iOS \n         Android \n     \n     \n         \n       \n         \n         \n        iOS Setup\n       \n         \n         \n       \n         \n         \n        Android Setup", 
            "title": "Step 1. Download"
        }, 
        {
            "location": "/#step-2-learn", 
            "text": "Watch the 2 videos below and you'll have learned everything you need to know to get started.  The videos were shot using an iPhone, but it works exactly the same for Android.", 
            "title": "Step 2. Learn"
        }, 
        {
            "location": "/#a-do-you-know-json", 
            "text": "Before we dive in, do you know JSON? If not, just check out  this tutorial , takes 2 minutes.", 
            "title": "A. Do you know JSON?"
        }, 
        {
            "location": "/#b-get-a-json-server", 
            "text": "You'll be serving your entire app from a server, so you will need somewhere to host JSON, just like you need somewhere to host websites. There are many ways to do this:", 
            "title": "B. Get a JSON server"
        }, 
        {
            "location": "/#c-learn-the-basics", 
            "text": "This video walks you through the basics of Jasonette, such as how it works, how to get started, etc. It was shot using iOS but it basically works the same for Android.", 
            "title": "C. Learn the basics"
        }, 
        {
            "location": "/#d-learn-jason-syntax", 
            "text": "This video teaches you how to actually write a JSON markup to build sophisticated interactive layouts.", 
            "title": "D. Learn JASON syntax"
        }, 
        {
            "location": "/#step-3-learn-more-reference", 
            "text": "", 
            "title": "Step 3. Learn more (Reference)"
        }, 
        {
            "location": "/#anatomy-of-a-jason-view", 
            "text": "Learn the basic structure of a JASON view \nJust like HTML has basic tags such as body, div, span, li, etc, Jasonette has JSON based tags to describe the structure of a view.", 
            "title": "Anatomy of a Jason view"
        }, 
        {
            "location": "/#components", 
            "text": "Learn component syntax \nComponents are the most basic units of user interface, such as image, label, textarea, button, slider, etc.", 
            "title": "Components"
        }, 
        {
            "location": "/#layout", 
            "text": "Learn layouts \nIn many cases we combine multiple components to construct a unit. We use layouts to do this.", 
            "title": "Layout"
        }, 
        {
            "location": "/#link-multiple-views", 
            "text": "Learn linking \nAbove three sections are all you need to know to display content in a view. But what if we want multiple views? We can link them using  href .", 
            "title": "Link multiple views"
        }, 
        {
            "location": "/#actions", 
            "text": "Learn actions \nActions define a task or a sequence of tasks you wish to run, such as network request, audio play, camera access, geolocation, displaying banners, etc.", 
            "title": "Actions"
        }, 
        {
            "location": "/#templates", 
            "text": "Learn templates \nYou can use templates to dynamically render data, such as remote network content, local data, and user input.", 
            "title": "Templates"
        }, 
        {
            "location": "/#examples", 
            "text": "Actual JSON examples you can try out with Jasonette:  Try examples here", 
            "title": "Examples"
        }, 
        {
            "location": "/ios/", 
            "text": "Set up Jasonette iOS\n\n\n\nReady? Let's get your first Jasonette app on your phone, in 20 seconds! \nInterested in manual setup?\n\n\n\n\n Want to skip the setup and try Jasonette without building your own app? - \nTry Jason.\n\n\n\n\n\n\n\nStep 1. DOWNLOAD\n\n\n\nJasonette itself is a pre-built app.\nAll you need to do is download and build with \nXCode\n.\n\n\nGo ahead and download Jasonette, and then unzip.\n\n\n\n Download Jasonette-iOS\n\n\n\n\n\n\n\n\n\nStep 2. SETUP\n\n\nInitialize by running the \nSetup\n command.\n\n\n\nThis command automatically generates icons and sets the title and the url. \n\n\n\n\n \nBEFORE YOU START:\n Make sure you have the most recent version of XCode! (At least XCode 8) You can download it \nHere\n.\n\n\n\n\n\n\n\n\nStep 3. PLAY\n\n\nConnect your phone and click play on XCode. Done!\n\n\n\n\n\n\n\u2605 Did it work?\n\n\n\n\n\n\n\n\nYES?\n\n\n\n\nCongratulations! You're ready to transform this into your OWN app! Go on to the \ntutorial\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNO?\n\n\n\n\nCheck troubleshoot section\n\n\n\n\n\n\n\n\n\n\nManual setup\n\n\nIt is recommended that you use \nthe Setup command\n since it takes care of most of tedious details, but you can also do this manually.\n\n\n\n\nStep 1. Download\n\n\nDownload Jasonette\n and unzip.\n\n\n\n\n\nStep 2. Open in XCode\n\n\nGo into the \napp\n folder and open \nJasonette.xcworkspace\n file. \n(warning: Make sure to open the \nxcworkspace\n file, NOT the \nxcodeproj\n file!)\n\n\n\n\n\n\nStep 3. Update config attributes and generate icons manually\n\n\n\n\n\n\nSet App Name:\n Under the \nConfig\n group, open the \nInfo.plist\n file and change the \nCFBundleName\n attribute.\n\n\nSet Root URL:\n Under the \nConfig\n group, open the \nsettings.plist\n file and change the \nurl\n attribute.\n\n\nGenerate Icon:\n You can try generating app icons using online services like \nmakeappicon.com\n, and \nadd them manually to the project\n.\n\n\n\n\n\n\nStep 4. Play\n\n\nConnect your phone and click play on XCode. Done!\n\n\n\n\n\n\nSubmitting to the app store\n\n\nThere are a couple of things to keep in mind when submitting to the app store.\n\n\n1. Sign up as Apple Developer\n\n\nYou can test as much as you want without signing up as a developer, you can even put apps on your phone. However when it comes to actually submitting apps, you need to register as a developer. Google \"apple developer\" to learn how to do this.\n\n\n\n\n2. Archive and Upload\n\n\nAssuming you're all ready, you just need to \"archive\" the app first, and then press \"upload to app store\".\n\n\n\n\n\n\n3. Uncheck \"Include bitcode\"\n\n\nWhen you press \"upload to app store\", it will show up a confirmation dialog. Uncheck \"Include bitcode\" option here. We do not need Bitcode because Jasonette is already small due to its modularity, and it actually may become larger. In fact including bitcode doesn't work well with Jasonette, so make sure you uncheck this.\n\n\n\n\n\n\nTroubleshoot\n\n\n\u25a0 \"Unknown property attribute 'class'\"\n\n\n\n\n\n\n\n\nThis is known to happen in old versions of XCode. Please upgrade your XCode to the \nlatest version\n\n\n\n\n\u25a0 \"No provisioning...\" error\n\n\n\n\n\n\n\n\nJust press \"Fix Issue\" and sign in with your Apple account\n\n\nIf that doesn't work, read this post\n\n\n\n\n\u25a0 \"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\"\n\n\n\n\n\n\n\n\n\n\nSelect the project from XCode.\n\n\nGo to \"General\" section.\n\n\nClick \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.\n\n\n\n\n\n\n\n\n\n\n\u25a0 \"Code signing is required for product type 'Application' in SDK\"\n\n\n\n\n\n\n\n\n\n\nSelect the project from XCode.\n\n\nGo to \"General\" section.\n\n\nClick \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.\n\n\n\n\n\n\n\n\n\n\n\u25a0 \"Untrusted Enterprise Developer\"\n\n\nKeep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app?\n\n\n\n\n\n\n\n\n\n\n\n\n\nOr read the Apple Guideline below:\n\n\nGuidelines for installing custom enterprise apps on iOS\n\n\n\n\n\u25a0 \"Can't be opened because it is from an unidentified developer.\"\n\n\nDo you get the following error when you try to execute the \nSetup\n command?\n\n\n\n\n\n\n\n\nThis article will help you\n\n\n\n\n\u25a0 \"... is busy: Processing symbol files\"\n\n\nDo you get this alert when you press the \nplay\n button?\n\n\n\n\n\n\n\n\nJust wait for a bit until the progress bar gets to the end, and then retry.\n\n\n\n\n\u25a0 \"Offline mode\"\n\n\nIn the current implementation of Jasonette, this message means either:\n\n\n\n\nThere's a problem with your network.\n\n\nThere's something wrong with your JSON markup and Jasonette is not able to interpret it correctly.\n\n\n\n\nPlease first check the network to see other apps are working fine. After that, check your JSON, keep simplifying it down until you find the problematic markup.\n\n\n\n\nNeed more help?\n\n\n\n\n\n\nSlack - \n  Come ask quick questions and share tips with other Jasonette users. \nJoin here\n\n\n\n\n\n\n\n\nForum - \n  Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here: \nhttps://forum.jasonette.com", 
            "title": "\u25a0 iOS"
        }, 
        {
            "location": "/ios/#step-1-download", 
            "text": "Jasonette itself is a pre-built app. All you need to do is download and build with  XCode . \nGo ahead and download Jasonette, and then unzip.   Download Jasonette-iOS", 
            "title": "Step 1. DOWNLOAD"
        }, 
        {
            "location": "/ios/#step-2-setup", 
            "text": "Initialize by running the  Setup  command.  This command automatically generates icons and sets the title and the url.      BEFORE YOU START:  Make sure you have the most recent version of XCode! (At least XCode 8) You can download it  Here .", 
            "title": "Step 2. SETUP"
        }, 
        {
            "location": "/ios/#step-3-play", 
            "text": "Connect your phone and click play on XCode. Done!", 
            "title": "Step 3. PLAY"
        }, 
        {
            "location": "/ios/#did-it-work", 
            "text": "", 
            "title": "\u2605 Did it work?"
        }, 
        {
            "location": "/ios/#yes", 
            "text": "Congratulations! You're ready to transform this into your OWN app! Go on to the  tutorial", 
            "title": "YES?"
        }, 
        {
            "location": "/ios/#no", 
            "text": "Check troubleshoot section", 
            "title": "NO?"
        }, 
        {
            "location": "/ios/#manual-setup", 
            "text": "It is recommended that you use  the Setup command  since it takes care of most of tedious details, but you can also do this manually.", 
            "title": "Manual setup"
        }, 
        {
            "location": "/ios/#step-1-download_1", 
            "text": "Download Jasonette  and unzip.", 
            "title": "Step 1. Download"
        }, 
        {
            "location": "/ios/#step-2-open-in-xcode", 
            "text": "Go into the  app  folder and open  Jasonette.xcworkspace  file.  (warning: Make sure to open the  xcworkspace  file, NOT the  xcodeproj  file!)", 
            "title": "Step 2. Open in XCode"
        }, 
        {
            "location": "/ios/#step-3-update-config-attributes-and-generate-icons-manually", 
            "text": "Set App Name:  Under the  Config  group, open the  Info.plist  file and change the  CFBundleName  attribute.  Set Root URL:  Under the  Config  group, open the  settings.plist  file and change the  url  attribute.  Generate Icon:  You can try generating app icons using online services like  makeappicon.com , and  add them manually to the project .", 
            "title": "Step 3. Update config attributes and generate icons manually"
        }, 
        {
            "location": "/ios/#step-4-play", 
            "text": "Connect your phone and click play on XCode. Done!", 
            "title": "Step 4. Play"
        }, 
        {
            "location": "/ios/#submitting-to-the-app-store", 
            "text": "There are a couple of things to keep in mind when submitting to the app store.", 
            "title": "Submitting to the app store"
        }, 
        {
            "location": "/ios/#1-sign-up-as-apple-developer", 
            "text": "You can test as much as you want without signing up as a developer, you can even put apps on your phone. However when it comes to actually submitting apps, you need to register as a developer. Google \"apple developer\" to learn how to do this.", 
            "title": "1. Sign up as Apple Developer"
        }, 
        {
            "location": "/ios/#2-archive-and-upload", 
            "text": "Assuming you're all ready, you just need to \"archive\" the app first, and then press \"upload to app store\".", 
            "title": "2. Archive and Upload"
        }, 
        {
            "location": "/ios/#3-uncheck-include-bitcode", 
            "text": "When you press \"upload to app store\", it will show up a confirmation dialog. Uncheck \"Include bitcode\" option here. We do not need Bitcode because Jasonette is already small due to its modularity, and it actually may become larger. In fact including bitcode doesn't work well with Jasonette, so make sure you uncheck this.", 
            "title": "3. Uncheck \"Include bitcode\""
        }, 
        {
            "location": "/ios/#troubleshoot", 
            "text": "", 
            "title": "Troubleshoot"
        }, 
        {
            "location": "/ios/#unknown-property-attribute-class", 
            "text": "", 
            "title": "\u25a0 \"Unknown property attribute 'class'\""
        }, 
        {
            "location": "/ios/#this-is-known-to-happen-in-old-versions-of-xcode-please-upgrade-your-xcode-to-the-latest-version", 
            "text": "", 
            "title": "This is known to happen in old versions of XCode. Please upgrade your XCode to the latest version"
        }, 
        {
            "location": "/ios/#no-provisioning-error", 
            "text": "", 
            "title": "\u25a0 \"No provisioning...\" error"
        }, 
        {
            "location": "/ios/#just-press-fix-issue-and-sign-in-with-your-apple-account", 
            "text": "If that doesn't work, read this post", 
            "title": "Just press \"Fix Issue\" and sign in with your Apple account"
        }, 
        {
            "location": "/ios/#signing-for-jasonette-requires-a-development-team-select-a-development-team-in-the-project-editor", 
            "text": "Select the project from XCode.  Go to \"General\" section.  Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.", 
            "title": "\u25a0 \"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\""
        }, 
        {
            "location": "/ios/#code-signing-is-required-for-product-type-application-in-sdk", 
            "text": "Select the project from XCode.  Go to \"General\" section.  Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.", 
            "title": "\u25a0 \"Code signing is required for product type 'Application' in SDK\""
        }, 
        {
            "location": "/ios/#untrusted-enterprise-developer", 
            "text": "Keep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app?       Or read the Apple Guideline below:  Guidelines for installing custom enterprise apps on iOS", 
            "title": "\u25a0 \"Untrusted Enterprise Developer\""
        }, 
        {
            "location": "/ios/#cant-be-opened-because-it-is-from-an-unidentified-developer", 
            "text": "Do you get the following error when you try to execute the  Setup  command?     This article will help you", 
            "title": "\u25a0 \"Can't be opened because it is from an unidentified developer.\""
        }, 
        {
            "location": "/ios/#is-busy-processing-symbol-files", 
            "text": "Do you get this alert when you press the  play  button?     Just wait for a bit until the progress bar gets to the end, and then retry.", 
            "title": "\u25a0 \"... is busy: Processing symbol files\""
        }, 
        {
            "location": "/ios/#offline-mode", 
            "text": "In the current implementation of Jasonette, this message means either:   There's a problem with your network.  There's something wrong with your JSON markup and Jasonette is not able to interpret it correctly.   Please first check the network to see other apps are working fine. After that, check your JSON, keep simplifying it down until you find the problematic markup.", 
            "title": "\u25a0 \"Offline mode\""
        }, 
        {
            "location": "/ios/#need-more-help", 
            "text": "Slack -    Come ask quick questions and share tips with other Jasonette users.  Join here     Forum -    Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here:  https://forum.jasonette.com", 
            "title": "Need more help?"
        }, 
        {
            "location": "/android/", 
            "text": "Set up Jasonette android\n\n\n\n\n\n Want to skip the setup and try Jasonette without building your own app? - \nTry Jason.\n\n\n\n\n\n\n\nStep 1. DOWNLOAD AND UNZIP\n\n\n\nJasonette itself is a pre-built app.\nAll you need to do is download Jasonette and build with \nAndroid Studio\n.\n\n\n\n Download Jasonette-Android\n\n\n\n\n\n\n\n\n\nStep 2. LAUNCH ANDROID STUDIO\n\n\nNow launch \nAndroid Studio\n, and select \"Import project\"\n\n\n\n\nStep 3. IMPORT THE PROJECT\n\n\nFind the Jasonette folder you just unzipped and press OK.\n\n\n\n\nStep 4. PRESS PLAY\n\n\nJasonette comes with a default demo JSON url embedded. Let's try running it to make sure it works.\n\n\n\n\nStep 5. CONNECT THE PHONE AND RUN\n\n\nIt will show up a dialog that looks like this.\n\n\nHere you can either choose to run it on an emulator or a real device.\n\n\nTo learn how to connect the phone, or how to run it on an emulator, \nread this\n.\n\n\n\n\nStep 6. CUSTOMIZE!\n\n\nNow let's try changing the JSON url so you can turn it into your own app.\n\n\nFirst, click the \"Project\" tab on the left side.\n\n\nThen find \napp\n \n \nres\n \n \nvalues\n \n \nstrings.xml\n.\n\n\n\n\n\n\nA. Update JSON URL\n\n\nUpdate the \nurl\n property inside \nstrings.xml\n to your own JSON url. That's it! Build and run the app and you'll find that it's turned into your own app!\n\n\nIf you don't have a JSON yet, \nhere are some example apps you can try quickly\n\n\n\n\nB. Update App name\n\n\nBy default the app is named \"Jasonette\". You probably want to change this. From the same \nstrings.xml\n file, change the \napp_name\n value to your desired app name.\n\n\n\n\nC. Update App icon\n\n\nStep 1. Create new Image Asset\n\n\nSelect \napp\n \n \nres\n and right-click to display a context menu. Then select \nNew\n \n \nImage Asset\n.\n\n\n\n\n\n\nStep 2. Select your image\n\n\nSelect \nimage\n as Asset Type, and select the \npath\n to the image you want to use.\n\n\n\n\n\n\nStep 3. Confirm and finish\n\n\nIt will display some warning about overwriting existing icon. You're overwriting the default icon with your own so it's natural. Press Finish.\n\n\n\n\n\n\n\nD. Update App ID (Important!)\n\n\nThis is important if you want to submit to the play store, since this is the ID that distinguishes one app from another.\n\n\nTo change this ID, go to: \nGradle Scripts\n \n \nbuild.gradle (Module: app)\n, and find the \napplicationId\n attribute.\n\n\nIt should be \ncom.jasonette\n by default.\n\n\n\n\nChange this to your own unique ID. (In this example I've changed it to \ncom.jasonette.seed\n)\n\n\nPress \"Sync Now\" at the top right corner, and rebuild.\n\n\n\n\nTo learn more, \nread this documentation\n.\n\n\n\n\n\n\n\n\n\u2605 Did it work?\n\n\n\n\n\n\n\n\nYES?\n\n\n\n\nCongratulations! You're ready to transform this into your OWN app! Go on to the \ntutorial\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNO?\n\n\n\n\nCheck troubleshoot section\n\n\n\n\n\n\n\n\n\n\nSubmitting to the play store\n\n\nCheck out this documentation\n to learn how to submit to the play store.\n\n\n\n\nDebugging\n\n\nStetho\n\n\nStetho is a library from Facebook that has been integrated into Debug build types of the Jason app to allow debugging via Chrome Dev Tools.\n\n\nTo use Stetho for debugging:\n\n\n\n\n\n\nRun the Jason app from Android Studio on either a emulator or connected Andriod device (you can also directly use the debug APK that AS creates in \napp/build/outputs/apk/app-debug.apk\n)\n\n\n\n\n\n\nIn a Chrome web browser running on a machine on the same network as the Android device or emulator, open the url \nchrome://inspect\n and you should see under 'Remote Target' an entry labelled \nJasonette (powered by Stetho)\n:\n\n\n\n\n\n\n\nClick on the \ninspect link\n and that will open a new Chrome Dev Tools window, connected to your app ready for debugging.\n\n\n\n\n\n\n\n\nUsing the Dev Tools interface you can now inspect the hiearchy of your UI layout, inspect network requests, browse the key-values stored by the Jasonette $global.set and see output from any uses of console.log in your template expressions.\n\n\nA handy feature in the \nElements\n tab of Dev Tools is the UI element running on the Android device will be highlighted when its element is hovered over by the mouse in the Elements tab, just as it would if you were using Dev Tools with a web page.\n\n\nConsole output\n\n\nAs noted above, a useful feature with Stetho is being able to send debugging output to the Dev Tools console.\nWhen Dev Tools is connected, all logging output, both from Jasonette that would go to logcat will also be displayed int eh DevTools console tab.\n\n\nYou can send log output to the console from using Javascript within template expressions like so:\n\n\n{\n  \nsomeaction\n : \n{{ console.debug('hello debug') }}\n\n}\n\n\n\n\n\n\nNote:\n Dev Tools will disconnect from your app each time it is killed (eg. if you  install an updated APK). When that happens, to close your existing DevTools window and return  'chrome://inspect' to open it again.\n\n\nNote:\n Stetho is only included in the \ndebug\n  build type and will \nNOT\n be included by the gradle config in \nrelease\n builds of the APK.\n\n\n\n\nFor more details about Stetho please see \nits website\n.\n\n\nTroubleshoot\n\n\nNeed more help?\n\n\n\n\n\n\nSlack - \n  Come ask quick questions and share tips with other Jasonette users. \nJoin here\n\n\n\n\n\n\n\n\nForum - \n  Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here: \nhttps://forum.jasonette.com", 
            "title": "\u25a0 Android"
        }, 
        {
            "location": "/android/#step-1-download-and-unzip", 
            "text": "Jasonette itself is a pre-built app. All you need to do is download Jasonette and build with  Android Studio .   Download Jasonette-Android", 
            "title": "Step 1. DOWNLOAD AND UNZIP"
        }, 
        {
            "location": "/android/#step-2-launch-android-studio", 
            "text": "Now launch  Android Studio , and select \"Import project\"", 
            "title": "Step 2. LAUNCH ANDROID STUDIO"
        }, 
        {
            "location": "/android/#step-3-import-the-project", 
            "text": "Find the Jasonette folder you just unzipped and press OK.", 
            "title": "Step 3. IMPORT THE PROJECT"
        }, 
        {
            "location": "/android/#step-4-press-play", 
            "text": "Jasonette comes with a default demo JSON url embedded. Let's try running it to make sure it works.", 
            "title": "Step 4. PRESS PLAY"
        }, 
        {
            "location": "/android/#step-5-connect-the-phone-and-run", 
            "text": "It will show up a dialog that looks like this.  Here you can either choose to run it on an emulator or a real device.  To learn how to connect the phone, or how to run it on an emulator,  read this .", 
            "title": "Step 5. CONNECT THE PHONE AND RUN"
        }, 
        {
            "location": "/android/#step-6-customize", 
            "text": "Now let's try changing the JSON url so you can turn it into your own app.  First, click the \"Project\" tab on the left side.  Then find  app     res     values     strings.xml .", 
            "title": "Step 6. CUSTOMIZE!"
        }, 
        {
            "location": "/android/#a-update-json-url", 
            "text": "Update the  url  property inside  strings.xml  to your own JSON url. That's it! Build and run the app and you'll find that it's turned into your own app!  If you don't have a JSON yet,  here are some example apps you can try quickly", 
            "title": "A. Update JSON URL"
        }, 
        {
            "location": "/android/#b-update-app-name", 
            "text": "By default the app is named \"Jasonette\". You probably want to change this. From the same  strings.xml  file, change the  app_name  value to your desired app name.", 
            "title": "B. Update App name"
        }, 
        {
            "location": "/android/#c-update-app-icon", 
            "text": "Step 1. Create new Image Asset  Select  app     res  and right-click to display a context menu. Then select  New     Image Asset .    Step 2. Select your image  Select  image  as Asset Type, and select the  path  to the image you want to use.    Step 3. Confirm and finish  It will display some warning about overwriting existing icon. You're overwriting the default icon with your own so it's natural. Press Finish.", 
            "title": "C. Update App icon"
        }, 
        {
            "location": "/android/#d-update-app-id-important", 
            "text": "This is important if you want to submit to the play store, since this is the ID that distinguishes one app from another.  To change this ID, go to:  Gradle Scripts     build.gradle (Module: app) , and find the  applicationId  attribute.  It should be  com.jasonette  by default.   Change this to your own unique ID. (In this example I've changed it to  com.jasonette.seed )  Press \"Sync Now\" at the top right corner, and rebuild.   To learn more,  read this documentation .", 
            "title": "D. Update App ID (Important!)"
        }, 
        {
            "location": "/android/#did-it-work", 
            "text": "", 
            "title": "\u2605 Did it work?"
        }, 
        {
            "location": "/android/#yes", 
            "text": "Congratulations! You're ready to transform this into your OWN app! Go on to the  tutorial .", 
            "title": "YES?"
        }, 
        {
            "location": "/android/#no", 
            "text": "Check troubleshoot section", 
            "title": "NO?"
        }, 
        {
            "location": "/android/#submitting-to-the-play-store", 
            "text": "Check out this documentation  to learn how to submit to the play store.", 
            "title": "Submitting to the play store"
        }, 
        {
            "location": "/android/#debugging", 
            "text": "", 
            "title": "Debugging"
        }, 
        {
            "location": "/android/#stetho", 
            "text": "Stetho is a library from Facebook that has been integrated into Debug build types of the Jason app to allow debugging via Chrome Dev Tools.  To use Stetho for debugging:    Run the Jason app from Android Studio on either a emulator or connected Andriod device (you can also directly use the debug APK that AS creates in  app/build/outputs/apk/app-debug.apk )    In a Chrome web browser running on a machine on the same network as the Android device or emulator, open the url  chrome://inspect  and you should see under 'Remote Target' an entry labelled  Jasonette (powered by Stetho) :    Click on the  inspect link  and that will open a new Chrome Dev Tools window, connected to your app ready for debugging.     Using the Dev Tools interface you can now inspect the hiearchy of your UI layout, inspect network requests, browse the key-values stored by the Jasonette $global.set and see output from any uses of console.log in your template expressions.  A handy feature in the  Elements  tab of Dev Tools is the UI element running on the Android device will be highlighted when its element is hovered over by the mouse in the Elements tab, just as it would if you were using Dev Tools with a web page.", 
            "title": "Stetho"
        }, 
        {
            "location": "/android/#console-output", 
            "text": "As noted above, a useful feature with Stetho is being able to send debugging output to the Dev Tools console.\nWhen Dev Tools is connected, all logging output, both from Jasonette that would go to logcat will also be displayed int eh DevTools console tab.  You can send log output to the console from using Javascript within template expressions like so:  {\n   someaction  :  {{ console.debug('hello debug') }} \n}   Note:  Dev Tools will disconnect from your app each time it is killed (eg. if you  install an updated APK). When that happens, to close your existing DevTools window and return  'chrome://inspect' to open it again.  Note:  Stetho is only included in the  debug   build type and will  NOT  be included by the gradle config in  release  builds of the APK.", 
            "title": "Console output"
        }, 
        {
            "location": "/android/#for-more-details-about-stetho-please-see-its-website", 
            "text": "", 
            "title": "For more details about Stetho please see its website."
        }, 
        {
            "location": "/android/#troubleshoot", 
            "text": "", 
            "title": "Troubleshoot"
        }, 
        {
            "location": "/android/#need-more-help", 
            "text": "Slack -    Come ask quick questions and share tips with other Jasonette users.  Join here     Forum -    Chat messages on Slack tend to flow away, so you may want to ask questions on the forum. Also it's good for future users who may have the same problem. All messages on the forum will be read. Visit here:  https://forum.jasonette.com", 
            "title": "Need more help?"
        }, 
        {
            "location": "/examples/", 
            "text": "How to try these examples\n\n\nSimply take one of the JSON urls below, add to Jasonette and play. You can learn more on how to use Jasonette \nhere\n.\n\n\n\n\n\u2605 Jasonpedia\n\n\n\n\nA tutorial demo of every Jasonette UI component and action. Try this first if you haven't yet.\n\n\nJSON: \nhttps://github.com/Jasonette/Jasonpedia\n\n\n\n\n\n\n\n\n\n\n\u2605 Instagram UI\n\n\n\n\nAn Instagram UI, completely written in JSON.\n\n\nJSON: \nhttps://github.com/Jasonette/Instagram-UI-example\n\n\n\n\n\n\n\n\n\n\n\u2605 Twitter UI\n\n\n\n\nA Twitter UI, completely written in JSON.\n\n\nJSON: \nhttps://github.com/Jasonette/Twitter-UI-example\n\n\n\n\n\n\n\n\n\n\n\u2605 Kitty\n\n\n\n\nA minimal \nProduct Hunt\n client. Makes use of the \nHTML to JSON parsing\n feature. [\nwebsite\n]\n\n\nJSON: \nhttps://github.com/gliechtenstein/kitty.json\n\n\n\n\n\n\n\n\n\n\n\u2605 Weather\n\n\n\n\nTakes the device location, makes a network request to \nopenweathermap.org API\n, and then displays the result on the screen. Also uses \ncamera\n as background display.\n\n\nJSON: \nhttp://www.jasonbase.com/things/1wn\n\n\n\n\n\n\n\n\n\n\n\u2605 Eliza\n\n\n\n\nEliza chatbot app. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the \nfull source\n.\n\n\nJSON: \nhttp://fureliza.herokuapp.com\n\n\n\n\n\n\n\n\n\n\n\u2605 Photo upload example\n\n\n\n\nSimple app to upload photos to S3. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the \nfull source\n.\n\n\nJSON: \nhttp://imagejason.herokuapp.com\n\n\n\n\n\n\n\n\n\n\n\u2605 Microblog with user accounts\n\n\n\n\nSimple microblog app to post messages, complete with user login. If you want to install the backend on your own server, here's the \nfull source and an instruction on how to build one from scratch\n.\n\n\nJSON: \nhttp://sessionjason.herokuapp.com\n\n\n\n\n\n\n\n\n\n\n\n\nsigned out\n\n\nsigned in", 
            "title": "\u25a0 Examples"
        }, 
        {
            "location": "/examples/#how-to-try-these-examples", 
            "text": "Simply take one of the JSON urls below, add to Jasonette and play. You can learn more on how to use Jasonette  here .", 
            "title": "How to try these examples"
        }, 
        {
            "location": "/examples/#jasonpedia", 
            "text": "A tutorial demo of every Jasonette UI component and action. Try this first if you haven't yet.  JSON:  https://github.com/Jasonette/Jasonpedia", 
            "title": "\u2605 Jasonpedia"
        }, 
        {
            "location": "/examples/#instagram-ui", 
            "text": "An Instagram UI, completely written in JSON.  JSON:  https://github.com/Jasonette/Instagram-UI-example", 
            "title": "\u2605 Instagram UI"
        }, 
        {
            "location": "/examples/#twitter-ui", 
            "text": "A Twitter UI, completely written in JSON.  JSON:  https://github.com/Jasonette/Twitter-UI-example", 
            "title": "\u2605 Twitter UI"
        }, 
        {
            "location": "/examples/#kitty", 
            "text": "A minimal  Product Hunt  client. Makes use of the  HTML to JSON parsing  feature. [ website ]  JSON:  https://github.com/gliechtenstein/kitty.json", 
            "title": "\u2605 Kitty"
        }, 
        {
            "location": "/examples/#weather", 
            "text": "Takes the device location, makes a network request to  openweathermap.org API , and then displays the result on the screen. Also uses  camera  as background display.  JSON:  http://www.jasonbase.com/things/1wn", 
            "title": "\u2605 Weather"
        }, 
        {
            "location": "/examples/#eliza", 
            "text": "Eliza chatbot app. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the  full source .  JSON:  http://fureliza.herokuapp.com", 
            "title": "\u2605 Eliza"
        }, 
        {
            "location": "/examples/#photo-upload-example", 
            "text": "Simple app to upload photos to S3. Uses a simple node.js server as backend. If you want to install the backend on your own server, here's the  full source .  JSON:  http://imagejason.herokuapp.com", 
            "title": "\u2605 Photo upload example"
        }, 
        {
            "location": "/examples/#microblog-with-user-accounts", 
            "text": "Simple microblog app to post messages, complete with user login. If you want to install the backend on your own server, here's the  full source and an instruction on how to build one from scratch .  JSON:  http://sessionjason.herokuapp.com       signed out  signed in", 
            "title": "\u2605 Microblog with user accounts"
        }, 
        {
            "location": "/document/", 
            "text": "\u2500\u2500 $jason \u2500\u2500\n\n\nA Jason document always starts with \n$jason\n as its root node, and has two children: \nhead\n and \nbody\n, each of which has multiple children of its own.\n\n\n\n\n\u2500\u2500 head \u2500\u2500\n\n\nThe head contains a set of metadata that doesn't get displayed directly.  The title attribute is mandatory. Rest of the attributes are optional.\n\n\nHead can contain the following attributes:\n\n\n\n\ntitle\n\n\ndescription\n\n\nicon\n\n\noffline\n\n\nstyles\n\n\nactions\n\n\ntemplates\n\n\ndata\n\n\n\n\nIn JSON they look like this:\n\n\n{\n  \"$jason\": {\n    \n\"head\": {\n      \"title\": \"...\",\n      \"description\": \"...\",\n      \"icon\": \"...\",\n      \"offline\": \"true\",\n      \"styles\": {\n        ...\n      },\n      \"actions\": {\n        ...\n      },\n      \"templates\": {\n        ...\n      },\n      \"data\": {\n        ...\n      }\n    },\n\n    \"body\": {\n      ...\n    }\n  }\n}\n\n\n\n\n\nhead.title\n\n\nTitle string for your app.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \n\"title\": \"Hello World\",\n\n      ...\n    },\n    ...\n  }\n}\n\n\n\n\n\nhead.description\n\n\nDescription string for your app. Let users find out what the app does, how it works, etc. just by looking at the JSON code.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Hello World\",\n      \n\"description\": \"This app displays 'Hello World' on the screen\",\n\n      ...\n    },\n    ...\n  }\n}\n\n\n\n\n\nhead.icon\n\n\nAn icon URL that represents your app.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Hellow World\",\n      \"description\": \"This app displays 'Hello World' on the screen\",\n      \n\"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\",\n\n      ...\n    },\n    ...\n  }\n}\n\n\n\n\n\nhead.offline\n\n\nOptional value to cache JSON file for offline use.\nDefaults to \ntrue\n.\nIt doesn't matter what you set the value to; due to a quirk of Jasonette, just including it with any value makes it be counted as true.\n\n\nHere's an example of how to use it:\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Hellow World\",\n      \"description\": \"This app displays 'Hello World' on the screen\",\n      \"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\",\n      \n\"offline\": \"true/yes/on\",\n\n      ...\n    },\n    ...\n  }\n}\n\n\n\n\nhead.styles\n\n\nDeclare commonly used style classes here so you can reuse them later.\n\n\nLet's take a look at an example to demonstrate how using \nhead.styles\n can be helpful compared to styling UI elements \ninline\n.\n\n\nFor example here's an example of \ninline styling\n:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n          \n\"style\": {\n            \"font\": \"HelveticaNeue\",\n            \"size\": \"20\",\n            \"color\": \"#ff0000\",\n            \"padding\": \"10\"\n          }\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n          \n\"style\": {\n            \"font\": \"HelveticaNeue\",\n            \"size\": \"20\",\n            \"color\": \"#ff0000\",\n            \"padding\": \"10\"\n          }\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n          \n\"style\": {\n            \"font\": \"HelveticaNeue\",\n            \"size\": \"20\",\n            \"color\": \"#ff0000\",\n            \"padding\": \"10\"\n          }\n\n        }]\n      }]\n    }\n  }\n}\n\n\n\nYou can see that there's a \nstyle\n JSON for each label item. This is called \ninline styling\n since the style attribute is attached to the UI component directly.\n\n\nNow if you look closer, you'll see that each item has exactly the same repeating style.\n\n\nWe can get rid of this redundancy by using \nhead.styles\n:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n      \n\"styles\": {\n        \"styled_row\": {\n          \"font\": \"HelveticaNeue\",\n          \"size\": \"20\",\n          \"color\": \"#ff0000\",\n          \"padding\": \"10\"\n        }\n      }\n\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n          \n\"class\": \"styled_row\"\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n          \n\"class\": \"styled_row\"\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n          \n\"class\": \"styled_row\"\n\n        }]\n      }]\n    }\n  }\n}\n\n\n\nFirst look at each label item. Now the style attributes are gone, but instead we have a \nclass\n value of \nstyled_row\n for each.\n\n\nNow let's look under \n$jason.head.styles\n. You'll see we now have the \nstyled_row\n defined here. The styles registered here will be applied to each UI component whenever its class name is referenced.\n\n\nnote\n\n\nMultiple styles can be used in a single \nclass\n. Example: \n\n\"class\": \"styled_row color_white background_green\"\n. \nThis can be used for creating complex styles with ease!.\n\n\n\n\nhead.actions\n\n\nUsing action registry to define actions\n\n\nYou can define actions under the action registry (\nhead.actions\n) and reuse them through the \ntrigger\n keyword.\n\n\n\n\nhead.templates\n\n\nDeclaring templates\n\n\nYou can dynamically render any data using templates. Templates are registered under \nhead.templates\n\n\n\n\nhead.data\n\n\nUsing inline data for rendering\n\n\nhead.data\n is like an inline database that gets rendered automatically by \nbody\n template if included.\n\n\n\n\n\u2500\u2500 body \u2500\u2500\n\n\nBody contains everything that gets displayed on the screen. A body is made up of the following view elements.\n\n\n{\n    \"$jason\": {\n        \"head\": {\n            ...\n        },\n        \n\"body\": {\n            \"header\": {\n                ...\n            },\n            \"sections\": [\n                { ... },\n                { ... },\n                ...\n            ],\n            \"layers\": [\n                { ... },\n                { ... },\n                ...\n            ],\n            \"footer\": {\n                ...\n            }\n        }\n\n    }\n}\n\n\n\n\n\nheader\n represents the top area\n\n\nsections\n represent a scrollable list of items\n\n\nlayers\n represent non-scrolling items\n\n\nfooter\n represents the bottom area\n\n\n\n\n\n\nexamples\n\n\nHere's what each part looks like in a real app:\n\n\n\n\n\n\nSections contains a list that can be scrolled.\n\n\n\n\n\n\n\n\nLayers are images or labels that stay put on top of everything.\n\n\nYou can also drag/resize/rotate layers depending on how you define them.\n\n\n\n\nbody.ads\n\n\nbody.ads\n describes the banner ads and the interstitial ads on the page\n\n\n\n\n\u25a0  ads\n\n\nUse to show banner and interstitial ads.\nCurrently iOS only, open Android Issue here: \nAd support for Android #22\n\n\nscreenshots\n\n\nBanner ad:\n\n\n\n\nInterstitial ad:\n\n\n\n\nsyntax\n\n\n\u2022 \ntype\n: \n\"admob\"\n\n\n\u2022 \noptions\n: Possible options for the ad\n\n\n\n\ntype\n: \nbanner\n or \ninterstitial\n, for type of ad.\n\n\nunitID\n: AdMob Unit ID. Just a string of letters and numbers, e.g.: \nca-app-pub-6606303247985815/7014816684\n\n\n\n\nExample\n\n\n...\n\"ads\": [\n  {\n    \"type\": \"admob\",\n    \"options\": {\n      \"type\": \"banner\",\n      \"unitId\": \"a14dccd0fb24d45\"\n    }\n  },\n  {\n    \"type\": \"admob\",\n    \"options\": {\n      \"type\": \"interstitial\",\n      \"unitId\": \"ca-app-pub-6606303247985815/7014816684\"\n    }\n  }\n],\n...\n\n\n\nHow to enable ads\n\n\nAds aren't enabled by default, so you have to enable them. To enable them, do the following steps:\n\n\n\n\nDownload the latest version of Jasonette from the \nmaster\n branch and unzip: \nmaster branch download\n\n\nDownload CocoaPods from here: https://cocoapods.org/app\n\n\nRun CocoaPods. From the app menu, open \nFile \n Open Podfile\n. Then find the project folder you just unzipped. From the project folder, go into \napp\n folder and you should see a file called \nPodfile\n. Select that file and open it from CocoaPods app. You should see this screen:\n\n\n\n\n\n\n\n\nUncomment \npod 'GoogleMobileAds', '~\n 7.8'\n (By removing the \n#\n character) and press the \ninstall\n button in the top right corner. The install will start, after that you'll see the following screen:\n\n\n\n\n\n\nNotice the green Installing GoogleMobileAds line from above screenshot. That means the library has been successfully installed into the project and you can use it.\n\n\n\n\nNow go to the root folder of your project and run Setup, and go through the setup process just like any other Jasonette project.\n\n\nYou now need to turn on the Ad feature on Xcode. To do this, open \nJasonette \n Config \n Constants.h\n file from in your Xcode workspace (which should have opened after the setup process), Uncomment \n#define ADS 1\n by removing the \n//\n. The result should look something like this:\n\n\n\n\n\n\nAnd that's it! You should now be able to use ads in your project.\n\n\n\n\nbody.header\n\n\nbody.header\n describes the top header bar and its components.\n\n\n\n\n\u25a0 title\n\n\nThere are two ways to set the title of the header bar:\n\n\n\n\nBasic: Simple text\n\n\nAdvanced: Can be a text or an image\n\n\n\n\nBasic title\n\n\nSimply set the string to change the title on the header bar.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"title\": \"[Title goes here]\"\n      },\n      ...\n    }\n  }\n}\n\n\n\nThe result:\n\n\n\n\nAdvanced title\n\n\nYou can describe the title in more detail using a \ntitle\n object instead of just a simple string. Here's the syntax:\n\n\n\n\ntype\n: \n\"label\"\n or \n\"image\"\n\n\ntext\n: In case it's a \nlabel\n type, set the text. Same as using the basic title described above.\n\n\nurl\n: In case it's an image, set the image url.\n\n\nstyle\n: In case it's an image we can set the \nwidth\n and the \nheight\n\n\nalign\n: \n\"left\"\n or \n\"center\"\n (If not specified, it's \ncenter\n by default)\n\n\nwidth\n: set the width of the image\n\n\nheight\n: set the height of the image\n\n\ntop\n: Top offset.\n\n\nleft\n: Left offset. \nONLY APPLICABLE WHEN \n\"align\": \"left\"\n\n\nfont\n: Font name in case \n\"type\": \"label\"\n\n\nsize\n: Font size in case \n\"type\": \"label\"\n\n\n\n\n\n\n\n\nHere's an example\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"title\": {\n          \"type\": \"image\",\n          \"style\": {\n            \"width\": \"94\",\n            \"height\": \"27\"\n          },\n          \"url\": \"https://raw.githubusercontent.com/Jasonette/Instagram-UI-example/master/images/logo.png\"\n        }\n      },\n      ...\n    }\n  }\n}\n\n\n\nThe result (See the header title image):\n\n\n\n\n\n\n\u25a0  search\n\n\nSearch component. Calls an \naction\n you define when user submits a query.\n\n\n\n\nattributes\n\n\n\n\nname\n\n\nplaceholder\n\n\naction\n\n\nstyle\n\n\nbackground\n: background color\n\n\ncolor\n: tint color (for placeholder, text \n icon)\n\n\n\n\n\n\n\n\nexample\n\n\n\n\nThe search component can trigger an action if you define one.\n\n\nAlso the value inside the search input is automatically stored to the \nlocal variable\n which you name by setting the \nname\n attribute.\n\n\nIf you are not aware of how local variables work, read the \nlocal variable\n section first.\n\n\n\n\n\n\n\n\nTake a look at the following example:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"search\": {\n          \"name\": \"query_text\",\n          \"placeholder\": \"Search something\",\n          \"style\": {\n            \"background\": \"#000000\"\n          },\n          \"action\": {\n            \"type\": \"$util.alert\",\n            \"options\": {\n              \"title\": \"You've entered:\",\n              \"description\": \"{{$get.query_text}}\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\nHere's what's going on:\n\n\n\n\nWe bind the \nsearch\n input with a local variable \nquery_text\n (By setting the \nname\n attribute under \nbody.header.search\n as \nquery_text\n)\n\n\nThe search input then calls the \n$util.alert\n action when user submits input, utilizing the local variable through \n{{$get.query_text}}\n\n\n\n\n\n\n\u25a0 menu\n\n\n\n\nmenu\n represents the menu button at the top right corner on the header.\n\n\nmenu\n can call \nactions\n or \nlink to another view\n.\n\n\nmenu\n can also have a \nbadge\n.\n\n\n\n\n\n\nattributes\n\n\n\u25a0  \ntext\n: menu button text\n\n\n\u25a0  \nimage\n: menu button icon url\n\n\n\u25a0  \nstyle\n\n\n\n\ncolor\n: font color or image mask color\n\n\nfont\n: font name\n\n\nsize\n: font size\n\n\n\n\n\u25a0  \nhref\n: \nview to transition to when touched\n\n\n\u25a0  \naction\n: \naction to trigger when touched\n\n\n\u25a0  \nbadge\n\n\n\n\ntext\n: The text to display inside the badge\n\n\nstyle\n:\n\n\nbackground\n: background color for the badge\n\n\ncolor\n: text color for the badge\n\n\ntop\n: x-offset of the badge\n\n\nleft\n: y-offset of the badge\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"menu\": {\n          \"text\": \"Tap me\",\n          \"style\": {\n            \"color\": \"#0000ff\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"size\": \"17\"\n          },\n          \"action\": {\n            \"type\": \"$util.toast\",\n            \"options\": {\n              \"text\": \"Good job!\"\n            }\n          },\n          \"badge\": {\n            \"text\": \"3\",\n            \"style\": {\n              \"background\": \"#ff0000\",\n              \"color\": \"#ffffff\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\nView the full code here\n\n\nnote\n\n\n\n\nChoose either \ntext\n or \nimage\n for the menu button, but not both.\n\n\nChoose either \nhref\n or \naction\n for handling tap events, but not both.\n\n\n\n\n\n\n\u25a0 style\n\n\nStyle the entire header bar.\n\n\nattributes\n\n\n\n\nfont\n: the font for \nbody.header.title\n\n\nsize\n: the text size for \nbody.header.title\n\n\nbackground\n: the background color for the entire header bar: \nbody.header\n\n\ncolor\n: the font color for \nbody.header.title\n\n\n\n\n\n\nbody.sections\n\n\nThe main region, used to display scrollable content.\n\n\nHere are the attributes each section can have:\n\n\n\n\ntype\n: optional. set to \nhorizontal\n to make it scroll horizontally. Otherwise it's just a regular, vertically scrolling section.\n\n\nheader\n: a single item. optional. (doesn't respond to user interaction. display purpose)\n\n\nitems\n: array of items (responds to user interaction)\n\n\nEach item can be either a \nlayout\n or a \ncomponent\n\n\n\n\n\n\n\n\nIn most cases one section is enough, if you're displaying just a single collection of similar items.\n\n\nUse multiple sections if you need to display different types of collections, for example one vertical section and one horizontal section.\n\n\n\n\n\u25a0  type\n\n\nA view can contain multiple sections.\n\n\nAnd each section can be either:\n\n\n1. vertically scrolling (default)\n\n\nJust a normal list view that scrolls\n\n\n\n\n\n\n2. horizontally scrolling\n\n\nscrolls from left to right (\n\"type\": \"horizontal\"\n)\n\n\n\n\nWhat's going on above:\n\n\n\n\n\n\nThe \nvertically scrolling section image\n above shows a view with \n1 vertically scrolling section\n\n\n\n\n\n\nAnd the \nhorizontally scrolling section image\n shows a view with \nmultiple horizontally scrolling sections\n\n\n\n\n\n\nYou can mix and match vertical and horizontal sections too. For example, a view can have a vertical section as the first section, and a horizontal section as the next, so forth.\n\n\n\n\n\n\n\nLet's go into more details:\n\n\n\n\n1. Vertically scrolling section\n\n\nThis is just a regular list view that lets you scroll from top to bottom.\n\n\nThis is the default\n\n\n{\n  ...\n  \"sections\": [{\n    \"items\": [{\n      \"type\": \"label\",\n      \"text\": \"Item 1\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 2\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 3\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 4\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 5\"\n    }]\n  }],\n  ...\n}\n\n\n\n2. Horizontally scrolling section\n\n\nThis type of section lets you scroll from left to right.\n\n\nTo create a horizontal section, set the section's \ntype\n as \nhorizontal\n.\n\n\n{\n  ...\n  \"sections\": [{\n    \"type\": \"horizontal\",\n    \"items\": [{\n      \"type\": \"label\",\n      \"text\": \"Item 1\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 2\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 3\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 4\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 5\"\n    }]\n  }],\n  ...\n}\n\n\n\n\n\nSection item types\n\n\nAbove we've talked about the types of sections (vertical vs. horizontal).\n\n\nNow let's talk about what a section can contain\n.\n\n\nEach section can contain:\n\n\n\n\n0 or 1 \nheader\n\n\n1 or more \nitems\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nStructure\n\n\n\n\n\n\n\n\n\n\nHorizontal\n\n\n\n\n\n\n\n\nVertical\n\n\n\n\n\n\n\n\n\n\n\u25a0 items\n\n\nAn \nitems\n array contains a list of items that users can interact with.\n\n\nEach Item can be a:\n\n\n\n\nComponent\n: A single basic UI unit (such as a label or an image)\n\n\nLayout\n: A composition of multiple components.\n\n\n\n\nattributes\n\n\nEach item can contain the following attributes\n\n\n\n\ntype\n: \nvertical\n or \nhorizontal\n in case of layout. A component name in case it's a component item. (for example, \nlabel\n, \nimage\n, \nbutton\n, etc.)\n\n\ncomponents\n: child components array (only if the type is either \nvertical\n or \nhorizontal\n. Not applicable when the type is a component)\n\n\nstyle\n: layout style + item specific style\n\n\ncolor\n: Set the color of the item's disclosure indicator in case \nhref\n is used.\n\n\nheight\n: Set the height of the item.\n\n\nz_index\n: An integer value (example: \n{\"z_index\": \"-1\"}\n). Set the z-index of the item. (Similar to \nCSS z-index\n)\n\n\n\n\n\n\naction\n: An \naction\n to trigger when a user taps the item. See \nactions reference\n for details.\n\n\nhref\n: An \nhref\n to trigger when a user taps the item. See \nhref reference\n for details.\n\n\n\n\nexample\n\n\nHere's an example:\n\n\n{\n  ...\n  \"sections\": [{\n    \"items\": [\n      {\n        \"type\": \"label\",\n        \"text\": \"Label only item\"\n      },\n      {\n        \"type\": \"vertical\",\n        \"components\": [\n          {\n            \"type\": \"image\",\n            \"url\": \"https://jasonclient.org/img/john.png\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"John\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Doe\"\n          }\n        ]\n      },\n      {\n        \"type\": \"vertical\",\n        \"components\": [\n          {\n            \"type\": \"image\",\n            \"url\": \"https://jasonclient.org/img/mary.png\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Mary\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Jane\"\n          }\n        ]\n      }\n    ]\n  }]\n  ...\n}\n\n\n\nWhat's going on above:\n\n\nThis section contains 3 items.\n\n\nThe first one is a \nlabel\n component item (Displays the text \"Label only item\")\n\n\nThe second and third are \nvertical\n layouts, each of which contains one image and two labels.\n\n\n\u25a0 header\n\n\nA header is similar to \nitems\n. Visually it looks the same. However there are some differences:\n\n\n\n\nA header is for \ndisplay purpose\n only.\n\n\nTherefore a header cannot have an \nhref\n, \naction\n, or \nmenu\n attributes.\n\n\n\n\n\n\nA header functions as a divider between sections.\n\n\nIt sticks to the top as you scroll through the items in its section, until you scroll out of the section.\n\n\n\n\n\n\nYou can only have up to 1 header per section.\n\n\nIt's optional.\n\n\n\n\nattributes\n\n\nHere's a list of attributes a header supports (Same as \nitems\n, with an exception of interactive features):\n\n\n\u25a0  \ntype\n: \nvertical\n or \nhorizontal\n in case of layout. A component name in case it's a component item. (for example, \nlabel\n, \nimage\n, \nbutton\n, etc.)\n\n\n\u25a0  \ncomponents\n: child components, in case it's a layout item.\n\n\n\u25a0  \nstyle\n: layout style + item specific style\n\n\n\n\ncolor\n: Set the color of the item's disclosure indicator in case \nhref\n is used.\n\n\nheight\n: Set the height of the item.\n\n\nz_index\n: An integer value (example: \n{\"z_index\": \"-1\"}\n). Set the z-index of the item. (Similar to \nCSS z-index\n)\n\n\nBy default, \nheader\n has a higher \nz_index\n than \nitems\n. That's why the items scroll below the header as they scroll. You can however change that by setting the header's z_index.\n\n\n\n\n\n\n\n\n\n\nbody.layers\n\n\nLayers are floating elements that can be configured to be \nresized\n, \ndragged\n, \nrotated\n, and \nreact to actions\n.\n\n\n\n\n\n\n\n\nCurrently layers support two types of components:\n\n\n\n\nlabel\n\n\nimage\n\n\n\n\n\u25a0  type:label\n\n\nFloating labels.\n\n\nattributes\n\n\n\n\ntype\n: \n\"label\"\n\n\ntext\n: the text to display\n\n\naction\n: \naction\n to run on user tap event\n\n\nstyle\n\n\nwidth\n\n\nheight\n\n\npadding\n\n\ntop\n: position from the top of the screen\n\n\nleft\n: position from the left of the screen\n\n\nright\n: position from the right of the screen\n\n\nbottom\n: position from the bottom of the screen\n\n\ncorner_radius\n\n\nfont\n\n\nsize\n\n\nbackground\n\n\ncolor\n\n\nalign\n: text align (\n\"left\"\n | \n\"center\"\n | \n\"right\"\n) Default is \n\"left\"\n\n\nresize\n: resizable when set to \n\"true\"\n (default is false)\n\n\nmove\n: can be dragged around when set to \n\"true\"\n (default is false)\n\n\nrotate\n: can be rotated when set to \n\"true\"\n (default is false)\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"layers\": [\n    {\n      \"type\": \"label\",\n      \"text\": \"Floating label\",\n      \"style\": {\n        \"top\": \"100\",\n        \"left\": \"50%-25\",\n        \"width\": \"50\",\n        \"padding\": \"10\"\n      }\n    }\n  ]\n}\n\n\n\n\u25a0  type:image\n\n\nFloating images\n\n\nattributes\n\n\n\n\ntype\n: \n\"image\"\n\n\nurl\n: Image url to load\n\n\naction\n: \naction\n to run on user tap event\n\n\nstyle\n\n\nwidth\n\n\nheight\n\n\ntop\n\n\nleft\n\n\nright\n\n\nbottom\n\n\ncorner_radius\n\n\ncolor\n: set the tint color (only for icons)\n\n\nresize\n: resizable when set to \n\"true\"\n (default is false)\n\n\nmove\n: can be dragged around when set to \n\"true\"\n (default is false)\n\n\nrotate\n: can be rotated when set to \n\"true\"\n (default is false)\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"layers\": [\n    {\n      \"type\": \"image\",\n      \"url\": \"https://www.jasonclient.org/img/sticker.png\",\n      \"style\": {\n        \"width\": \"100\",\n        \"corner_radius\": \"50\",\n        \"bottom\": \"100\",\n        \"right\": \"100\"\n      }\n    }\n  ]\n}\n\n\n\n\n\nbody.footer\n\n\nThe footer area of a view\n\n\n\n\ninput: Chat input element\n\n\ntabs: Tab element\n\n\n\n\n\u25a0  input\n\n\nChat input at the bottom\n\n\n\n\n\n\n\n\nattributes\n\n\n\u25a0 \ntextfield\n\n\n\n\nname\n: the local variable name connected to this input field.\n\n\nplaceholder\n: the placeholder text for this input field\n\n\nstyle\n\n\ncolor\n: font color\n\n\ncolor:placeholder\n: placeholder color\n\n\nbackground\n: background color for the input field\n\n\n\n\n\n\n\n\n\u25a0 \nleft\n: left button (Only allows image)\n\n\n\n\nimage\n: image URL to display as the left button\n\n\naction\n: action to call when touched\n\n\nstyle\n\n\ncolor\n: tint color for the image\n\n\n\n\n\n\n\n\n\u25a0 \nright\n: right button (Only allows label)\n\n\n\n\ntext\n: text to display as the right button\n\n\naction\n: action to call when touched\n\n\nstyle\n\n\ncolor\n: font color\n\n\ncolor:disabled\n: disabled state font color\n\n\n\n\n\n\n\n\n\u25a0 \nstyle\n\n\n\n\nbackground\n: background color for the root toolbar that contains all of the above\n\n\n\n\n\n\nexample\n\n\n{\n  \"footer\": {\n    \"input\": {\n      \"style\": {\n        \"background\": \"#cecece\"\n      },\n      \"left\": {\n        \"image\": \"https://www.jasonclient.org/img/camera.png\",\n        \"style\": {\n          \"color\": \"#ff0000\"\n        },\n        \"action\": {\n          \"type\": \"$media.camera\"\n        }\n      },\n      \"textfield\": {\n        \"name\": \"message\",\n        \"placeholder\": \"Say something...\",\n        \"style\": {\n          \"background\": \"#ffffff\",\n          \"color\": \"#ff0000\",\n          \"color:placeholder\": \"#ebebeb\"\n        }\n      },\n      \"right\": {\n        \"text\": \"Send\",\n        \"style\": {\n          \"color\": \"#ff0000\",\n          \"color:disabled\": \"#ebebeb\"\n        },\n        \"action\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonchat.org/post.json\",\n            \"method\": \"post\",\n            \"data\": {\n              \"message\": \"{{$get.message}}\"\n            }\n          },\n          \"success\": {\n            \"type\": \"$reload\"\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\u25a0  tabs\n\n\nBottom tab bar\n\n\n\n\n\n\n\n\nattributes\n\n\n\u2022 \nitems\n: an array of tab bar items. Each item can have the following attributes:\n\n\n\n\ntext\n: tab item text\n\n\nimage\n: tab item icon\n\n\nstyle\n: tab icon style\n\n\nwidth\n: icon width\n\n\nheight\n: icon height\n\n\n\n\n\n\nbadge\n: badge text\n\n\nurl\n: the view url to load when tapped.\n\n\nhref\n: the view \nhref\n to load when tapped.\n\n\naction\n: an \naction\n to run when tapped.\n\n\n\n\n\u2022 \nstyle\n: overall style for the tab bar\n\n\n\n\ncolor\n: selected item color\n\n\ncolor:disabled\n: deselected item color\n\n\nbackground\n: background color of the entire tab bar\n\n\n\n\n\n\nexample\n\n\n{\n  \"footer\": {\n    \"tabs\": {\n      \"style\": {\n        \"background\": \"rgba(255,255,255,0.8)\",\n        \"color:disabled\": \"#cecece\",\n        \"color\": \"#009efa\"\n      },\n      \"items\": [{\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/home.png\",\n        \"text\": \"Home\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/home.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/notifications.png\",\n        \"text\": \"Notifications\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/notifications.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/moments.png\",\n        \"text\": \"Moments\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/moments.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/messages.png\",\n        \"text\": \"Messages\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/messages.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/me.png\",\n        \"text\": \"Me\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/me.json\"\n      }]\n    }\n  }\n}\n\n\n\n\n\nTroubleshooting Tabs\n\n\n\n\n \u26a0\ufe0f   Troubleshoot 1: \n\n\nONLY Use tabs at the root level (The first view that shows up on launch). Any other usage may introduce unexpected behavior.\n\n\n\n\n  \u26a0\ufe0f  Troubleshoot 2:\n\n\nThe first tab MUST have a URL.\n Otherwise the view won't load.\n\n\n\n\n  \u26a0\ufe0f  Troubleshoot 3:\n\n\nThe first tab's url MUST EXACTLY MATCH the URL of the view it loads from.\n Otherwise the view won't load.\n\n\nFor example in the below example, the visible view's URL should match the URL of the \"Top Secret\" tab. It wouldn't make sense for these two URLs to NOT match anyway.\n\n\n\n\n  \u26a0\ufe0f  Troubleshoot 4:\n\n\ntabs\n can have up to 5 items (5 tabs max).\n\n\n\n\n  \u26a0\ufe0f  Troubleshoot 5:\n\n\ntabs\n must have at least 2 items (2 tabs min).\n\n\n\n\nbody.style\n\n\nStyling the body\n\n\n\n\nbackground: setting the background of the view\n\n\nborder: setting the border color for section items\n\n\n\n\n\u25a0 background\n\n\nSet the background for the entire view\n\n\n\n\navailable values\n\n\n\n\n\n\nCOLOR CODE\n : Here are some examples:\n\n\n\n\n\"rgb(144,233,233)\"\n\n\n\"rgba(255,255,255,0.3)\"\n\n\n\"#ff0000\"\n\n\n\n\n\n\n\n\nImage URL\n : If you wish to use an image as background, simply specify the image url\n\n\n\n\n\n\n\"camera\"\n : Use basic camera as background\n\n\n\n\n\n\n\"{\"type\": \"camera\"}\n : Use advanced camera as background\n\n\n\n\n\n\nJSON Web Container\n: Lets you embed an entire self-contained web view as a background. Refer to \nJSON web container\n to learn more.\n\n\n\n\n\n\n\n\nexample 1. red background\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"#ff0000\"\n      },\n      ...\n    }\n  }\n}\n\n\n\nexample 2. image background\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"http://i.giphy.com/Is0AJv4CEj9hm.gif\"\n      },\n      ...\n    }\n  }\n}\n\n\n\nexample 3. web container background\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"type\": \"html\",\n        \"text\": \"\nhtml\nhead\nstyle\n...\n/style\nscript\n....\n/script\n/head\nbody\n...\n/body\n/html\n\",\n        \"action\": {\n          \"type\": \"$default\"\n        }\n      }\n    }\n  }\n}\n\n\n\nexample 4. basic camera\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"camera\"\n      },\n      ...\n    }\n  }\n}\n\n\n\nexample 5. advanced camera\n\n\nBack facing camera\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": {\n          \"type\": \"camera\",\n          \"options\": {\n            \"device\": \"back\"\n          }\n        }\n      },\n      ...\n    }\n  }\n}\n\n\n\nWhat they look like\n\n\nHere's the preview:\n\n\n\n\n\n\n\n\n\n\ncolor\n\n\nimage\n\n\ncamera\n\n\nweb container\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctional Example\n\n\nA demo with all of the above options implemented\n\n\n\n\n\u25a0 border\n\n\n\n\nborder color for \nsection\n items.\n\n\nFormat: \n[COLOR CODE]\n | \n\"none\"\n\n\n\n\nexample 1. No border\n\n\n{\n  \"body\": {\n    ....\n    \"style\": {\n      \"border\": \"none\"\n    },\n    ....\n  }\n}\n\n\n\nexample 2. red border\n\n\n{\n  \"body\": {\n    ....\n    \"style\": {\n      \"border\": \"#ff0000\"\n    },\n    ....\n  }\n}", 
            "title": "\u2605 View"
        }, 
        {
            "location": "/document/#jason", 
            "text": "A Jason document always starts with  $jason  as its root node, and has two children:  head  and  body , each of which has multiple children of its own.", 
            "title": "\u2500\u2500 $jason \u2500\u2500"
        }, 
        {
            "location": "/document/#head", 
            "text": "The head contains a set of metadata that doesn't get displayed directly.  The title attribute is mandatory. Rest of the attributes are optional.  Head can contain the following attributes:   title  description  icon  offline  styles  actions  templates  data   In JSON they look like this:  {\n  \"$jason\": {\n     \"head\": {\n      \"title\": \"...\",\n      \"description\": \"...\",\n      \"icon\": \"...\",\n      \"offline\": \"true\",\n      \"styles\": {\n        ...\n      },\n      \"actions\": {\n        ...\n      },\n      \"templates\": {\n        ...\n      },\n      \"data\": {\n        ...\n      }\n    }, \n    \"body\": {\n      ...\n    }\n  }\n}", 
            "title": "\u2500\u2500 head \u2500\u2500"
        }, 
        {
            "location": "/document/#headtitle", 
            "text": "Title string for your app.  {\n  \"$jason\": {\n    \"head\": {\n       \"title\": \"Hello World\", \n      ...\n    },\n    ...\n  }\n}", 
            "title": "head.title"
        }, 
        {
            "location": "/document/#headdescription", 
            "text": "Description string for your app. Let users find out what the app does, how it works, etc. just by looking at the JSON code.  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Hello World\",\n       \"description\": \"This app displays 'Hello World' on the screen\", \n      ...\n    },\n    ...\n  }\n}", 
            "title": "head.description"
        }, 
        {
            "location": "/document/#headicon", 
            "text": "An icon URL that represents your app.  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Hellow World\",\n      \"description\": \"This app displays 'Hello World' on the screen\",\n       \"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\", \n      ...\n    },\n    ...\n  }\n}", 
            "title": "head.icon"
        }, 
        {
            "location": "/document/#headoffline", 
            "text": "Optional value to cache JSON file for offline use.\nDefaults to  true .\nIt doesn't matter what you set the value to; due to a quirk of Jasonette, just including it with any value makes it be counted as true.  Here's an example of how to use it: {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Hellow World\",\n      \"description\": \"This app displays 'Hello World' on the screen\",\n      \"icon\": \"https://s3.amazonaws.com/jasonclient/hello.png\",\n       \"offline\": \"true/yes/on\", \n      ...\n    },\n    ...\n  }\n}", 
            "title": "head.offline"
        }, 
        {
            "location": "/document/#headstyles", 
            "text": "Declare commonly used style classes here so you can reuse them later.  Let's take a look at an example to demonstrate how using  head.styles  can be helpful compared to styling UI elements  inline .  For example here's an example of  inline styling :  {\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n           \"style\": {\n            \"font\": \"HelveticaNeue\",\n            \"size\": \"20\",\n            \"color\": \"#ff0000\",\n            \"padding\": \"10\"\n          } \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n           \"style\": {\n            \"font\": \"HelveticaNeue\",\n            \"size\": \"20\",\n            \"color\": \"#ff0000\",\n            \"padding\": \"10\"\n          } \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n           \"style\": {\n            \"font\": \"HelveticaNeue\",\n            \"size\": \"20\",\n            \"color\": \"#ff0000\",\n            \"padding\": \"10\"\n          } \n        }]\n      }]\n    }\n  }\n}  You can see that there's a  style  JSON for each label item. This is called  inline styling  since the style attribute is attached to the UI component directly.  Now if you look closer, you'll see that each item has exactly the same repeating style.  We can get rid of this redundancy by using  head.styles :  {\n  \"$jason\": {\n    \"head\": {\n      ...\n       \"styles\": {\n        \"styled_row\": {\n          \"font\": \"HelveticaNeue\",\n          \"size\": \"20\",\n          \"color\": \"#ff0000\",\n          \"padding\": \"10\"\n        }\n      } \n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n           \"class\": \"styled_row\" \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n           \"class\": \"styled_row\" \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n           \"class\": \"styled_row\" \n        }]\n      }]\n    }\n  }\n}  First look at each label item. Now the style attributes are gone, but instead we have a  class  value of  styled_row  for each.  Now let's look under  $jason.head.styles . You'll see we now have the  styled_row  defined here. The styles registered here will be applied to each UI component whenever its class name is referenced.", 
            "title": "head.styles"
        }, 
        {
            "location": "/document/#note", 
            "text": "Multiple styles can be used in a single  class . Example:  \"class\": \"styled_row color_white background_green\" . \nThis can be used for creating complex styles with ease!.", 
            "title": "note"
        }, 
        {
            "location": "/document/#headactions", 
            "text": "Using action registry to define actions  You can define actions under the action registry ( head.actions ) and reuse them through the  trigger  keyword.", 
            "title": "head.actions"
        }, 
        {
            "location": "/document/#headtemplates", 
            "text": "Declaring templates  You can dynamically render any data using templates. Templates are registered under  head.templates", 
            "title": "head.templates"
        }, 
        {
            "location": "/document/#headdata", 
            "text": "Using inline data for rendering  head.data  is like an inline database that gets rendered automatically by  body  template if included.", 
            "title": "head.data"
        }, 
        {
            "location": "/document/#body", 
            "text": "Body contains everything that gets displayed on the screen. A body is made up of the following view elements.  {\n    \"$jason\": {\n        \"head\": {\n            ...\n        },\n         \"body\": {\n            \"header\": {\n                ...\n            },\n            \"sections\": [\n                { ... },\n                { ... },\n                ...\n            ],\n            \"layers\": [\n                { ... },\n                { ... },\n                ...\n            ],\n            \"footer\": {\n                ...\n            }\n        } \n    }\n}   header  represents the top area  sections  represent a scrollable list of items  layers  represent non-scrolling items  footer  represents the bottom area", 
            "title": "\u2500\u2500 body \u2500\u2500"
        }, 
        {
            "location": "/document/#examples", 
            "text": "Here's what each part looks like in a real app:    Sections contains a list that can be scrolled.     Layers are images or labels that stay put on top of everything.  You can also drag/resize/rotate layers depending on how you define them.", 
            "title": "examples"
        }, 
        {
            "location": "/document/#bodyads", 
            "text": "body.ads  describes the banner ads and the interstitial ads on the page", 
            "title": "body.ads"
        }, 
        {
            "location": "/document/#ads", 
            "text": "Use to show banner and interstitial ads.\nCurrently iOS only, open Android Issue here:  Ad support for Android #22", 
            "title": "\u25a0  ads"
        }, 
        {
            "location": "/document/#screenshots", 
            "text": "", 
            "title": "screenshots"
        }, 
        {
            "location": "/document/#banner-ad", 
            "text": "", 
            "title": "Banner ad:"
        }, 
        {
            "location": "/document/#interstitial-ad", 
            "text": "", 
            "title": "Interstitial ad:"
        }, 
        {
            "location": "/document/#syntax", 
            "text": "", 
            "title": "syntax"
        }, 
        {
            "location": "/document/#type-admob", 
            "text": "", 
            "title": "\u2022 type: \"admob\""
        }, 
        {
            "location": "/document/#options-possible-options-for-the-ad", 
            "text": "type :  banner  or  interstitial , for type of ad.  unitID : AdMob Unit ID. Just a string of letters and numbers, e.g.:  ca-app-pub-6606303247985815/7014816684", 
            "title": "\u2022 options: Possible options for the ad"
        }, 
        {
            "location": "/document/#example", 
            "text": "...\n\"ads\": [\n  {\n    \"type\": \"admob\",\n    \"options\": {\n      \"type\": \"banner\",\n      \"unitId\": \"a14dccd0fb24d45\"\n    }\n  },\n  {\n    \"type\": \"admob\",\n    \"options\": {\n      \"type\": \"interstitial\",\n      \"unitId\": \"ca-app-pub-6606303247985815/7014816684\"\n    }\n  }\n],\n...", 
            "title": "Example"
        }, 
        {
            "location": "/document/#how-to-enable-ads", 
            "text": "Ads aren't enabled by default, so you have to enable them. To enable them, do the following steps:   Download the latest version of Jasonette from the  master  branch and unzip:  master branch download  Download CocoaPods from here: https://cocoapods.org/app  Run CocoaPods. From the app menu, open  File   Open Podfile . Then find the project folder you just unzipped. From the project folder, go into  app  folder and you should see a file called  Podfile . Select that file and open it from CocoaPods app. You should see this screen:     Uncomment  pod 'GoogleMobileAds', '~  7.8'  (By removing the  #  character) and press the  install  button in the top right corner. The install will start, after that you'll see the following screen:    Notice the green Installing GoogleMobileAds line from above screenshot. That means the library has been successfully installed into the project and you can use it.   Now go to the root folder of your project and run Setup, and go through the setup process just like any other Jasonette project.  You now need to turn on the Ad feature on Xcode. To do this, open  Jasonette   Config   Constants.h  file from in your Xcode workspace (which should have opened after the setup process), Uncomment  #define ADS 1  by removing the  // . The result should look something like this:    And that's it! You should now be able to use ads in your project.", 
            "title": "How to enable ads"
        }, 
        {
            "location": "/document/#bodyheader", 
            "text": "body.header  describes the top header bar and its components.", 
            "title": "body.header"
        }, 
        {
            "location": "/document/#title", 
            "text": "There are two ways to set the title of the header bar:   Basic: Simple text  Advanced: Can be a text or an image", 
            "title": "\u25a0 title"
        }, 
        {
            "location": "/document/#basic-title", 
            "text": "Simply set the string to change the title on the header bar.  {\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"title\": \"[Title goes here]\"\n      },\n      ...\n    }\n  }\n}  The result:", 
            "title": "Basic title"
        }, 
        {
            "location": "/document/#advanced-title", 
            "text": "You can describe the title in more detail using a  title  object instead of just a simple string. Here's the syntax:   type :  \"label\"  or  \"image\"  text : In case it's a  label  type, set the text. Same as using the basic title described above.  url : In case it's an image, set the image url.  style : In case it's an image we can set the  width  and the  height  align :  \"left\"  or  \"center\"  (If not specified, it's  center  by default)  width : set the width of the image  height : set the height of the image  top : Top offset.  left : Left offset.  ONLY APPLICABLE WHEN  \"align\": \"left\"  font : Font name in case  \"type\": \"label\"  size : Font size in case  \"type\": \"label\"     Here's an example  {\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"title\": {\n          \"type\": \"image\",\n          \"style\": {\n            \"width\": \"94\",\n            \"height\": \"27\"\n          },\n          \"url\": \"https://raw.githubusercontent.com/Jasonette/Instagram-UI-example/master/images/logo.png\"\n        }\n      },\n      ...\n    }\n  }\n}  The result (See the header title image):", 
            "title": "Advanced title"
        }, 
        {
            "location": "/document/#search", 
            "text": "Search component. Calls an  action  you define when user submits a query.", 
            "title": "\u25a0  search"
        }, 
        {
            "location": "/document/#attributes", 
            "text": "name  placeholder  action  style  background : background color  color : tint color (for placeholder, text   icon)", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#example_1", 
            "text": "The search component can trigger an action if you define one.  Also the value inside the search input is automatically stored to the  local variable  which you name by setting the  name  attribute.  If you are not aware of how local variables work, read the  local variable  section first.     Take a look at the following example:  {\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"search\": {\n          \"name\": \"query_text\",\n          \"placeholder\": \"Search something\",\n          \"style\": {\n            \"background\": \"#000000\"\n          },\n          \"action\": {\n            \"type\": \"$util.alert\",\n            \"options\": {\n              \"title\": \"You've entered:\",\n              \"description\": \"{{$get.query_text}}\"\n            }\n          }\n        }\n      }\n    }\n  }\n}  Here's what's going on:   We bind the  search  input with a local variable  query_text  (By setting the  name  attribute under  body.header.search  as  query_text )  The search input then calls the  $util.alert  action when user submits input, utilizing the local variable through  {{$get.query_text}}", 
            "title": "example"
        }, 
        {
            "location": "/document/#menu", 
            "text": "menu  represents the menu button at the top right corner on the header.  menu  can call  actions  or  link to another view .  menu  can also have a  badge .", 
            "title": "\u25a0 menu"
        }, 
        {
            "location": "/document/#attributes_1", 
            "text": "", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#text-menu-button-text", 
            "text": "", 
            "title": "\u25a0  text: menu button text"
        }, 
        {
            "location": "/document/#image-menu-button-icon-url", 
            "text": "", 
            "title": "\u25a0  image: menu button icon url"
        }, 
        {
            "location": "/document/#style", 
            "text": "color : font color or image mask color  font : font name  size : font size", 
            "title": "\u25a0  style"
        }, 
        {
            "location": "/document/#href-view-to-transition-to-when-touched", 
            "text": "", 
            "title": "\u25a0  href: view to transition to when touched"
        }, 
        {
            "location": "/document/#action-action-to-trigger-when-touched", 
            "text": "", 
            "title": "\u25a0  action: action to trigger when touched"
        }, 
        {
            "location": "/document/#badge", 
            "text": "text : The text to display inside the badge  style :  background : background color for the badge  color : text color for the badge  top : x-offset of the badge  left : y-offset of the badge", 
            "title": "\u25a0  badge"
        }, 
        {
            "location": "/document/#example_2", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"menu\": {\n          \"text\": \"Tap me\",\n          \"style\": {\n            \"color\": \"#0000ff\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"size\": \"17\"\n          },\n          \"action\": {\n            \"type\": \"$util.toast\",\n            \"options\": {\n              \"text\": \"Good job!\"\n            }\n          },\n          \"badge\": {\n            \"text\": \"3\",\n            \"style\": {\n              \"background\": \"#ff0000\",\n              \"color\": \"#ffffff\"\n            }\n          }\n        }\n      }\n    }\n  }\n}  View the full code here", 
            "title": "example"
        }, 
        {
            "location": "/document/#note_1", 
            "text": "Choose either  text  or  image  for the menu button, but not both.  Choose either  href  or  action  for handling tap events, but not both.", 
            "title": "note"
        }, 
        {
            "location": "/document/#style_1", 
            "text": "Style the entire header bar.", 
            "title": "\u25a0 style"
        }, 
        {
            "location": "/document/#attributes_2", 
            "text": "font : the font for  body.header.title  size : the text size for  body.header.title  background : the background color for the entire header bar:  body.header  color : the font color for  body.header.title", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#bodysections", 
            "text": "The main region, used to display scrollable content.  Here are the attributes each section can have:   type : optional. set to  horizontal  to make it scroll horizontally. Otherwise it's just a regular, vertically scrolling section.  header : a single item. optional. (doesn't respond to user interaction. display purpose)  items : array of items (responds to user interaction)  Each item can be either a  layout  or a  component     In most cases one section is enough, if you're displaying just a single collection of similar items.  Use multiple sections if you need to display different types of collections, for example one vertical section and one horizontal section.", 
            "title": "body.sections"
        }, 
        {
            "location": "/document/#type", 
            "text": "A view can contain multiple sections.  And each section can be either:", 
            "title": "\u25a0  type"
        }, 
        {
            "location": "/document/#1-vertically-scrolling-default", 
            "text": "Just a normal list view that scrolls", 
            "title": "1. vertically scrolling (default)"
        }, 
        {
            "location": "/document/#2-horizontally-scrolling", 
            "text": "scrolls from left to right ( \"type\": \"horizontal\" )", 
            "title": "2. horizontally scrolling"
        }, 
        {
            "location": "/document/#whats-going-on-above", 
            "text": "The  vertically scrolling section image  above shows a view with  1 vertically scrolling section    And the  horizontally scrolling section image  shows a view with  multiple horizontally scrolling sections    You can mix and match vertical and horizontal sections too. For example, a view can have a vertical section as the first section, and a horizontal section as the next, so forth.    \nLet's go into more details:", 
            "title": "What's going on above:"
        }, 
        {
            "location": "/document/#1-vertically-scrolling-section", 
            "text": "This is just a regular list view that lets you scroll from top to bottom.  This is the default  {\n  ...\n  \"sections\": [{\n    \"items\": [{\n      \"type\": \"label\",\n      \"text\": \"Item 1\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 2\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 3\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 4\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 5\"\n    }]\n  }],\n  ...\n}", 
            "title": "1. Vertically scrolling section"
        }, 
        {
            "location": "/document/#2-horizontally-scrolling-section", 
            "text": "This type of section lets you scroll from left to right.  To create a horizontal section, set the section's  type  as  horizontal .  {\n  ...\n  \"sections\": [{\n    \"type\": \"horizontal\",\n    \"items\": [{\n      \"type\": \"label\",\n      \"text\": \"Item 1\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 2\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 3\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 4\"\n    }, {\n      \"type\": \"label\",\n      \"text\": \"Item 5\"\n    }]\n  }],\n  ...\n}", 
            "title": "2. Horizontally scrolling section"
        }, 
        {
            "location": "/document/#section-item-types", 
            "text": "Above we've talked about the types of sections (vertical vs. horizontal).  Now let's talk about what a section can contain .  Each section can contain:   0 or 1  header  1 or more  items       Type  Structure      Horizontal     Vertical", 
            "title": "Section item types"
        }, 
        {
            "location": "/document/#items", 
            "text": "An  items  array contains a list of items that users can interact with.  Each Item can be a:   Component : A single basic UI unit (such as a label or an image)  Layout : A composition of multiple components.", 
            "title": "\u25a0 items"
        }, 
        {
            "location": "/document/#attributes_3", 
            "text": "Each item can contain the following attributes   type :  vertical  or  horizontal  in case of layout. A component name in case it's a component item. (for example,  label ,  image ,  button , etc.)  components : child components array (only if the type is either  vertical  or  horizontal . Not applicable when the type is a component)  style : layout style + item specific style  color : Set the color of the item's disclosure indicator in case  href  is used.  height : Set the height of the item.  z_index : An integer value (example:  {\"z_index\": \"-1\"} ). Set the z-index of the item. (Similar to  CSS z-index )    action : An  action  to trigger when a user taps the item. See  actions reference  for details.  href : An  href  to trigger when a user taps the item. See  href reference  for details.", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#example_3", 
            "text": "Here's an example:  {\n  ...\n  \"sections\": [{\n    \"items\": [\n      {\n        \"type\": \"label\",\n        \"text\": \"Label only item\"\n      },\n      {\n        \"type\": \"vertical\",\n        \"components\": [\n          {\n            \"type\": \"image\",\n            \"url\": \"https://jasonclient.org/img/john.png\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"John\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Doe\"\n          }\n        ]\n      },\n      {\n        \"type\": \"vertical\",\n        \"components\": [\n          {\n            \"type\": \"image\",\n            \"url\": \"https://jasonclient.org/img/mary.png\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Mary\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Jane\"\n          }\n        ]\n      }\n    ]\n  }]\n  ...\n}", 
            "title": "example"
        }, 
        {
            "location": "/document/#whats-going-on-above_1", 
            "text": "This section contains 3 items.  The first one is a  label  component item (Displays the text \"Label only item\")  The second and third are  vertical  layouts, each of which contains one image and two labels.", 
            "title": "What's going on above:"
        }, 
        {
            "location": "/document/#header", 
            "text": "A header is similar to  items . Visually it looks the same. However there are some differences:   A header is for  display purpose  only.  Therefore a header cannot have an  href ,  action , or  menu  attributes.    A header functions as a divider between sections.  It sticks to the top as you scroll through the items in its section, until you scroll out of the section.    You can only have up to 1 header per section.  It's optional.", 
            "title": "\u25a0 header"
        }, 
        {
            "location": "/document/#attributes_4", 
            "text": "Here's a list of attributes a header supports (Same as  items , with an exception of interactive features):", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#type-vertical-or-horizontal-in-case-of-layout-a-component-name-in-case-its-a-component-item-for-example-label-image-button-etc", 
            "text": "", 
            "title": "\u25a0  type: vertical or horizontal in case of layout. A component name in case it's a component item. (for example, label, image, button, etc.)"
        }, 
        {
            "location": "/document/#components-child-components-in-case-its-a-layout-item", 
            "text": "", 
            "title": "\u25a0  components: child components, in case it's a layout item."
        }, 
        {
            "location": "/document/#style-layout-style-item-specific-style", 
            "text": "color : Set the color of the item's disclosure indicator in case  href  is used.  height : Set the height of the item.  z_index : An integer value (example:  {\"z_index\": \"-1\"} ). Set the z-index of the item. (Similar to  CSS z-index )  By default,  header  has a higher  z_index  than  items . That's why the items scroll below the header as they scroll. You can however change that by setting the header's z_index.", 
            "title": "\u25a0  style: layout style + item specific style"
        }, 
        {
            "location": "/document/#bodylayers", 
            "text": "Layers are floating elements that can be configured to be  resized ,  dragged ,  rotated , and  react to actions .     Currently layers support two types of components:   label  image", 
            "title": "body.layers"
        }, 
        {
            "location": "/document/#typelabel", 
            "text": "Floating labels.", 
            "title": "\u25a0  type:label"
        }, 
        {
            "location": "/document/#attributes_5", 
            "text": "type :  \"label\"  text : the text to display  action :  action  to run on user tap event  style  width  height  padding  top : position from the top of the screen  left : position from the left of the screen  right : position from the right of the screen  bottom : position from the bottom of the screen  corner_radius  font  size  background  color  align : text align ( \"left\"  |  \"center\"  |  \"right\" ) Default is  \"left\"  resize : resizable when set to  \"true\"  (default is false)  move : can be dragged around when set to  \"true\"  (default is false)  rotate : can be rotated when set to  \"true\"  (default is false)", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#example_4", 
            "text": "{\n  \"layers\": [\n    {\n      \"type\": \"label\",\n      \"text\": \"Floating label\",\n      \"style\": {\n        \"top\": \"100\",\n        \"left\": \"50%-25\",\n        \"width\": \"50\",\n        \"padding\": \"10\"\n      }\n    }\n  ]\n}", 
            "title": "example"
        }, 
        {
            "location": "/document/#typeimage", 
            "text": "Floating images", 
            "title": "\u25a0  type:image"
        }, 
        {
            "location": "/document/#attributes_6", 
            "text": "type :  \"image\"  url : Image url to load  action :  action  to run on user tap event  style  width  height  top  left  right  bottom  corner_radius  color : set the tint color (only for icons)  resize : resizable when set to  \"true\"  (default is false)  move : can be dragged around when set to  \"true\"  (default is false)  rotate : can be rotated when set to  \"true\"  (default is false)", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#example_5", 
            "text": "{\n  \"layers\": [\n    {\n      \"type\": \"image\",\n      \"url\": \"https://www.jasonclient.org/img/sticker.png\",\n      \"style\": {\n        \"width\": \"100\",\n        \"corner_radius\": \"50\",\n        \"bottom\": \"100\",\n        \"right\": \"100\"\n      }\n    }\n  ]\n}", 
            "title": "example"
        }, 
        {
            "location": "/document/#bodyfooter", 
            "text": "The footer area of a view   input: Chat input element  tabs: Tab element", 
            "title": "body.footer"
        }, 
        {
            "location": "/document/#input", 
            "text": "Chat input at the bottom", 
            "title": "\u25a0  input"
        }, 
        {
            "location": "/document/#attributes_7", 
            "text": "", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#textfield", 
            "text": "name : the local variable name connected to this input field.  placeholder : the placeholder text for this input field  style  color : font color  color:placeholder : placeholder color  background : background color for the input field", 
            "title": "\u25a0 textfield"
        }, 
        {
            "location": "/document/#left-left-button-only-allows-image", 
            "text": "image : image URL to display as the left button  action : action to call when touched  style  color : tint color for the image", 
            "title": "\u25a0 left: left button (Only allows image)"
        }, 
        {
            "location": "/document/#right-right-button-only-allows-label", 
            "text": "text : text to display as the right button  action : action to call when touched  style  color : font color  color:disabled : disabled state font color", 
            "title": "\u25a0 right: right button (Only allows label)"
        }, 
        {
            "location": "/document/#style_2", 
            "text": "background : background color for the root toolbar that contains all of the above", 
            "title": "\u25a0 style"
        }, 
        {
            "location": "/document/#example_6", 
            "text": "{\n  \"footer\": {\n    \"input\": {\n      \"style\": {\n        \"background\": \"#cecece\"\n      },\n      \"left\": {\n        \"image\": \"https://www.jasonclient.org/img/camera.png\",\n        \"style\": {\n          \"color\": \"#ff0000\"\n        },\n        \"action\": {\n          \"type\": \"$media.camera\"\n        }\n      },\n      \"textfield\": {\n        \"name\": \"message\",\n        \"placeholder\": \"Say something...\",\n        \"style\": {\n          \"background\": \"#ffffff\",\n          \"color\": \"#ff0000\",\n          \"color:placeholder\": \"#ebebeb\"\n        }\n      },\n      \"right\": {\n        \"text\": \"Send\",\n        \"style\": {\n          \"color\": \"#ff0000\",\n          \"color:disabled\": \"#ebebeb\"\n        },\n        \"action\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonchat.org/post.json\",\n            \"method\": \"post\",\n            \"data\": {\n              \"message\": \"{{$get.message}}\"\n            }\n          },\n          \"success\": {\n            \"type\": \"$reload\"\n          }\n        }\n      }\n    }\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/document/#tabs", 
            "text": "Bottom tab bar", 
            "title": "\u25a0  tabs"
        }, 
        {
            "location": "/document/#attributes_8", 
            "text": "", 
            "title": "attributes"
        }, 
        {
            "location": "/document/#items-an-array-of-tab-bar-items-each-item-can-have-the-following-attributes", 
            "text": "text : tab item text  image : tab item icon  style : tab icon style  width : icon width  height : icon height    badge : badge text  url : the view url to load when tapped.  href : the view  href  to load when tapped.  action : an  action  to run when tapped.", 
            "title": "\u2022 items: an array of tab bar items. Each item can have the following attributes:"
        }, 
        {
            "location": "/document/#style-overall-style-for-the-tab-bar", 
            "text": "color : selected item color  color:disabled : deselected item color  background : background color of the entire tab bar", 
            "title": "\u2022 style: overall style for the tab bar"
        }, 
        {
            "location": "/document/#example_7", 
            "text": "{\n  \"footer\": {\n    \"tabs\": {\n      \"style\": {\n        \"background\": \"rgba(255,255,255,0.8)\",\n        \"color:disabled\": \"#cecece\",\n        \"color\": \"#009efa\"\n      },\n      \"items\": [{\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/home.png\",\n        \"text\": \"Home\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/home.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/notifications.png\",\n        \"text\": \"Notifications\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/notifications.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/moments.png\",\n        \"text\": \"Moments\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/moments.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/messages.png\",\n        \"text\": \"Messages\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/messages.json\"\n      }, {\n        \"image\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/images/me.png\",\n        \"text\": \"Me\",\n        \"style\": {\n          \"height\": \"21\"\n        },\n        \"url\": \"https://raw.githubusercontent.com/Jasonette/Twitter-UI-example/master/me.json\"\n      }]\n    }\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/document/#troubleshooting-tabs", 
            "text": "\u26a0\ufe0f   Troubleshoot 1:   ONLY Use tabs at the root level (The first view that shows up on launch). Any other usage may introduce unexpected behavior.     \u26a0\ufe0f  Troubleshoot 2:  The first tab MUST have a URL.  Otherwise the view won't load.     \u26a0\ufe0f  Troubleshoot 3:  The first tab's url MUST EXACTLY MATCH the URL of the view it loads from.  Otherwise the view won't load.  For example in the below example, the visible view's URL should match the URL of the \"Top Secret\" tab. It wouldn't make sense for these two URLs to NOT match anyway.     \u26a0\ufe0f  Troubleshoot 4:  tabs  can have up to 5 items (5 tabs max).     \u26a0\ufe0f  Troubleshoot 5:  tabs  must have at least 2 items (2 tabs min).", 
            "title": "Troubleshooting Tabs"
        }, 
        {
            "location": "/document/#bodystyle", 
            "text": "Styling the body   background: setting the background of the view  border: setting the border color for section items", 
            "title": "body.style"
        }, 
        {
            "location": "/document/#background", 
            "text": "Set the background for the entire view", 
            "title": "\u25a0 background"
        }, 
        {
            "location": "/document/#available-values", 
            "text": "COLOR CODE  : Here are some examples:   \"rgb(144,233,233)\"  \"rgba(255,255,255,0.3)\"  \"#ff0000\"     Image URL  : If you wish to use an image as background, simply specify the image url    \"camera\"  : Use basic camera as background    \"{\"type\": \"camera\"}  : Use advanced camera as background    JSON Web Container : Lets you embed an entire self-contained web view as a background. Refer to  JSON web container  to learn more.", 
            "title": "available values"
        }, 
        {
            "location": "/document/#example-1-red-background", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"#ff0000\"\n      },\n      ...\n    }\n  }\n}", 
            "title": "example 1. red background"
        }, 
        {
            "location": "/document/#example-2-image-background", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"http://i.giphy.com/Is0AJv4CEj9hm.gif\"\n      },\n      ...\n    }\n  }\n}", 
            "title": "example 2. image background"
        }, 
        {
            "location": "/document/#example-3-web-container-background", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"type\": \"html\",\n        \"text\": \" html head style ... /style script .... /script /head body ... /body /html \",\n        \"action\": {\n          \"type\": \"$default\"\n        }\n      }\n    }\n  }\n}", 
            "title": "example 3. web container background"
        }, 
        {
            "location": "/document/#example-4-basic-camera", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"camera\"\n      },\n      ...\n    }\n  }\n}", 
            "title": "example 4. basic camera"
        }, 
        {
            "location": "/document/#example-5-advanced-camera", 
            "text": "Back facing camera  {\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": {\n          \"type\": \"camera\",\n          \"options\": {\n            \"device\": \"back\"\n          }\n        }\n      },\n      ...\n    }\n  }\n}", 
            "title": "example 5. advanced camera"
        }, 
        {
            "location": "/document/#what-they-look-like", 
            "text": "Here's the preview:      color  image  camera  web container", 
            "title": "What they look like"
        }, 
        {
            "location": "/document/#functional-example", 
            "text": "A demo with all of the above options implemented", 
            "title": "Functional Example"
        }, 
        {
            "location": "/document/#border", 
            "text": "border color for  section  items.  Format:  [COLOR CODE]  |  \"none\"", 
            "title": "\u25a0 border"
        }, 
        {
            "location": "/document/#example-1-no-border", 
            "text": "{\n  \"body\": {\n    ....\n    \"style\": {\n      \"border\": \"none\"\n    },\n    ....\n  }\n}", 
            "title": "example 1. No border"
        }, 
        {
            "location": "/document/#example-2-red-border", 
            "text": "{\n  \"body\": {\n    ....\n    \"style\": {\n      \"border\": \"#ff0000\"\n    },\n    ....\n  }\n}", 
            "title": "example 2. red border"
        }, 
        {
            "location": "/href/", 
            "text": "HREF\n\n\nTo describe links between views, we use \nhref\n. Here are some of its traits:\n\n\n\n\nhref\n can be attached to various UI elements to allow for interaction. This includes:\n\n\nheader.menu\n\n\nsection items\n\n\nlayers\n\n\nand anything that looks interactive: like the \nbuttons on a chat input\n.\n\n\n\n\n\n\nA section item with an \nhref\n attribute will display a disclosure indicator \n by default, to indicate that there's a next view (Only for \nvertically scrolling sections\n)\n\n\nTo change the indicator color, you need to set the \ncolor\n style attribute of the item.\n\n\nIf you want to use \nhref\n but without the disclosure indicator, use the \n$href action\n instead.\n\n\n\n\n\n\n\n\nHREF ATTRIBUTES\n\n\n\n\nurl\n\n\nview\n\n\noptions\n\n\ntransition\n\n\nloading\n\n\n\n\n\n\n\u25a0 url\n\n\nThe url to load in the next view\n\n\n\n\n\u25a0 view\n\n\nType of view to load\n\n\n1. \"view\": \"jason\"\n\n\nJasonette view. Will load JSON. This is the default.\n\n\nHere's an example:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Push me\",\n  \"href\": {\n    \"url\": \"https://www.jasonclient.org/next.json\",\n    \"view\": \"jason\"\n  }\n}\n\n\n\nSince \njason\n is the default, we don't really need to specify it. So we can just write:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Push me\",\n  \"href\": {\n    \"url\": \"https://www.jasonclient.org/next.json\"\n  }\n}\n\n\n\n2. \"view\": \"web\"\n\n\nWeb browser view. Will load HTML in an internal browser.\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Open a browser\",\n  \"href\": {\n    \"url\": \"https://www.twitter.com/gliechtenstein\",\n    \"view\": \"web\"\n  }\n}\n\n\n\nAbove example will result in the following transition:\n\n\n\n\n3. \"view\": \"app\"\n\n\nOpen external apps using url scheme (ex: \nsms:\n, \nmailto:\n, \ntwitter://\n)\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Email me\",\n  \"href\": {\n    \"url\": \"mailto:ethan.gliechtenstein@gmail.com?subject=It20works!\",\n    \"view\": \"app\"\n  }\n}\n\n\n\nAbove example will result in the following transition:\n\n\n\n\n\n\n\u25a0 options\n\n\nParameters to pass to the next view. Here's how to set and use options:\n\n\nStep 1. Set options\n\n\nSet \noptions\n attribute for \nhref\n.\n\n\nYou can pass any JSON object (as long as it follows the \nconvention\n)\n\n\n{\n  ...\n  \"href\": {\n    \"url\": \"https://jasonclient.org/forums.json\",\n    \"options\": {\n      \"name\": \"howto\"\n    }\n  }\n  ...\n}\n\n\n\nStep 2. Retrieve options\n\n\nTo use the incoming \noptions\n, we need to render the view dynamically using \ntemplates\n.\n\n\nWhen the view transitions to the next, the next view can access the \noptions\n passed in from the previous view using the \n$params\n object using a template expression, like this:\n\n\n{\n  ...\n  {\n    \"type\": \"label\",\n    \"text\": \"{{$params.name}}\"\n  },\n  ...\n}\n\n\n\nSince \n$params\n is \n{\"name\": \"howto\"}\n at this point, above template will turn into:\n\n\n{\n  ...\n  {\n    \"type\": \"label\",\n    \"text\": \"howto\"\n  },\n  ...\n}\n\n\n\n\n\n\u25a0 transition\n\n\nThe way the next view gets presented\n\n\n\n\n\"push\"\n: The next view slides in from the right side. (default)\n\n\n\"modal\"\n: The next view opens up as a modal.\n\n\n\"replace\"\n: Replaces the current view with the content, instead of creating a separate view\n\n\n\n\n\n\n\n\n\n\n\npush transition\n\n\nmodal transition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u25a0 loading\n\n\nIf set to \n\"true\"\n, it displays a loading indicator when the new view loads.\n\n\n{\n  \"href\": {\n    \"url\": \"...\",\n    \"loading\": \"true\"\n  }\n}\n\n\n\nFor the very first view the app loads with, we can't do this since there is no view it's \nhref\n'ing from.\n\n\n\n\nOn Android, we ALWAYS display loading indicator because that's considered the normal UX for Android.\n\n\nOn iOS In this case we can make the first view display a loading indicator by setting the \nloading\n attribute inside \nsettings.plist\n.", 
            "title": "\u2605 Link"
        }, 
        {
            "location": "/href/#href", 
            "text": "To describe links between views, we use  href . Here are some of its traits:   href  can be attached to various UI elements to allow for interaction. This includes:  header.menu  section items  layers  and anything that looks interactive: like the  buttons on a chat input .    A section item with an  href  attribute will display a disclosure indicator   by default, to indicate that there's a next view (Only for  vertically scrolling sections )  To change the indicator color, you need to set the  color  style attribute of the item.  If you want to use  href  but without the disclosure indicator, use the  $href action  instead.", 
            "title": "HREF"
        }, 
        {
            "location": "/href/#href-attributes", 
            "text": "url  view  options  transition  loading", 
            "title": "HREF ATTRIBUTES"
        }, 
        {
            "location": "/href/#url", 
            "text": "The url to load in the next view", 
            "title": "\u25a0 url"
        }, 
        {
            "location": "/href/#view", 
            "text": "Type of view to load", 
            "title": "\u25a0 view"
        }, 
        {
            "location": "/href/#1-view-jason", 
            "text": "Jasonette view. Will load JSON. This is the default.  Here's an example:  {\n  \"type\": \"label\",\n  \"text\": \"Push me\",\n  \"href\": {\n    \"url\": \"https://www.jasonclient.org/next.json\",\n    \"view\": \"jason\"\n  }\n}  Since  jason  is the default, we don't really need to specify it. So we can just write:  {\n  \"type\": \"label\",\n  \"text\": \"Push me\",\n  \"href\": {\n    \"url\": \"https://www.jasonclient.org/next.json\"\n  }\n}", 
            "title": "1. \"view\": \"jason\""
        }, 
        {
            "location": "/href/#2-view-web", 
            "text": "Web browser view. Will load HTML in an internal browser.  {\n  \"type\": \"label\",\n  \"text\": \"Open a browser\",\n  \"href\": {\n    \"url\": \"https://www.twitter.com/gliechtenstein\",\n    \"view\": \"web\"\n  }\n}  Above example will result in the following transition:", 
            "title": "2. \"view\": \"web\""
        }, 
        {
            "location": "/href/#3-view-app", 
            "text": "Open external apps using url scheme (ex:  sms: ,  mailto: ,  twitter:// )  {\n  \"type\": \"label\",\n  \"text\": \"Email me\",\n  \"href\": {\n    \"url\": \"mailto:ethan.gliechtenstein@gmail.com?subject=It20works!\",\n    \"view\": \"app\"\n  }\n}  Above example will result in the following transition:", 
            "title": "3. \"view\": \"app\""
        }, 
        {
            "location": "/href/#options", 
            "text": "Parameters to pass to the next view. Here's how to set and use options:", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/href/#step-1-set-options", 
            "text": "Set  options  attribute for  href .  You can pass any JSON object (as long as it follows the  convention )  {\n  ...\n  \"href\": {\n    \"url\": \"https://jasonclient.org/forums.json\",\n    \"options\": {\n      \"name\": \"howto\"\n    }\n  }\n  ...\n}", 
            "title": "Step 1. Set options"
        }, 
        {
            "location": "/href/#step-2-retrieve-options", 
            "text": "To use the incoming  options , we need to render the view dynamically using  templates .  When the view transitions to the next, the next view can access the  options  passed in from the previous view using the  $params  object using a template expression, like this:  {\n  ...\n  {\n    \"type\": \"label\",\n    \"text\": \"{{$params.name}}\"\n  },\n  ...\n}  Since  $params  is  {\"name\": \"howto\"}  at this point, above template will turn into:  {\n  ...\n  {\n    \"type\": \"label\",\n    \"text\": \"howto\"\n  },\n  ...\n}", 
            "title": "Step 2. Retrieve options"
        }, 
        {
            "location": "/href/#transition", 
            "text": "The way the next view gets presented   \"push\" : The next view slides in from the right side. (default)  \"modal\" : The next view opens up as a modal.  \"replace\" : Replaces the current view with the content, instead of creating a separate view      push transition  modal transition", 
            "title": "\u25a0 transition"
        }, 
        {
            "location": "/href/#loading", 
            "text": "If set to  \"true\" , it displays a loading indicator when the new view loads.  {\n  \"href\": {\n    \"url\": \"...\",\n    \"loading\": \"true\"\n  }\n}  For the very first view the app loads with, we can't do this since there is no view it's  href 'ing from.   On Android, we ALWAYS display loading indicator because that's considered the normal UX for Android.  On iOS In this case we can make the first view display a loading indicator by setting the  loading  attribute inside  settings.plist .", 
            "title": "\u25a0 loading"
        }, 
        {
            "location": "/actions/", 
            "text": "Basics\n\n\nExpressing a view using JSON\n is pretty straightforward.\n\n\nHowever what makes Jasonette truly powerful is the ability to express \nfunctions\n that actually do something, entirely in JSON. We call it \naction\n.\n\n\nThis could be anything from accessing the device features such as camera or addressbook, to making network requests. And you can compose them to carry out any sophisticated tasks. Not to mention being able to use inline Javascript within any JSON expression.\n\n\n\n\nSyntax\n\n\nActions can take the following 5 attributes\n\n\n\n\ntype\n: Specify \naction type\n. (note: THIS CANNOT BE A \nTEMPLATE EXPRESSION\n that needs to be evaluated. Use a static string.)\n\n\noptions\n: Arguments to be passed into the action (optional)\n\n\nsuccess\n: Another action to be called when the current action finishes. You can chain multiple actions to execute in sequence this way. (optional)\n\n\nerror\n: You can handle exceptions by attaching \nerror\n to an action. (optional)\n\n\n\n\nThere are two ways of calling actions: \n\n\n\n\nYou can directly attach actions to UI elements \ninline\n. In this case, the action will be executed when a user taps the element.\n\n\nYou can define an action under \nactions registry\n and trigger it by name. In this case you not only can attach actions to UI elements but also can trigger them based on system events or call them from anywhere.\n\n\n\n\nFirst read through the explanation below to learn how to define actions inline.\n\n\nAnd after that, \nlearn how to use \n\"trigger\"\n to trigger an action by name\n.\n\n\n\n\nExamples - Define Inline\n\n\nNetwork request and then render\n\n\nMake a network request and \n$render\n its content when it succeeds.\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"refresh\",\n  \"action\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/jYJ.json\"\n    },\n    \"success\": {\n      \"type\": \"$render\"\n    }\n  }\n}\n\n\n\nNetwork request and then render, with error handling\n\n\nSame as above, except display a banner when the request fails.\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"refresh\",\n  \"action\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/jYJ.json\"\n    },\n    \"success\": {\n      \"type\": \"$render\"\n    },\n    \"error\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"Error\",\n        \"description\": \"Something went wrong.\"\n      }\n    }\n  }\n}\n\n\n\nReturn values\n\n\nYou can access an action's return value by using the variable \n$jason\n from the next action (either the \nsuccess\n or the \nerror\n action).\n\n\nFor example, \n$geo.get\n action returns the geolocation of the current device in the following format:\n\n\n{\n  \"coord\": \"51.5032510,-0.1278950\"\n}\n\n\n\nWhich means we can use this return value by accessing the \n$jason\n variable, using a \ntemplate\n like this:\n\n\n{\n  \"type\": \"$geo.get\",\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Your current coordinate\",\n      \"description\": \"{{$jason.coord}}\"\n    }\n  }\n}\n\n\n\n\n\nWhat kind of UI elements can have action handlers?\n\n\naction\n can be attached to various UI elements to respond to touch, but not all.\n\n\n\n\nCAN be attached to:\n\n\n\n\nmenu - \n$jason.body.header.menu\n\n\nfooter tabs - \n$jason.body.footer.tabs\n\n\nfooter input - \n$jason.body.footer.input.left\n and \n$jason.body.footer.input.right\n\n\nTop level of a section item - Example: \n$body.sections[0].items[0]\n\n\nLayer item - Example - \n$body.layers[0].items[0]\n\n\nButton component - Normally you need to attach actions at at the item level as described above. But if you want to attach an action at a component level, you can use \n\"type\": \"button\n. \n\n\n\n\n\n\nCANNOT be attached to:\n\n\nCANNOT attach actions to a label or image component unless it's at \nitem\n level. Here's an example that DOESN'T work::\n\n\n{\n  \nitems\n: [{\n    \ntype\n: \nvertical\n,\n    \ncomponents\n: [{\n      \ntype\n: \nlabel\n,\n      \ntext\n: \ntouch me\n,\n      \naction\n: { ... } \n    }]\n  }]\n}\n\n\n\n\nlabel\n and any other \nnon-button\n type components do not respond to touch events directly.\n\n\nThis is why above code won't respond to touch, since it's attaching the action to the label.\n\n\nHowever the following code WILL respond to touch:\n\n\n{\n  \nitems\n: [{\n    \ntype\n: \nlabel\n,\n    \ntext\n: \ntouch me\n,\n    \naction\n: { ... } \n  }]\n}\n\n\n\n\nThis is because the \nlabel\n is at \nitem\n level. Jasonette automatically wraps components with a layout when they're at \nitem\n level.\n\n\nWhich means, internally above code is the same as:\n\n\n{\n  \nitems\n: [{\n    \ntype\n: \nvertical\n,\n    \naction\n: { ... },\n    \ncomponents\n: [{\n      \ntype\n: \nlabel\n,\n      \ntext\n: \ntouch me\n,\n    }]\n  }]\n}\n\n\n\n\nNotice how the action is tied to the \nvetical\n layout, which is at \nitem\n level. So this will respond to touch.\n\n\n\n\nSo what if you really want to attach an action to a component, but the component is NOT at item level?\n\n\n=\n Use \nbuttons\n, like this:\n\n\n{\n  \nitems\n: [{\n    \ntype\n: \nvertical\n,\n    \ncomponents\n: [{\n      \ntype\n: \nbutton\n,\n      \nurl\n: \nhttps://.....\n,\n      \naction\n: { ... } \n    }]\n  }]\n}\n\n\n\n\nWhere to use actions?\n\n\nActions are not just for UI components. It can be triggered in various ways, and used for various situations:\n\n\n\n\nHandling user interaction\n\n\nHandling another action's result\n\n\nHandling system events\n\n\n\n\nLet's go through each:\n\n\nA. Handling user interaction\n\n\n\u25a0 User touches an item\n\n\nAttach \naction\n attribute to \nitems\n, \nmenu\n, \nlayers\n, etc. to react to touch. (Read API documentation to see if a component supports \naction\n attribute)\n\n\nIn the example below, an \naction\n is attached to a \nmenu\n, so it gets triggered when user touches it.\n\n\n{\n  \"head\": {\n    ...\n  },\n  \"body\": {\n    \"header\": {\n      \"menu\": {\n        \"text\": \"Press me\",\n        \n\"action\": {\n          \"type\": \"$util.alert\",\n          \"options\": {\n            \"title\": \"Good job!\",\n            \"description\": \"You know how to press a button!\"\n          }\n        }\n\n      }\n    },\n    ...\n  }\n}\n\n\n\n\u25a0 User changes a form input value\n\n\nThere are some form input components such as \nslider\n, \nsearch\n, etc. which trigger an action whenever its value changes. Just attach \naction\n attribute to handle that event.\nIn the example below, an \naction\n is attached to a \nslider\n, so we can display a banner with the current value whenever user changes the value.\n\n\n{\n  ...\n  {\n    \"type\": \"slider\",\n    \"name\": \"gauge\",\n    \n\"action\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"Current value\",\n        \"description\": \"{{$get.gauge}}\"\n      }\n    }\n\n  }\n  ...\n}\n\n\n\nB. Handling another action's result\n\n\nAll actions can have a \nsuccess\n and an \nerror\n attribute.\n\n\n\n\nsuccess\n points to an action to be triggered after the current action finishes.\n\n\nerror\n points to an action to be triggered if something goes wrong with the current action.\n\n\n\n\nBy using \nsuccess\n, we can chain multiple actions.\n\n\nIn the example below, a \n$network.request\n action gets called when a user touches the label, renders the result when it succeeds (\nsuccess\n), and displays an error message when something goes wrong (\nerror\n).\n\n\n{\n  ...\n  {\n    \"type\": \"label\",\n    \"text\": \"Touch me\",\n    \"action\": {\n      \n\"type\": \"$network.request\",\n      \"options\": {\n        \"url\": \"https://www.jasonclient.org/items.json\"\n      },\n\n      \n\"success\": {\n        \n\"type\": \"$render\"\n\n      },\n      \"error\": {\n        \n\"type\": \"$util.banner\",\n        \"options\": {\n          \"title\": \"Error\",\n          \"description\": \"Uh oh, something went wrong.\"\n        }\n\n      }\n\n    }\n  }\n  ...\n}\n\n\n\nC. Handling system events\n\n\nSystem events\n are events automatically triggered by the system, instead of through user input.\n\n\nYou can attach any \naction\n to system events, such as \n$load\n, \n$show\n, \n$foreground\n, etc.\n\n\nHere's a brief example:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        },\n        \"$show\": {\n          \"type\": \"$reload\"\n        },\n        \"$foreground\": {\n          \"type\": \"$reload\"\n        }\n      }\n    },\n    ...\n  }\n}\n\n\n\nLearn more about system events\n\n\n\n\nTriggering actions\n\n\nWhen you define an action inline, these actions have no name. Therefore you cannot reuse them form elsewhere.\n\n\nTo be able to reuse actions, you need to register them under actions registry, and then trigger them by name.\n\n\nSyntax\n\n\nTo trigger an action, you can use the following syntax:\n\n\n\n\n\"trigger\"\n: Trigger an action by name, registered under the actions registry. (note: THIS CANNOT BE A \nTEMPLATE EXPRESSION\n that needs to be evaluated. You must use a static string)\n\n\n\"options\"\n (optional): \nsame as inline actions\n\n\n\"success\"\n (optional): executed when the triggered action returnes via \n$return.success\n action\n\n\n\"error\"\n (optional): executed when the triggered action returns via \n$return.error\n action\n\n\n\n\nThey look similar to inline action definition except that you use \ntrigger\n instead of \ntype\n.\n\n\n\n1. Define an action under the actions registry\n\n\nFirst, you need to define the action inside \nhead.actions\n. In this case we name it \nrefresh_view\n:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"refresh_view\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n  ...\n}\n\n\n\n2. Trigger it by name\n\n\nSecond, to actually trigger it by name, just attach an action with a \ntrigger\n attribute, like this:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Refresh\",\n  \"action\": {\n    \"trigger\": \"refresh_view\"\n  }\n}\n\n\n\nCool thing about this is, now you can trigger this action from anywhere in your code. You can trigger it manually from another action, or you could make it so that a system event automatically triggers the action.\n\n\nHere's an example where \nrefresh_view\n is triggered whenever the view comes into focus (\n$show\n) or comes back from background (\n$foreground\n):\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$show\": {\n          \"trigger\": \"refresh_view\"\n        },\n        \"$foreground\": {\n          \"trigger\": \"refresh_view\"\n        },\n        \"refresh_view\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n  ...\n}\n\n\n\nHere's an example where an action triggers another action (\nrefresh\n sets the cache, and then triggers \nfetch\n):\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"refresh\": {\n          \"type\": \"$cache.set\",\n          \"options\": {\n            \"items\": []\n          },\n          \"success\": {\n            \"trigger\": \"fetch\"\n          }\n        },\n        \"fetch\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n      },\n  ...\n}\n\n\n\n\n\n3. Return from subroutine when finished\n\n\nWe saw from above that actions can trigger other actions.\n\n\nBut so far these action call chain examples have been one-way trip only, which means once an action triggers another action its life is over.\n\n\nYou can't do things like making a call and waiting for it to return with its result, and then continue on where it left off, using that value.\n\n\nLet's look at the \nrefresh\n example from above:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"refresh\": {\n          \"type\": \"$cache.set\",\n          \"options\": {\n            \"items\": []\n          },\n          \"success\": {\n            \"trigger\": \"fetch\"\n          }\n        },\n        \"fetch\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n        ...\n      }\n  ...\n}\n\n\n\nThe problem with this is each action does more than one thing:\n\n\n\n\nrefresh\n resets the cache AND triggers fetch\n\n\nfetch\n makes a network request AND renders the result.\n\n\n\n\nMaybe we want to add another action that resets the cache before doing something. Then, we need to add the same \n$cache.set\n action again.\n\n\nMaybe we want to make the network request but do something else with the result instead of rendering.\n\n\nIt becomes difficult to reuse these actions since one action does more than one thing.\n\n\nTo solve this problem, we can break these actions out into self-contained modules so that:\n\n\n\n\nOne action only does one thing.\n\n\nEach action ends by \nreturning its result instead of triggering another action\n using \n$return.success\n or \n$return.error\n actions.\n\n\n\n\nHere's the solution:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"reset\": {\n          \"type\": \"$cache.set\",\n          \"options\": {\n            \"items\": []\n          },\n          \"success\": {\n            \"type\": \"$return.success\"\n          }\n        },\n        \"refresh\": {\n          \"trigger\": \"reset\",\n          \"success\": {\n            \"trigger\": \"fetch\",\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          }\n        },\n        \"fetch\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$return.success\"\n          }\n        }\n        ...\n      }\n  ...\n}\n\n\n\nHere, the \nreset\n action only resets the cache.\n\n\nAnd \nfetch\n action only makes a network request and returns its result. (No $render)\n\n\nLastly the \nrefresh\n action functions as the main program that triggers each action one after another (triggers \nreset\n, then triggers \nfetch\n, and finally executes \n$render\n)\n\n\nWhen to use trigger vs. defining actions inline\n\n\nIn \nmost cases\n it's recommended that you define your actions under \nactions registry\n and trigger them using \n\"trigger\"\n.\n\n\nFor example, instead of:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"item 1\",\n          \"action\": {\n            \"type\": \"$util.banner\",\n            \"options\": {\n              \"title\": \"Banner\",\n              \"description\": \"Pressed item\"\n            }\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 2\",\n          \"action\": {\n            \"type\": \"$util.banner\",\n            \"options\": {\n              \"title\": \"Banner\",\n              \"description\": \"Pressed item\"\n            }\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 3\",\n          \"action\": {\n            \"type\": \"$util.banner\",\n            \"options\": {\n              \"title\": \"Banner\",\n              \"description\": \"Pressed item\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\nYou may want to define the action inside \nhead.actions\n, like this:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"show_banner\": {\n          \"type\": \"$util.banner\",\n          \"options\": {\n            \"title\": \"Banner\",\n            \"description\": \"Pressed item\"\n          }\n        }\n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"item 1\",\n          \"action\": {\n            \"trigger\": \"show_banner\"\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 2\",\n          \"action\": {\n            \"trigger\": \"show_banner\"\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 3\",\n          \"action\": {\n            \"trigger\": \"show_banner\"\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\nBenefit 1\n\n\nAs you can see above, using \ntrigger\n lets you define a single action once and reuse it from multiple places in your view. It removes redundant code.\n\n\n\n\nBenefit 2\n\n\nWhen you define an action inline, its behavior is fixed. For example, the \nshow_banner\n action example above only does one thing: It displays a banner that says \"Pressed item\".\n\n\nHowever in many cases we want to write one action and reuse them for various purposes. Maybe we want to display a banner that says \"Pressed item 1\", or \"Pressed item 2\".\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"show_banner\": {\n          \"type\": \"$util.banner\",\n          \"options\": {\n            \"title\": \"Banner\",\n            \"description\": \"Pressed item {{$jason.item}}\"\n          }\n        }\n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"item 1\",\n          \"action\": {\n            \"trigger\": \"show_banner\",\n            \"options\": {\n              \"item\": \"1\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\n\n\nDeclaring actions\n\n\nThere are two ways you can call actions:\n\n\n1. Inline action\n\n\nAttach \naction\n attributes directly to UI elements\n\n\n2. Action registry\n\n\nDefine actions inside \n$jason.head.actions\n and call them by name\n\n\n\n\nInline Action\n\n\nInline actions are basically what we've been talking about so far. You directly attach an \naction\n to events, UI components, and another action. Here's an example:\n\n\n{\n  ...\n  \"type\": \"label\",\n  \"action\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Hello\",\n      \"description\": \"World\"\n    }\n  }\n  ...\n}\n\n\n\n\n\nAction Registry\n\n\nWe can define an action once and refer to them whenever we need to, instead of writing one for every situation.\n\n\n\u25a0   Comparison with inline actions\n\n\nFor example, here's an \ninline action\n example. We display multiple \nitems\n, and each item has the same \naction\n attribute content.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n          \n\"action\": {\n            \"type\": \"$network.request\",\n            \"options\": {\n              \"url\": \"https://jasonclient.org/submit\",\n              \"method\": \"POST\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          }\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n          \n\"action\": {\n            \"type\": \"$network.request\",\n            \"options\": {\n              \"url\": \"https://jasonclient.org/submit\",\n              \"method\": \"POST\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          }\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n          \n\"action\": {\n            \"type\": \"$network.request\",\n            \"options\": {\n              \"url\": \"https://jasonclient.org/submit\",\n              \"method\": \"POST\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          }\n\n        }]\n      }]\n    }\n  }\n}\n\n\n\nBelow we have the same example, but using \n$jason.head.actions\n instead of re-defining the same action every time inline:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n        \n\"submit_item\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonclient.org/submit\",\n            \"method\": \"POST\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n\n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n          \n\"action\": {\n            \"trigger\": \"submit_item\"\n          }\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n          \n\"action\": {\n            \"trigger\": \"submit_item\"\n          }\n\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n          \n\"action\": {\n            \"trigger\": \"submit_item\"\n          }\n\n        }]\n      }]\n    }\n  }\n}\n\n\n\nHere's what's going on:\n\n\n\n\nDeclare an action under \n$jason.head.actions\n (in this case we've named it \nsubmit_item\n).\n\n\nThen we \ntrigger\n the action from anywhere using the name.\n\n\n\n\n\n\n\u25a0   System events\n\n\nSome actions are automatically triggered by the system when a certain event occurs. When you wish to take advantage of these, simply add them to \nactions\n. They are:\n\n\n\n\n1. $load\n\n\n$load\n gets called once automatically when the view loads for the first time.\n\n\nHere's an example where we make a network request when the view loads, and then render the response using the template.\n\n\n{\n  ...\n  \"$load\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n    \"url\": \"http://jasonclient.org/req.json\"\n    },\n    \"success\": {\n    \"type\": \"$render\"\n    }\n  }\n  ...\n}\n\n\n\n\n\n2. $show\n\n\n$show\n gets called automatically whenever the view appears. For example when coming back from a modal view, coming back from its next view via back button, etc.\n\n\nHere's an example\n\n\n{\n  ...\n  \"$show\": {\n    \"type\": \"$reload\"\n  },\n  ...\n}\n\n\n\n\n\n3. $foreground\n\n\n$foreground\n is called automatically whenever the app comes back from the background state.\n\n\n{\n  ...\n  \"$foreground\": {\n    \"type\": \"$reload\"\n  },\n  ...\n}\n\n\n\n\n\n4. $pull\n\n\n$pull\n gets called whenever user makes a pull to refresh action\n\n\n{\n  ...\n  \"$pull\": {\n    \"type\": \"$reload\"\n  },\n  ...\n}\n\n\n\n\n\nAPI\n\n\n\u2500\u2500 REQUIRE \u2500\u2500\n\n\n$require\n\n\nThe \n$require\n action imports remote JSON files in parallel.\n\n\n{\n  \"type\": \"$require\",\n  \"options\": {\n    \"profiles\": [\"https://...\", \"https://...\", \"https://\"],\n    \"items\": [\"https://...\", \"https://...\", \"https://...\"]\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}\n\n\n\nIt works similar to \n$network.request\n but with a few differences:\n\n\n\n\nIt can fetch multiple remote JSON files in parallel.\n\n\nIt is only for making simple \nGET\n requests. No POST/PUT/DELETE requests, etc.\n\n\n\n\n\n\n\u25a0 options\n\n\nThe \noptions\n object defines what the return value should look like. For example, the following \n$require\n action would fetch the contents of \nhttps://hello.world/1.json\n and then attach it to the \nprofile\n attribute.\n\n\n{\n  \"type\": \"$require\",\n  \"options\": {\n    \"profile\": \"https://hello.world/1.json\"\n  }\n}\n\n\n\nWhen you chain this action with another action, you should be able to access the contents of \nhttps://hello.world/1.json\n via \n{{$jason.profile}}\n.\n\n\nThe value in the key/value pair can take the form of:\n\n\n\n\n\n\na single url: \n\"profile\": \"https://...\"\n\n\n\n\n\n\nan array of urls: \n\"profiles\": [\"https://...\", \"https://...\", \"https://...\"]\n\n\n\n\n\n\n\n\n\u25a0 return value\n\n\nreturns the constructed \noptions\n object.\n\n\nFor example, let's say \nhttps://blahblah.blah/1.json\n and \nhttps://blahblah.blah/2.json\n each contained the following JSON files respectively:\n\n\n{\n  \"items\": [\"abc\", \"def\", \"ghi\"]\n}\n\n{\n  \"items\": [\"cba\", \"fed\", \"ihg\"]\n}\n\n\n\nWe can fetch them in parallel like this:\n\n\n{\n  \"type\": \"$require\",\n  \"options\": {\n    \"items1\": \"https://blahblah.blah/1.json\",\n    \"items2\": \"https://blahblah.blah/2.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}\n\n\n\nAs a result, when we are ready to \n$render\n, the \n$jason\n value will be:\n\n\n{\n  \"items1\": {\n    \"items\": [\"abc\", \"def\", \"ghi\"]\n  },\n  \"items2\": {\n    \"items\": [\"cba\", \"fed\", \"ihg\"]\n  }\n}\n\n\n\n\u25a0 note\n\n\nUnlike \n$set\n or \n$cache.set\n, the \n$require\n action on its own doesn't persist the data in any way.\n\n\nSo if you want to persist them to a local variable or a cache variable, you will need to chain the result to these actions and take care of assignment that way. Here's an example:\n\n\n{\n  \"type\": \"$require\",\n  \"options\": {\n    \"profiles\": [\"https://...\", \"https://...\", \"https://\"]\n  },\n  \"success\": {\n    \"type\": \"$set\",\n    \"options\": {\n      \"profiles\": \"{{$jason.profiles}}\"\n    }\n  }\n}\n\n\n\n\n\n\u2500\u2500 FUNCTIONAL \u2500\u2500\n\n\nJust like functions in any other programming language, you can call an action from an action, wait for it to return, and use the return value to continue where it left off.\n\n\n\n\n$lambda\n\n\nCall another action by name (This is how \ntrigger\n is implemented internally)\n\n\n{\n  \"type\": \"$lambda\",\n  \"options\": {\n    \"name\": \"refresh\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    }\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Error\",\n      \"description\": \"Something went wrong\"\n    }\n  }\n}\n\n\n\nAbove code is the same as:\n\n\n{\n  \"trigger\": \"refresh\",\n  \"options\": {\n    \"url\": \"https://jasonbase.com/things/3nf.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Error\",\n      \"description\": \"Something went wrong\"\n    }\n  }\n}\n\n\n\nIn most cases you may want to use \ntrigger\n but sometimes it's useful to use \n$lambda\n directly, for example if you want to dynamically trigger different actions. Example:\n\n\n{\n  \"type\": \"$lambda\",\n  \"options\": {\n    \"name\": \"{{action_name}}\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    }\n  },\n  ...\n}\n\n\n\n\n\n\u25a0 options\n\n\n\n\nname: the name of the action to trigger, registered \nunder actions registry\n\n\noptions: \noptions object\n to pass to the next action\n\n\n\n\n\n\n\u25a0 return value\n\n\n\n\nWhatever the triggered action returns via \n$return.success\n or \n$return.error\n\n\n\n\n\n\n$return.success\n\n\nUnless you explicitly call \n$return.success\n or \n$return.error\n, all triggered actions terminate when they reach the end of the call chain.\n\n\nTo return to the action which called the current action with a \nsuccess\n state, we need to use \n$return.success\n.\n\n\nThen the caller action will resume where it left off and keep executing its \nsuccess\n action.\n\n\n\n\n\u25a0 options\n\n\n\n\nThe return value to pass back to the caller action.  If not specified, it automatically returns the current \n$jason\n value\n\n\n\n\n\n\n\u25a0 no \nsuccess\n or \nerror\n of its own\n\n\n\n\nnone\n : Since \n$return.success\n is an action solely designed for returning the control back to the caller action, \n$return.success\n itself does not have \nsuccess\n or \nerror\n actions.\n\n\n\n\n\n\n\u25a0 example\n\n\nIn the example below, the \ndisplay_banner\n triggers \nfetch\n, and then displays a banner using the return value \n$jason\n.\n\n\nNotice how the \n$lambda\n action's \nsuccess\n takes over after the \nfetch\n action returns via \n$return.success\n.\n\n\n{\n  \"display_banner\": {\n    \"type\": \"$lambda\",\n    \"options\": {\n      \"name\": \"fetch\"\n    },\n    \"success\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"The number of items:\",\n        \"description\": \"{{$jason.items.length}}\"\n      }\n    }\n  },\n  \"fetch\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    },\n    \"success\": {\n      \"type\": \"$return.success\",\n      \"options\": {\n        \"items\": \"{{$jason}}\"\n      }\n    }\n  }\n}\n\n\n\nAgain, this is the same as using \ntrigger\n:\n\n\n{\n  \"display_banner\": {\n    \"trigger\": \"return_homer_simpson\",\n    \"success\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"The number of items:\",\n        \"description\": \"{{$jason.items.length}}\"\n      }\n    }\n  },\n  \"fetch\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    },\n    \"success\": {\n      \"type\": \"$return.success\",\n      \"options\": {\n        \"items\": \"{{$jason}}\"\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n$return.error\n\n\nPretty much the same as \n$return.success\n, except that it returns the control back to the caller action's \nerror\n action.\n\n\n\n\n\u2500\u2500\u2500\u2500 VIEW \u2500\u2500\u2500\u2500\n\n\nActions related to drawing views\n\n\n\n\n$reload\n\n\nRefreshes the view completely by re-fetching content from the current URL.\n\n\n{\n  \"items\": [{\n    \"type\": \"label\",\n    \"text\": \"Refresh\",\n    \"action\": {\n      \"type\": \"$reload\"\n    }\n  }]\n}\n\n\n\n\u25a0 options\n\n\n\n\nnone\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\nThis will reload the page when a user taps on the \nitem\n.\n\n\n\n\n$render\n\n\nRenders a \ntemplate\n with data\n\n\n\u25a0 options\n\n\n\n\ndata\n: Data to render. If not specified, it's the \n$jason\n value at the point \n$render\n was called.\n\n\ntemplate\n: \nTemplate\n name to render. If not specified, it will look for \n$jason.head.templates.body\n\n\ntype\n: \n\"html\"\n | \n\"json\"\n (Default is \njson\n. See \nhtml templating\n to learn more about how to render an HTML string natively using Jason)\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example\n\n\nRendering return value from the previous action\n\n\nBy default \n$render\n renders the data returned from its previous action. \n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://jasonbase.com/things/gbe.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}\n\n\n\nFor example, let's say the network request returns the following result:\n\n\n{\n    \"name\": \"Mr. Fisherman\",\n    \"image\": \"http://i.giphy.com/OmK8lulOMQ9XO.gif\",\n    \"status\": \"Busy fishing on the iPhone\"\n}\n\n\n\nAll Jasonette actions store their return values under \n$jason\n object when they return.\n\n\nSo we can access above value using the \n$jason\n variable.\n\n\n\n\nHere's how we would write the \nbody\n template:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [{\n              \"type\": \"image\",\n              \"url\": \"{{$jason.image}}\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"{{$jason.text}}\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"{{$jason.status}}\"\n            }]\n          }]\n        }\n      ...\n  }\n}\n\n\n\nSpecifying data when rendering\n\n\nIn most cases you will use the above method--rendering data passed in as a return value from the previous action. \n\n\nHowever, you can also use \n$render\n as standalone, by manually specifying its data, like this (You rarely need to use this method):\n\n\n{\n  \"type\": \"$render\",\n  \"options\": {\n    \"data\": [{\n      \"name\": \"Ethan\",\n      \"id\": \"1\"\n    }, {\n      \"name\": \"Jason\",\n      \"id\": \"2\"\n    }, {\n      \"name\": \"Jasonette\",\n      \"id\": \"3\"\n    }]\n  }\n}\n\n\n\nRendering the body template\n\n\nIn most cases you will use \n$render\n without manually specifying the template, because it will assume you're rendering the \nbody\n template. For example, a typical \n$render\n looks like this:\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://jasonclient.com/req.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}\n\n\n\nIf no \ntemplate\n option is specified, \n$render\n will look for a \nbody\n template inside \n$jason.head.templates\n and use that to render the data. For example, from the following JSON,\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason}}\": {\n                \"type\": \"label\",\n                \"text\": \"{{text}}\"\n              }\n            }\n          }]\n        }\n      ...\n  }\n}\n\n\n\nWhen \n$render\n runs, it will take the JSON markup inside \n$jason.head.templates.body\n, render it using the data, onto the view.\n\n\nManually specifying the template to render\n\n\nBut sometimes you can also specify the template name. For example, we may want to render a template named \nempty\n instead of the default \nbody\n template:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          ....\n        },\n        \"empty_template\": {\n          \"sections\": [{\n            \"items\": [{\n              \"type\": \"label\",\n              \"text\": \"Empty view\"\n            }]\n          }]\n        }\n      ...\n  }\n}\n\n\n\nIn this case we could pass \n{\"template\": \"empty_template\"}\n as an option, like this:\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://jasonclient.com/req.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$render\",\n    \"options\": {\n      \"template\": \"empty_template\"\n    }\n  }\n}\n\n\n\nHow is \n$render\n different from \n$reload\n?\n\n\n$render\n redraws an existing template you already downloaded, using dynamic data. \n$reload\n completely refreshes the current URL. Here's an example scenario:\n\n\n\n\nJason view loads and fetches a JSON markup from the server (\nmain.json\n)\n\n\nmain.json\n makes an API request to Twitter to fetch Tweets. (https://api.twitter.com/1.1/statuses/user_timeline.json)\n\n\nThen it renders the result using its \nbody\n template, which is under \n$jason.head.templates.body\n in \nmain.json\n.\n\n\nFrom this point on, calling \n$render\n simply takes the \n$jason.head.templates.body\n we have in memory, and renders whatever data we pass in.\n\n\nHowever calling \n$reload\n will make a full refresh, going back to step 1.\n\n\n\n\nConclusion\n\n\n\n\nIn most cases, you call \n$render\n at the end of an action call chain, rendering the \n$jason\n return value from its preceding action.\n\n\nAlso, in most cases \n$render\n is used without specifying \ntemplate\n or \ndata\n options.\n\n\nJust don't forget to have a template under \n$jason.head.templates.body\n, since \n$render\n will automatically render that.\n\n\n\n\n\n\nAlso, remember that you can access the return value using \n$jason\n from the template.\n\n\n\n\n\n\n$snapshot\n\n\nTakes a snapshot of the currently visible screen\n\n\n\u25a0 options\n\n\n\n\nnone\n\n\n\n\n\u25a0 return value\n\n\nThe return value is in this format:\n\n\n{\n  \"data\": \"....\",\n  \"data_uri\": \"....\",\n  \"content_type\": \"image/jpeg\",\n}\n\n\n\n\n\nReturns the snapshot as raw data under \ndata\n attribute.\n\n\nAlso returns \ndata_uri\n attribute, which contains the \ndata-uri\n\n\nYou can utilize the \ndata\n by passing it to another action using \nsuccess\n\n\nThe \ncontent_type\n is \n\"image/jpeg\"\n\n\n\n\n\u25a0 example\n\n\nTake a snapshot and share\n\n\n{\n  \"type\": \"$snapshot\",\n  \"success\": {\n    \"type\": \"$util.share\",\n    \"options\": {\n      \"items\": [\n        {\n          \"type\": \"image\",\n          \"data\": \"{{$jason.data}}\"\n        }\n      ]\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\nShare sheet\n\n\nSMS example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$href\n\n\n\n\nAn action version of \nhref\n. Works the same way, but just another way to invoke href.\n\n\nUse this when a component doesn't support \nhref\n attribute directly but supports an \naction\n.\n\n\nSometimes it's useful when you want to invoke \nhref\n without displaying a disclosure indicator. (href comes with a disclosure indicator by default)\n\n\n\n\n\u25a0 options\n\n\nIt's the same set of attributes as \nhref\n since it simply invokes the href when triggered.\n\n\n\n\nurl\n\n\nthe url to transition to\n\n\n\n\n\n\nview\n\n\ncan be \n\"web\"\n | \n\"app\"\n | \n\"jason\"\n (default)\n\n\n\n\n\n\noptions\n\n\nWorks the same way as the \noptions object for href\n \n\n\n\n\n\n\ntransition\n\n\ncan be \n\"modal\"\n | \n\"fullscreen\"\n | \n\"push\"\n (default)\n\n\n\n\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example 1\n\n\n{\n   \"type\": \"label\",\n   \"text\": \"trigger href\",\n   \"action\": {\n     \"type\": \"$href\",\n     \"options\": {\n       \"url\": \"...\",\n       \"transition\": \"...\",\n       \"view\": \"...\"\n     }\n   }\n}\n\n\n\nis same as:\n\n\n{\n   \"type\": \"label\",\n   \"text\": \"trigger href\",\n   \"href\": {\n     \"url\": \"...\",\n     \"transition\": \"...\",\n     \"view\": \"...\"\n   }\n}\n\n\n\nThe only difference is: in case of \nitems\n the second option displays a disclosure indicator since we're directly using \nhref\n\n\n\u25a0 example 2\n\n\nThis example opens Instagram app using its URL scheme\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Take a photo on instagram\"\n    },\n    \"body\": {\n      \"sections\": [\n        {\n          \"items\": [\n            {\n              \"type\": \"label\",\n              \"text\": \"Take a photo on Instagram\",\n              \"action\": {\n                \"type\": \"$href\",\n                \"options\": {\n                  \"url\": \"instagram://camera\",\n                  \"view\": \"app\"\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n\n\n\n\n\n$close\n\n\nClose a modal (works when the currently view is a modal)\n\n\n\u25a0 options\n\n\n\n\nnone\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\n\n$back\n\n\nTransition one step back from the current view\n\n\n\n\nIf the current view is a modal, it closes the current view\n\n\nOtherwise it slides back to the previous view\n\n\n\n\n\u25a0 options\n\n\n\n\nnone\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\n\n\u2500\u2500 NETWORK \u2500\u2500\n\n\n\n\n$network.request\n\n\nMake GET/POST/PUT/DELETE network requests\n\n\n\u25a0 options\n\n\n\n\nurl\n: The url to access.\n\n\nmethod\n: \n\"get\"\n | \n\"post\"\n | \n\"put\"\n | \n\"delete\"\n.\n\n\ndata\n: Parameters to send along with the url (optional)\n\n\nheader\n: Headers to attach to every request if any (optional)\n\n\ndata_type\n: Specifies how the fetched response will be processed. Can be \njson\n, \nhtml\n, \nrss\n, or \nraw\n. \njson\n assumes that the return value will be in JSON format, whereas \nraw\n expects a plain text. You can use \nraw\n type when fetching a plain text or CSV. \nhtml\n is for fetching HTML content and especially required when you need to utilize HTML requests associated with cookies/sessions. \nrss\n is used to fetch RSS. The default is \njson\n.\n\n\ncontent_type\n: Specifies which format the parameters will be sent as. By default it's sent as a form object, but in case you specify \n{\"content_type\": \"json\"}\n the data will be submitted as a JSON string.\n\n\n\n\n\u25a0 return value\n\n\n\n\nWhatever the server returns\n\n\n\n\n\u25a0 examples\n\n\nExample 1. Simple JSON GET request\n\n\nHere's a simple example of GET request, fetching JSON. We don't need to specify \n{\"type\": \"get\"}\n here since the default type is \n\"get\"\n\n\n{\n    \"type\": \"$network.request\",\n    \"options\": {\n        \"url\": \"http://plasticfm.herokuapp.com/things/3.json\"\n    },\n    \"success\": {\n        \"type\": \"$render\"\n    }\n}\n\n\n\n\n\nExample 2. More complex JSON requests\n\n\nThis time we're going to make a POST request, with all the data and header\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://www.jasonbase.com/messages.json\",\n    \"method\": \"post\",\n    \"data\": {\n      \"user_id\": \"fI9\",\n      \"message\": \"Hello there\"\n    },\n    \"header\": {\n      \"auth_token\": \"fnekfla98dls9sNFK0nf3\"\n    }\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$util.alert\",\n    \"options\": {\n      \"title\": \"Error\",\n      \"description\": \"Uh oh, something went wrong\"\n    }\n  }\n}\n\n\n\n\n\nExample 3. HTML GET request\n\n\nYou can also make HTML type requests. Here's a request with \nhtml\n data_type.\n\n\n{\n    \"type\": \"$network.request\",\n    \"options\": {\n        \"url\": \"https://news.ycombinator.com/newest\",\n        \"dataType\": \"html\"\n    },\n    \"success\": {\n        \"type\": \"$render\",\n        \"options\": {\n            \"type\": \"html\"\n        }\n    }\n}\n\n\n\nIt fetches the url as \nhtml\n type, and then renders it using the \nhtml\n type parser. See templates for more details on how to render HTML content in Jasonette.\n\n\n\n\nExample 4. HTML POST request with cookies\n\n\nDealing with cookies is simple. All you need to do is make the request to create a session. Jason will automatically store the returned cookie, and then attach it to all subsequent requests.\nHere's an example of signing into a website by making an HTML data_type \n$network.request\n call:\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://news.ycombinator.com/login\",\n    \"method\": \"post\",\n    \"data\": {\n      \"acct\": \"{{$get.username}}\",\n      \"pw\": \"{{$get.password}}\"\n    },\n    \"data_type\": \"html\"\n  },\n  \"success\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://news.ycombinator.com/saved?id={{$get.username}}\",\n      \"data_type\": \"html\"\n    },\n    \"success\": {\n      \"type\": \"$render\",\n      \"options\": {\n        \"type\": \"html\"\n      }\n    }\n  }\n}\n\n\n\n\n\nIt first signs into the site by making a \nPOST\n request of \n{\"data_type\": \"html\"}\n. Then it stores the cookie returned from the server.\n\n\nOnce the login succeeds, it makes a \nGET\n request of \n{\"data_type\": \"html\"}\n to an actual content API. The cookie from the previous step is automatically applied to the request.\n\n\n\n\n\n\n$network.upload\n\n\nUpload data to cloud providers. Currently supports S3, but \nfeel free to extend\n\n\n\u25a0 options\n\n\n\n\ntype\n: \n\"s3\"\n (Currently only supports s3)\n\n\nbucket\n: s3 bucket name\n\n\npath\n: the s3 path to upload the file\n\n\nsign_url\n: To upload files to s3, you need to acquire a signed url from S3 first, and then upload it to that URL.\n\n\n\n\n\u25a0 return value\n\n\n\n\nfile_name\n: a randomly generated filename. When \n$network.upload\n is called, it automatically generates a random, hashed filename to ensure uniqueness, and then stores the file onto the cloud provider with that name.\n\n\nWe need this attribute to keep track of the data we've just uploaded. For example, we may want to store the filename somewhere so we can access this file later.\n\n\n\n\n\n\n\n\n\u25a0 example\n\n\nThis example takes a photo and uploads to S3.\n\n\n{\n  \"type\": \"$media.camera\",\n  \"options\": {\n    \"quality\": \"0.4\"\n  },\n  \"success\": {\n    \"type\": \"$network.upload\",\n    \"options\": {\n      \"type\": \"s3\",\n      \"bucket\": \"fm.ethan.jason\",\n      \"data\": \"{{$jason.data}}\",\n      \"path\": \"\",\n      \"sign_url\": \"https://imagejason.herokuapp.com/sign_url\"\n    },\n    \"success\": {\n      \"type\": \"$network.request\",\n      \"options\": {\n        \"url\": \"https://imagejason.herokuapp.com/post\",\n        \"method\": \"post\",\n        \"data\": {\n          \"bucket\": \"fm.ethan.jason\",\n          \"path\": \"/\",\n          \"filename\": \"{{$jason.filename}}\"\n        }\n      },\n      \"success\": {\n        \"type\": \"$reload\"\n      }\n    }\n  }\n}\n\n\n\nHere's what's going on above:\n\n\n1. The client takes a photo using the \n$media.camera\n action and passes the raw data to \n$network.upload\n as \n$jason\n.\n\n\n2. The \n$network.upload\n first looks at \noptions.sign_url\n and makes a request to get the signed url.\n\n\n3. The server should return a signed url for S3.\n\n\n\n\nThe \nsign_url\n attribute is the URL to your server, and your server should generate a signed url and return the result in the following format:\n\n\n{ \"$jason\": \"https://s3.amazonaws.com/...../...?AWSAccessKeyId=.....\nExpires=.....\nSignature=.....\"}\n\n\nSee the full server side code\n to learn how to generate signed urls.\n\n\n\n\n4. The client then uploads the content passed in as \ndata\n to the just generated signed url, using a randomly generated filename.\n\n\n5. Once the upload finishes, the \n$network.upload\n returns the filename generated from step 3.\n\n\n6. Then it stores the filename to our server by making a POST \n$network.request\n to \nhttps://imagejason.herokuapp.com/post\n\n\n\nCheck out the full code on Github:\n\n\ns3-upload-example\n\n\n\n\n\u2500\u2500 SESSION \u2500\u2500\n\n\n\n\nCheck out a functional demo app with backend server, with user accounts\n\n\nsession-example\n\n\n\n\n$session.set\n\n\n\n\n$session.set\n takes care of \ntoken authentication\n to authenticate into any mobile API.\n\n\nYou need to call \n$session.set\n \nafter\n a \n$network.request\n action to an authentication endpoint, which returns an authentication token.\n\n\nSessions are tied to domain, which means as long as you authenticate with a domain, all other URLs under the same domain will use the same token therefore you won't need to re-authenticate for every URL under the same domain.\n\n\nFor cookie based HTML authentication, see \nExample 4 from \n$network.request\n above\n.\n\n\n\n\n\u25a0 options\n\n\n\n\ndomain\n: the domain to set the session for (example: \"jasonbase.com\")\n\n\nheader\n: headers to attach to every future \n$network.request\n to the specified domain.\n\n\nbody\n: body parameters to attach to every future \n$network.request\n to the specified domain.\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example\n\n\nHere's an example:\n\n\n\"action\": {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://sessionjason.herokuapp.com/users/sign_in.json\",\n    \"method\": \"post\",\n    \"data\": {\n      \"user[email]\": \"{{$get.email}}\",\n      \"user[password]\": \"{{$get.password}}\"\n    }\n  },\n  \"success\": {\n    \"type\": \"$session.set\",\n    \"options\": {\n      \"domain\": \"sessionjason.herokuapp.com\",\n      \"header\": {\n        \"X-User-Email\": \"{{$jason.email}}\",\n        \"X-User-Token\": \"{{$jason.authentication_token}}\"\n      }\n    },\n    \"success\": {\n      \"type\": \"$href\",\n      \"options\": {\n        \"url\": \"https://sessionjason.herokuapp.com/posts.json\",\n        \"transition\": \"replace\"\n      }\n    }\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Enter credentials\",\n      \"description\": \"Please enter both email and password\"\n    }\n  }\n}\n\n\n\nLet's walk through each step.\n\n\nThe first action is \n$network.request\n. It makes a POST request to \nhttps://sessionjason.herokuapp.com/users/sign_in.json\n, to which the server returns the following JSON as a response:\n\n\n{\n  \"id\":2,\n  \"email\":\"ethan@ethan.fm\",\n  \"created_at\":\"2016-10-14T22:55:00.664Z\",\n  \"updated_at\":\"2016-10-15T05:22:41.730Z\",\n  \"authentication_token\":\"fnekz4hf7ghw95m6ks0rf01j\"\n}\n\n\n\nNext, we proceed to the next action, which is \n$session.set\n. Here we use the return value from the \n$network.request\n and set the header.\n\n\n\n\nThis stores the \nheader\n object for the specified \ndomain\n (session.herokuapp.com), and this stored header will be attached to all future \n$network.request\n to this domain. The header to be stored will look like this:\n\n\n{\n  \"header\": {\n    \"X-User-Email\": \"ethan@ethan.fm\",\n    \"X-User-Token\": \"fnekz4hf7ghw95m6ks0rf01j\"\n  }\n}\n\n\n\n\n\nAfter the \n$session.set\n, it goes to the next action \n$href\n. This transitions to \nhttps://sessionjason.herokuapp.com/posts.json\n.\n\n\n\n\nThis time, the network request will automatically attach the stored header to the request.\n\n\n\n\nThe server will recognize the authentication token and respond with the actual \nposts.json\n.\n\n\n\n\n$session.reset\n\n\nThis action lets you clear sessions for a specified domain. Can be used for both \ntoken authentication\n and \nweb authentication via cookies\n\n\n\n\nFor token authentication, it clears your headers and body parameters objects tied to the domain, created through \n$session.set\n.\n\n\nFor web requests (html), it clears your cookie tied to the domain, created through \nhtml\n type \n$network.request\n, \nas described here\n.\n\n\n\n\n\u25a0  options\n\n\n\n\nurl\n: The url from which to sign out.\n\n\ndomain\n: The domain from which to sign out (used for APIs)\n\n\ndata\n: Parameters to send along with the url (optional)\n\n\ntype\n: \n\"html\"\n | \n\"json\"\n (Default is \"json\")\n\n\n\n\n\u25a0 examples\n\n\nExample 1. Signing out of token authentication\n\n\nNo need to specify \ntype\n, since it's \njson\n by default.\n\n\n{\n    \"type\": \"$session.reset\",\n    \"options\": {\n    \"domain\": \"sessionjason.herokuapp.com\"\n    },\n    \"success\": {\n        \"type\": \"$reload\"\n    }\n}\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\nExample 2. Signing out of a website by clearing cookies\n\n\nJust set the \noptions.type\n as \nhtml\n.\n\n\n{\n    \"type\": \"$session.reset\",\n    \"options\": {\n        \"domain\": \"http://news.ycombinator.com\",\n        \"type\": \"html\"\n    },\n    \"success\": {\n        \"type\": \"$reload\"\n    }\n}\n\n\n\n\n\nCheck out a functional demo app with backend server, with user accounts\n\n\nsession-example\n\n\n\n\n\u2500\u2500 VARIABLE \u2500\u2500\n\n\nUse $set and $get to set and get local variables.\n\n\nLocal variables are valid only within the current view and only stays on the memory.\n\n\n\n\n$set\n\n\nSet local variables.\n\n\n\u25a0 options\n\n\n\n\nkey:value pairs. The key is the variable name, and the value is the variable's value.\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example\n\n\nIn the following example, the \n$set\n action sets the value of the two local variables \nfirstname\n and \nlastname\n as \nethan\n and \ngliechtenstein\n, respectively.\n\n\n{\n  \"type\": \"$set\",\n  \"options\": {\n    \"firstname\": \"ethan\",\n    \"lastname\": \"gliechtenstein\"\n  }\n}\n\n\n\nThis is how you set a variable. We are setting local variables \nfirstname\n and \nlastname\n to \nethan\n and \ngliechtenstein\n respectively.\n\n\ndo something after setting the local variable\n\n\nIf you're using a local variable in your body template and wish to update the view to reflect the updated local variable, you need to call \n$render\n. \n\n\nFor example you can add a \nsuccess\n attribute to above action to redraw the view after update, like this:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"{{$get.firstname}} {{$get.lastname}}\",\n  \"action\": {\n    \"type\": \"$set\",\n    \"options\": {\n      \"firstname\": \"ethan\",\n      \"lastname\": \"gliechtenstein\"\n    },\n    \"success\": {\n      \"type\": \"$render\"\n    }\n  }\n}\n\n\n\n$get\n\n\nYou can access local variables by using a template expression \n{{$get.VARIABLE_NAME}}\n\n\n\n\nNormally, the usage flow is:\n\n\nSet a variable using \n$set\n action\n\n\nUse the variable from template through \n{{$get.VARIABLE_NAME}}\n expression.\n\n\n\n\n\n\n\n\n\u25a0 example\n\n\nOnce you set \nfirstname\n and \nlastname\n like we did above, we can use them like this:\n\n\n[\n  {\n    \"type\": \"label\",\n    \"text\": \"{{$get.firstname}}\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"{{$get.lastname}}\"\n  }\n]\n\n\n\nHere's a full usage example using both \n$set\n action and \n$get\n expression.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$set\",\n          \"options\": {\n            \"bar\": \"#\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        },\n        \"$pull\": {\n          \"type\": \"$set\",\n          \"options\": {\n            \"bar\": \"{{$get.bar+'#'}}\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [{\n              \"type\": \"label\",\n              \"text\": \"{{$get.bar}}\"\n            }]\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nHere's what's going on:\n\n\n\n\nWhen the view loads (\n$load\n system event), it sets the local variable \nbar\n's value as \"#\", then renders the template with a label that displays the variable \nbar\n (\n{{$get.bar}}\n).\n\n\nWhen the user makes a pull to refresh gesture (\n$pull\n event), it appends another \"#\" to \nbar\n and then renders again.\n\n\n\n\n\n\n\u2500\u2500 CACHE \u2500\u2500\n\n\nCache lets you persist and retrieve content. Unlike local variables, it will stay even when you close the app and come back.\n\n\n\n\nCache vs. Local variable\n\n\n\n\nCache and local variables are both sandboxed per view url. Therefore anything you store to cache and local variable is stored just for that view.\n\n\nLocal variables are only on memory so will go away when the view refreshes. But cache is stored persistently and stays until you overwrite or reset it, even if the app is killed and restarted.\n\n\n\n\n\n\nWrite\n\n\n$cache.set\n action is used to store to cache.\n\n\n\u25a0  options\n\n\n\n\nkey:value pairs. The key is the cache variable name, and the value is the variable's value.\n\n\n\n\n\u25a0 return value\n\n\nreturns the updated \n$cache\n object, which looks like this:\n\n\n{\n  \"items\": [...]\n}\n\n\n\n\u25a0 examples\n\n\nExample 1. Set cache\n\n\nIn the following example, it first makes a \n$network.request\n, and then takes its return value \n{{$jason}}\n and stores it to cache using the \n$cache.set\n action.\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$cache.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    }\n  }\n}\n\n\n\nExample 2. Set cache and use the updated value\n\n\nSimply setting the cache doesn't update the view. Let's try to render the updated result.\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$cache.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    },\n    \"success\": {\n      \"type\": \"$util.alert\",\n      \"options\": {\n        \"title\": \"Items fetched\",\n        \"description\": \"{{$cache.items.length}}\"\n      }\n    }\n  }\n}\n\n\n\n\n\nRead\n\n\nDirectly access \n$cache\n variable from a template expression, for example \n{{$cache.items}}\n.\n\n\n\u25a0 example\n\n\nFor example, you could store a \ntracking_keyword\n value locally and automatically perform a search whenever the document loads.\n\n\n{\n  \"type\": \"$oauth.request\",\n  \"options\": {\n    \"url\": SEARCH_URL,\n    \"data\": {\n      \"search_query\": \"{{$cache.tracking_keyword}}\"\n    }\n  }\n}\n\n\n\n\n\nReset\n\n\nUse \n$cache.reset\n action to reset the cache associated with the current url.\n\n\n\u25a0 options\n\n\n\n\nnone\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example\n\n\nThe following will wipe out all the cache values associated with the current view url.\n\n\n{\n  \"type\": \"$cache.reset\"\n}\n\n\n\n\n\n\u2500\u2500 GLOBAL \u2500\u2500\n\n\nIn most cases it is recommended to use \n$cache\n to persist data, because they are sandboxed per URL and it's secure. \n\n\nBut sometimes you may want to store variables globally so they're accessible from all the views.\n\n\nThis is what global variable does. Just like \n$cache\n, it will stay even when you close the app and come back later.\n\n\n\n\nGlobal vs. Cache vs. Local Variables\n\n\n\n\nCache is sandboxed per URL, but Global variables are global to the entire app.\n\n\nBoth Global and Cache persist data so they will stick around unless you delete the app or explicitly delete them using \n$cache.reset\n or \n$global.reset\n.\n\n\n\n\n\n\nWrite\n\n\n$global.set\n action is used to write to global variables.\n\n\n\u25a0  options\n\n\n\n\nkey:value pairs. The key is the global variable name, and the value is the variable's value.\n\n\n\n\n\u25a0 return value\n\n\nreturns the updated \n$global\n object, which looks like this:\n\n\n{\n  \"key1\": [...],\n  \"key2\": ...\n}\n\n\n\n\u25a0 examples\n\n\nExample 1. Set global\n\n\nIn the following example, it first makes a \n$network.request\n, and then takes its return value \n{{$jason}}\n and stores it to global using the \n$global.set\n action.\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$global.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    }\n  }\n}\n\n\n\nExample 2. Set global and use the updated value\n\n\nSimply setting the global doesn't update the view. Let's try to render the updated result.\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$global.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    },\n    \"success\": {\n      \"type\": \"$render\",\n      \"success\": {\n        \"type\": \"$util.alert\",\n        \"options\": {\n          \"title\": \"Items fetched\",\n          \"description\": \"{{$global.items.length}}\"\n        }\n      }\n    }\n  }\n}\n\n\n\nRead\n\n\nJust like \n$cache\n, you can read global variables using template expressions:\n\n\n\u25a0 example\n\n\nFor example, you could store \n$get.message\n (local variable) into a global variable named \nurl\n, and then display a \n$util.alert\n with the global variable we just set, like this:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        ...\n        \"store\": {\n          \"type\": \"$global.set\",\n          \"options\": {\n            \"url\": \"{{$get.message}}\"\n          },\n          \"success\": {\n            \"type\": \"$util.alert\",\n            \"options\": {\n              \"title\": \"Current global 'url' variable\",\n              \"description\": \"{{$global.url}}\"\n            }\n          }\n        },\n        ...\n      },\n      ...\n    }\n  }\n}\n\n\n\nExample: Use a modal to set global and render the result\n\n\nThe following JSON opens \nfile://2.json\n.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Global Test 1\",\n      \"actions\": {\n        \"$show\": {\n          \"type\": \"$render\"\n        },\n        \"$pull\": {\n          \"type\": \"$reload\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [\n            {\n              \"type\": \"vertical\",\n              \"items\": [\n                {\n                  \"type\": \"button\",\n                  \"text\": \"{{$global.something || 'Set Global'}}\",\n                  \"action\": {\n                    \"type\": \"$href\",\n                    \"options\": {\n                      \"url\": \"file://2.json\",\n                      \"transition\": \"modal\"\n                    }\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n\n\n\nHere's the contents of \n2.json\n.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Global Test 2\",\n      \"actions\": {\n        \"$show\": {\n          \"type\": \"$render\"\n        },\n        \"$pull\": {\n          \"type\": \"$reload\"\n        },\n        \"save\": {\n          \"type\": \"$global.set\",\n          \"options\": {\n            \"something\": \"{{$get.something}}\"\n          },\n          \"success\": {\n            \"type\": \"$close\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"header\": {\n            \"menu\": {\n              \"text\": \"Reset\",\n              \"style\": {\n                \"size\": \"15\",\n                \"font\": \"Helvetica\",\n                \"color\": \"#4f8ff7\"\n              },\n              \"action\": {\n                \"type\": \"$global.reset\",\n                \"options\": {\n                  \"items\": [\"something\"]\n                },\n                \"success\": {\n                  \"type\": \"$close\"\n                }\n              }\n            }\n          },\n          \"sections\": [{\n            \"type\": \"vertical\",\n            \"items\": [{\n                \"type\": \"label\",\n                \"text\": \"Global value is: {{$global.something || ''}}\"\n              },\n              {\n                \"type\": \"vertical\",\n                \"style\": {\n                  \"padding\": \"10\"\n                },\n                \"components\": [{\n                  \"type\": \"textfield\",\n                  \"name\": \"something\",\n                  \"value\": \"{{$global.something || ''}}\",\n                  \"placeholder\": \"Add something here\"\n                }]\n              },\n              {\n                \"type\": \"button\",\n                \"text\": \"Save Global Variable\",\n                \"action\": {\n                  \"trigger\": \"save\"\n                }\n              }\n            ]\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\nReset\n\n\nUse \n$global.reset\n action to remove global variables by name\n\n\n\u25a0 options\n\n\n\n\nitems\n : An array of global variable names to remove\n\n\n\n\n\u25a0 return value\n\n\n\n\nThe resulting \n$global\n object after removing the variables\n\n\n\n\n\u25a0 example\n\n\nThe following will wipe out all the global variables named \nkey1\n and \nkey2\n.\n\n\n{\n  \"type\": \"$global.reset\",\n  \"items\": [\"key1\", \"key2\"]\n}\n\n\n\n\n\n\u2500\u2500 SCRIPT \u2500\u2500\n\n\nJasonette lets you use simple inline JavaScript code inside template expressions. Here's an example where we use \nJSON.stringify\n:\n\n\n{\n  \nitems\n: [\n    {\n      \ntype\n: \nlabel\n,\n      \nurl\n: \nFull JSON string\n\n    },\n    {\n      \ntype\n: \nlabel\n,\n      \ntext\n: \n{{JSON.stringify($jason)}}\n\n    }\n  ]\n}\n\n\n\n\nHowever sometimes you may want to import an entire JavaScript library, just like you do with HTML using the \nscript\n tag.\n\n\n\n\n$script.include\n\n\nInclude remote/local JavaScript file into the template context.\n\n\n\u25a0 options\n\n\n\n\nitems\n: An array of include objects, each of which has the following attributes:\n\n\nurl\n: load from a url. You can use both remote (http:// or https://) or local (file://) urls\n\n\ntext\n: inline JavaScript code to import\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0  example\n\n\nIn the following example, we:\n\n\n\n\nimport \nunderscore.js\n,  \ncrypto.js\n, \nhe.js\n, as well as inject an inline JavaScript code into the context via \ntext\n attribute.\n\n\nUse it by accessing the \n$root\n context. The JavaScript libraries get injected into the global context (\n$root\n) after running \n$script.include\n.\n\n\n\n\nNote that these JavaScript libraries referenced by \nurl\n are downloaded in parallel just like how \n$require action\n works.\n\n\n{\n  \ntype\n: \n$script.include\n,\n  \noptions\n: {\n    \nitems\n: [\n      { \nurl\n: \nhttps://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\n },\n      { \ntext\n: \nvar randomcolor = function() { return '#'+Math.floor(Math.random()*16777215).toString(16); }\n },\n      { \nurl\n: \nhttps://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js\n },\n      { \nurl\n: \nhttps://rawgit.com/mathiasbynens/he/master/he.js\n }\n    ]\n  },\n  \nsuccess\n: {\n    \ntype\n: \n$render\n,\n    \noptions\n: {\n      \ndata\n: {\n        \nraw\n: \nno man\n#38;s land\n,\n        \ndecoded\n: \n{{$root.he.decode('no man\n#39;s land')}}\n,\n        \nunique\n: \n{{$root._.uniq([1,2,3,3,3,4,4,4,4,5])}}\n\n      }\n    }\n  }\n}\n\n\n\n\n\n\n$script.clear\n\n\nClears out the global context of the JavaScript template engine.\n\n\n\u25a0 options\n\n\n\n\nnone\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0  example\n\n\n{\n  \ntype\n: \n$script.clear\n\n}\n\n\n\n\n\n\n\u2500\u2500 UTIL \u2500\u2500\n\n\nUtility and widget methods\n\n\n\n\n$util.banner\n\n\nDisplays a banner notification with title and description.\n\n\n\n\n\u25a0 options\n\n\n\n\ntitle\n\n\ndescription\n\n\ntype\n: \n\"error\"\n | \n\"success\"\n | \n\"info\"\n (default)\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0  example\n\n\n{\n    \"type\": \"$util.banner\",\n    \"options\": {\n        \"title\": \"Hello World\",\n        \"description\": \"I'm a banner. I display a title and a description\",\n        \"type\": \"info\"\n    }\n}\n\n\n\n\n\n$util.toast\n\n\nDisplays a toast notification with a simple text\n\n\n\n\n\u25a0 options\n\n\n\n\ntext\n: The text to display\n\n\ntype\n: \n\"error\"\n | \n\"info\"\n | \n\"warning\"\n | \n\"dark\"\n | \n\"default\"\n | \n\"success\"\n (default)\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example\n\n\n{\n    \"type\": \"$util.toast\",\n    \"options\": {\n        \"text\": \"I'm a toast. I display a simple text.\",\n        \"type\": \"warning\"\n    }\n}\n\n\n\n\n\n$util.alert\n\n\n\n\nDisplays an alert.\n\n\nAlerts can also have form input fields users can fill in.\n\n\nWhen you use the form input, \n$util.alert\n returns the resulting key/value pairs wrapped with \n$jason\n.\n\n\n\n\nTypes of alerts\n\n\n\n\nBasic\n : You can just display a simple alert that has an \nok\n and a \ncancel\n button.\n\n\nForm\n : You can also add input fields to the alert and use it to receive user input.\n\n\n\n\n\n\n\n\n\n\n\n\nBasic Alert\n\n\nForm Alert\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u25a0 options\n\n\n\n\ntitle\n: title of the alert\n\n\ndescription\n: description caption\n\n\nform\n (optional): Array of input elements. Each input can have the following attributes:\n\n\nname\n: name of the field. Use this name to retrieve the value filled out by the user\n\n\nvalue\n: set this attribute to preset the value inside the input field.\n\n\nplaceholder\n: placeholder text\n\n\ntype\n (optional) : \nsecure\n to hide keystrokes with *\n\n\n\n\n\n\n\n\n\u25a0  return value\n\n\n\n\nif the \nform\n attribute is used, returns the filled out \n$jason\n object\n\n\nif the \nform\n attribute is NOT used, no return value\n\n\n\n\n\u25a0 examples\n\n\nExample 1. Simple notice alert\n\n\nJust a simple alert with an OK and a Cancel button\n\n\n{\n  \"type\": \"$util.alert\",\n  \"options\": {\n    \"title\": \"Basic Alert\",\n    \"description\": \"I'm a basic alert. I simply display an alert that needs to be dismissed before moving forward\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}\n\n\n\nExample 2. Form Alert\n\n\nHere's an example of an alert that lets users fill out a form and return the value.\n\n\n{\n  \"type\": \"$util.alert\",\n  \"options\": {\n    \"title\": \"Demo alert with input\",\n    \"description\": \"Try entering values and press OK\",\n    \"form\": [{\n      \"name\": \"username\",\n      \"placeholder\": \"Enter username\"\n    }, {\n      \"name\": \"password\",\n      \"placeholder\": \"Enter password\",\n      \"secure\": \"true\"\n    }]\n  }\n}\n\n\n\nIn this case, after the user fills out the form and presses \"OK\", the action will finish with a return value that takes the following form:\n\n\n{\n  \"$jason\": {\n    \"username\": \"ethan\",\n    \"password\": \"sdn3Uef2!\"\n  }\n}\n\n\n\nTo use this return value, you can chain another action as a \nsuccess\n callback and use the attributes, like this:\n\n\n{\n  \"type\": \"$util.alert\",\n  \"options\": {\n    \"title\": \"Sign in\",\n    \"description\": \"Please enter username and password\",\n    \"form\": [{\n      \"name\": \"username\"\n    }, {\n      \"type\": \"secure\",\n      \"name\": \"password\"\n    }]\n  },\n  \"success\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://www.jasonclient.org/users/sign_in.json\",\n      \"method\": \"post\",\n      \"data\": {\n        \"username\": \"{{$jason.username}}\",\n        \"password\": \"{{$jason.password}}\"\n      }\n    }\n  }\n}\n\n\n\n\n\n$util.share\n\n\nShare a text, image, video, or a combination of them.\n\n\n\n\n\n\n\n\n\n\nShare sheet\n\n\nSMS example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u25a0 options\n\n\n\n\nitems\n (array): Array of items to be shared. Each item can have the following attributes\n\n\ntype\n: \n\"text\"\n | \n\"image\"\n | \n\"video\"\n\n\ntext\n: text\n\n\ndata\n: raw data to be shared (only for \nimage\n type)\n\n\nurl\n: image url (only for \nimage\n type)\n\n\nfile_url\n: video url (only for \nvideo\n type)\n\n\n\n\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 examples\n\n\nExample 1. Sharing a simple text\n\n\n{\n  \"type\": \"$util.share\",\n  \"options\": {\n    \"items\": [{\n      \"type\": \"text\",\n      \"text\": \"This is an automated message\"\n    }]\n  }\n}\n\n\n\nExample 2. Sharing an image captured from \n$snapshot\n\n\n{\n  \"type\": \"$snapshot\",\n  \"success\": {\n    \"type\": \"$util.share\",\n    \"options\": {\n      \"items\": [{\n        \"type\": \"image\",\n        \"data\": \"{{$jason.data}}\"\n      }]\n    }\n  }\n}\n\n\n\nExample 3. Sharing a video captured from \n$media.camera\n\n\n{\n  \"type\": \"$media.camera\",\n  \"success\": {\n    \"type\": \"$util.share\",\n    \"options\": {\n      \"items\": [{\n        \"type\": \"video\",\n        \"file_url\": \"{{$jason.file_url}}\"\n      }]\n    }\n  }\n}\n\n\n\nExample 4. Sharing an image from a URL, and a text\n\n\n{\n  \"type\": \"$util.share\",\n  \"options\": {\n    \"items\": [{\n      \"type\": \"image\",\n      \"url\": \"https://vjs.zencdn.net/v/oceans.png\"\n    },{\n      \"type\": \"text\",\n      \"text\": \"This is a picture of ocean\"\n    }]\n  }\n}\n\n\n\n\n\n$util.picker\n\n\nOpens a multiple choice picker menu, with each item linking to an \naction\n or an \nhref\n.\n\n\n\n\n\n\n\u25a0 options\n\n\n\n\ntitle\n (string): The top title caption for the picker\n\n\nitems\n (array): An array of items from which the user can choose. Each item can contain the following attributes:\n\n\ntext\n: Text to display\n\n\nhref\n: \nhref\n to trigger when selected.\n\n\naction\n: \naction\n to call when selected.\n\n\n\n\n\n\n\n\n\u25a0 Return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"menu\": {\n          \"text\": \"Menu\",\n          \"action\": {\n            \"type\": \"$util.picker\",\n            \"options\": {\n              \"items\": [{\n                \"text\": \"Trigger $util.banner\",\n                \"action\": {\n                  \"type\": \"$util.banner\",\n                  \"options\": {\n                    \"title\": \"Success\",\n                    \"description\": \"This is a banner\"\n                  }\n                }\n              },{\n                \"text\": \"Trigger $util.alert\",\n                \"action\": {\n                  \"type\": \"$util.alert\",\n                  \"options\": {\n                    \"title\": \"Alert\",\n                    \"description\": \"This is an alert triggered by $util.picker\"\n                  }\n                }\n              },{\n                \"text\": \"Trigger $audio.play\",\n                \"action\": {\n                  \"type\": \"$audio.play\",\n                  \"options\": {\n                    \"url\": \"https://s3.amazonaws.com/www.textcast.co/icons/yo.mp3\"\n                  }\n                }\n              }]\n            }\n          }\n        }\n      ...\n}\n\n\n\n\n\n$util.datepicker\n\n\nOpens a date picker\n\n\n\n\n\n\n\u25a0  options\n\n\n\n\nnone\n\n\n\n\n\u25a0  return value\n\n\nWhen a user selects one of the dates it returns the selected date in in \nunix timestamp format\n (in string) like this:\n\n\n{\n  \"value\": \"1471310358216\"\n}\n\n\n\n\u25a0 example\n\n\n{\n  \"$jason\": {\n    \"head\": {\n    \"title\": \"Datepicker Demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Pick a date\",\n          \"action\": {\n            \"type\": \"$util.datepicker\",\n            \"options\": {\n              \"title\": \"Pick a date\",\n              \"description\": \"Just pick one\"\n            },\n            \"success\": {\n              \"type\": \"$util.alert\",\n              \"options\": {\n                \"title\": \"Selected date\",\n                \"description\": \"{{(new Date(parseInt(\nspan style='color:#ff0000;'\n$jason\n/span\n) * 1000)).toString()}}\"\n              }\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\n$util.addressbook\n\n\nFetches the addressbook to populate them into $jason.\n\n\n\u25a0  options\n\n\n\n\nnone\n\n\n\n\n\u25a0  return value\n\n\nReturns an array of contacts from the addressbook, like this:\n\n\n[\n  {\n    \"name\": \"John\",\n    \"phone\": \"9176568890\",\n    \"email\": \"john@jasonclient.org\"\n  },\n  {\n    \"name\": \"Mary\",\n    \"phone\": \"9172562890\",\n    \"email\": \"mary@jasonclient.org\"\n  },\n  {\n    \"name\": \"Ethan\",\n    \"phone\": \"2026468271\",\n    \"email\": \"ethan@jasonclient.org\"\n  }\n]\n\n\n\n\u25a0 example\n\n\nIn this example, we access the addressbook when the view \n$load\ns, then \n$render\n the content using the given template.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Addressbook demo\",\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$util.addressbook\",\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [\n            {\n              \"items\": {\n                \"{{#each $jason}}\": {\n                  \"type\": \"vertical\",\n                  \"style\": {\n                    \"padding\": \"5\",\n                    \"spacing\": \"5\"\n                  },\n                  \"components\": [\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{name}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{JSON.stringify(phone)}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{JSON.stringify(email)}}\"\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n\n\n\n\u25a0  Required Permissions\n\n\nOn iOS, \n$util.addressbook\n works out of the box so you don't need to do anything.\n\n\nBut on Android you need to set up a \nandroid.permission.READ_CONTACTS\n permission.\n\n\nJust open up \nAndroidManifest.xml\n file from Android Studio, and uncomment the lines described below:\n\n\n\n\n\n\n\u2500\u2500 MEDIA \u2500\u2500\n\n\nAnything related to photo/video/camera.\n\n\n\n\n$media.camera\n\n\nCapture a video or a photo using the device camera\n\n\n\n\n\n\n\u25a0  options\n\n\n\n\ntype\n: \n\"photo\"\n | \n\"video\"\n\n\nedit\n: \n\"true\"\n (Don't include to remove the editing step)\n\n\nquality\n: \n\"high\"\n | \n\"medium\"\n | \n\"low\"\n (Default is \n\"medium\"\n)\n\n\n\n\n\u25a0 return value\n\n\nReturns an object with multiple attributes which represent the video/photo\n\n\n\n\nfile_url\n: local file url (Used for videos)\n\n\ndata_uri\n: \ndata-uri string\n\n\ndata\n: raw data (Used for photos)\n\n\ncontent_type\n: \n\"image/png\"\n | \n\"image/jpeg\"\n | \n\"video/mp4\"\n\n\n\n\nFor example, here's an example return value:\n\n\n{\n  \"file_url\": \"...\",\n  \"data_uri\": \"data:image/png;base64,.....\",\n  \"data\": \"...\",\n  \"content_type\": \"image/png\"\n}\n\n\n\nNormally you will want to pass the \ndata\n to another action such as \n$network.upload\n.\n\n\n\u25a0 example\n\n\nIn the following example, we take a photo using \n$media.camera\n, and then utilize the \ndata_url\n from the return value to set the \nbackground\n image url. \n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Camera\",\n      \"description\": \"Tap to open up camera\",\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$media.camera\",\n          \"options\": {\n            \"edit\": \"true\",\n            \"type\": \"photo\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"style\": {\n            \"background\": \"{{$jason.data_url}}\"\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\n$media.picker\n\n\nOpens the device camera roll.\n\n\n\n\n\n\n\u25a0  options\n\n\n\n\ntype\n: \n\"photo\"\n | \n\"video\"\n\n\nedit\n: \n\"true\"\n (Don't include to remove the editing step)\n\n\nquality\n: \n\"high\"\n | \n\"medium\"\n | \n\"low\"\n (Default is \n\"medium\"\n)\n\n\n\n\n\u25a0  return value\n\n\nSame as \n$media.camera\n\n\n\u25a0  example\n\n\n{\n    \"$jason\": {\n        \"head\": {\n            \"title\": \"Media picker\",\n            \"description\": \"Tap to select media\"\n        },\n        \"body\": {\n            \"sections\": [{\n                \"items\": [{\n                    \"type\": \"label\",\n                    \"text\": \"Select media\",\n                    \"action\": {\n                        \"type\": \"$media.picker\",\n                        \"options\": {\n                            \"edit\": \"true\",\n                            \"type\": \"video\"\n                        },\n                        \"success\": {\n                            \"type\": \"$util.alert\",\n                            \"options\": {\n                                \"title\": \"Selected {{$jason['content_type']}} at\",\n                                \"description\": \"{{$jason.file_url}}\"\n                            }\n                        }\n                    }\n                }]\n            }]\n        }\n    }\n}\n\n\n\n\n\n$media.play\n\n\nplays a video from remote url.\n\n\n\n\n\n\n\u25a0  options\n\n\n\n\nurl\n: the video url to play\n\n\nmuted\n: \n\"true\"\n to mute the sound\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0  example\n\n\n{\n    \"$jason\": {\n        \"head\": {\n            \"title\": \"Video\",\n            \"description\": \"Tap to play the video\"\n        },\n        \"body\": {\n            \"sections\": [{\n                \"items\": [{\n                    \"type\": \"image\",\n                    \"url\": \"https://vjs.zencdn.net/v/oceans.png\",\n                    \"action\": {\n                        \"type\": \"$media.play\",\n                        \"options\": {\n                            \"url\": \"https://vjs.zencdn.net/v/oceans.mp4\"\n                        }\n                    }\n                }]\n            }]\n        }\n    }\n}\n\n\n\n\n\n\u2500\u2500 AUDIO \u2500\u2500\n\n\nAnything related to audio\n\n\n\n\n$audio.play\n\n\n\n\nPlay audio from remote url. \n\n\nToggles between play and pause state if called multiple times.\n\n\n\n\n\n\n\u25a0  options\n\n\n\n\nurl\n:  A remote url to stream audio from.\n\n\ntitle\n: Title to display on the lock screen while playing in background mode.\n\n\nauthor\n: Author name to display on the lock screen while playing in background mode.\n\n\nalbum\n: Album name to display on the lock screen while playing in background mode.\n\n\nimage\n: Image url to display on the lock screen while playing in background mode.\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0  example\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Play audio\"\n    }, \n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Yo\",\n          \"action\": {\n            \"type\": \"$audio.play\",\n            \"options\": {\n              \"title\": \"Busdriver - Worlds to Run\",\n              \"author\": \"Song Exploder\",\n              \"image\": \"http://discover.pocketcasts.com/discover/images/400/fff9ba50-53e1-0131-8293-723c91aeae46.jpg\",\n              \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\n$audio.pause\n\n\nPauses an audio clip that's already playing from a remote url.\n\n\n\u25a0  options\n\n\n\n\nurl: if specified, pauses ONLY this url. Otherwise, pauses all audios currently playing.\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\n\n$audio.stop\n\n\nStops an audio clip that's already playing from a remote url.\n\n\n\u25a0  options\n\n\n\n\nurl: if specified, stops ONLY this url. Otherwise, stops all audios currently playing.\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\n\n$audio.seek\n\n\n\n\nSeeks audio already playing from a remote url.\n\n\nThe position value must be a value between \n0\n and \n1\n (in string)\n\n\n\n\n\u25a0  options\n\n\n\n\nurl\n: The audio url.\n\n\nposition\n: value between 0 and 1 (Must be in string format)\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0  example\n\n\nHere's an example of seeking an audio clip to 30% position\n\n\n{\n    \"$jason\": {\n        \"head\": {\n            \"title\": \"Seek example\"\n            \"actions\": {\n                \"$load\": {\n                    \"type\": \"$audio.play\",\n                    \"options\": {\n                        \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n                    }\n                }\n            }\n        },\n        \"body\": {\n            \"layers\": [{\n                \"type\": \"label\",\n                \"text\": \"Go to 30% position\",\n                \"style\": {\n                    \"bottom\": \"50\",\n                    \"left\": \"50%-50\",\n                    \"width\": \"100\"\n                },\n                \"action\": {\n                    \"type\": \"$audio.seek\",\n                    \"options\": {\n                        \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\",\n                        \"position\": \"0.3\"\n                    }\n                }\n            }]\n        }\n    }\n}\n\n\n\n\n\n$audio.position\n\n\nGet the position of the specified audio clip\n\n\n\u25a0  options\n\n\n\n\nurl\n: The audio url\n\n\n\n\n\u25a0  return value\n\n\nReturns the position between 0 and 1 in the following format:\n\n\n{\n  \"value\": \"0.3\"\n}\n\n\n\n\u25a0  example\n\n\nThe following example displays a toast with the current position when the user taps the label.\n\n\n{\n  \"$jason\": {\n    ...\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"How much did I listen so far?\",\n          \"action\": {\n            \"type\": \"$audio.position\",\n            \"options\": {\n            \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n          },\n          \"success\": {\n            \"type\": \"$util.toast\",\n            \"options\": {\n              \"text\": \"{{JSON.stringify($jason)}}\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\n$audio.duration\n\n\nReturns total duration of the specified audio clip\n\n\n\u25a0  options\n\n\n\n\nurl\n: The audio url\n\n\n\n\n\u25a0  return value\n\n\nDuration in seconds, in the following format:\n\n\n{\n  \"value\": \"300\"\n}\n\n\n\n\u25a0  example\n\n\nThe following example displays a toast with the total duration of the track when the user taps the label.\n\n\n{\n  \"$jason\": {\n    ...\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"How long is this track?\",\n          \"action\": {\n            \"type\": \"$audio.duration\",\n            \"options\": {\n              \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n            },\n            \"success\": {\n              \"type\": \"$util.toast\",\n              \"options\": {\n                \"text\": \"{{JSON.stringify($jason)}}\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\n$audio.record\n\n\nRecord audio\n\n\n\u25a0  options\n\n\n\n\ncolor\n: tint color when active\n\n\ncolor:disabled\n: tint color when paused\n\n\ntheme\n: \nlight\n to use light theme. Otherwise omit.\n\n\n\n\n\u25a0  return value\n\n\n\n\nfile_url\n: the local url in which the audio was stored\n\n\ndata_uri\n: base64 encoded data-uri\n\n\ncontent_type\n: \n\"audio/m4a\"\n (it's always this format)\n\n\n\n\nNormally you will want to pass the result immediately to a \n$network.upload\n call in order to upload it to a cloud storage.\n\n\n\u25a0 example\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Play audio\"\n    }, \n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Record Now\",\n          \"action\": {\n            \"type\": \"$audio.record\",\n            \"success\": {\n              \"type\": \"$util.alert\",\n              \"options\": {\n                \"title\": \"Audio stored at\",\n                \"description\": \"{{$jason.url}}\"\n              }\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\nAdditional Permissions\n\n\n\u26a0\ufe0f  There are certain device permissions you need to turn on in order to use some of these actions.\n\n\n\n\n\n\niOS Permission\n\n\nTo support background audio play, you need to turn on background audio mode. Here's how:\n\n\n\n\n[1] From XCode open \ninfo.plist\n file. Right click on the file and open as \nsource code\n.\n\n\n\n\n\n\n[2] Uncomment the UIBackgroundModes part\n\n\n\n\n\n\n\n\nAndroid Permissions\n\n\n[A] To support \n$audio.record\n on Android, you need to turn on \nandroid.permission.RECORD_AUDIO\n permission.\n\n\n[B] To support background audio play, you need to turn on \nandroid.permission.WAKE_LOCK\n permission.\n\n\n\n\nFirst open \nAndroidManifest.xml\n file from Android Stuido, and uncomment the relevant lines as shown below:\n\n\n\n\n\n\n\n\n\n\n\u2500\u2500 GEO \u2500\u2500\n\n\n$geo.get\n\n\nGet user's geolocation\n\n\n\u25a0  options\n\n\n\n\ndistance\n: accuracy distance in meters. By default it's 5000meters. The lower you go the more accurate it will be, but the longer it will take to retrieve the location.\n\n\n\n\n\u25a0  return value\n\n\na \ncoord\n object that contains \n(latitude),(longitude)\n format string\n\n\n{\n  \"coord\": \"12.342,22.343\"\n}\n\n\n\n\u25a0  example\n\n\nBelow example demonstrates various ways of utilizing \n$geo.get\n return values\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Right Here\",\n      \"description\": \"Searching anything nearby, links to yelp, google streetview and foursquare\"\n    },\n    \"body\": {\n      \"sections\": [\n        {\n          \"items\": [\n            {\n              \"type\": \"label\",\n              \"text\": \"Street View\",\n              \"style\": {\n                \"size\": \"40\",\n                \"font\": \"HelveticaNeue-CondensedBold\",\n                \"color\": \"#000000\"\n              },\n              \"action\": {\n                \"type\": \"$geo.get\",\n                \"options\": {\n                  \"distance\": \"1000\"\n                },\n                \"success\": {\n                  \"type\": \"$href\",\n                  \"options\": {\n                    \"url\": \"http://maps.google.com/maps?q=\nlayer=c\ncbll={{$jason.coord}}\ncbp=11,0,0,0,0\",\n                    \"view\": \"App\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"text\": \"Yelp\",\n              \"style\": {\n                \"size\": \"40\",\n                \"font\": \"HelveticaNeue-CondensedBold\",\n                \"color\": \"#000000\"\n              },\n              \"action\": {\n                \"type\": \"$geo.get\",\n                \"success\": {\n                  \"type\": \"$href\",\n                  \"options\": {\n                    \"url\": \"http://www.yelp.com/search?find_desc=food\ncll={{$jason.coord}}\nns=1\",\n                    \"view\": \"App\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"text\": \"Foursquare\",\n              \"style\": {\n                \"size\": \"40\",\n                \"font\": \"HelveticaNeue-CondensedBold\",\n                \"color\": \"#000000\"\n              },\n              \"action\": {\n                \"type\": \"$geo.get\",\n                \"success\": {\n                  \"type\": \"$href\",\n                  \"options\": {\n                    \"url\": \"https://foursquare.com/explore?ll={{$jason.coord}}\nmode=url\nq=Food\",\n                    \"view\": \"App\"\n                  }\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n\n\n\n\n\n\u25a0  Required Permissions\n\n\nOn iOS, \n$geo.get\n works out of the box so you don't need to do anything.\n\n\nBut on Android you need to set up a location permission.\n\n\nJust open up \nAndroidManifest.xml\n file from Android Studio, and uncomment the lines described below:\n\n\n\n\n\n\n\u2500\u2500 TIMER \u2500\u2500\n\n\n$timer.start\n\n\nStart a timer\n\n\n\u25a0 options\n\n\n\n\ninterval\n: timer interval in seconds\n\n\nname\n: name of the timer (used later to stop it)\n\n\nrepeats\n: if set to \n\"true\"\n, it's a perpetually repeating timer. Otherwise the timer gets called only once.\n\n\naction\n: the action to execute on every timer interval.\n\n\n\n\n\u25a0  return value\n\n\n\n\nnone\n\n\n\n\n\u25a0  example\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$timer.start\",\n          \"options\": {\n            \"interval\": \"1\",\n            \"name\": \"timer1\",\n            \"repeats\": \"true\",\n            \"action\": {\n              \"type\": \"$render\"\n            }\n          }\n        }\n      },\n      \"templates\": {\n        ...\n      }\n    }\n  }\n}\n\n\n\n\n\n$timer.stop\n\n\nStops a timer\n\n\n\u25a0 options\n\n\n\n\nname\n: the name of the timer to stop. You need to have \nstarted a timer with a name\n first. It will stop all running timers if the name is not specified.\n\n\n\n\n\u25a0 return value\n\n\n\n\nnone\n\n\n\n\n\u25a0 example\n\n\n{\n  \"$jason\": {\n    ...\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Stop the timer\",\n          \"action\": {\n            \"type\": \"$timer.stop\",\n            \"options\": {\n              \"name\": \"timer1\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\n\u2500\u2500 CONVERSION \u2500\u2500\n\n\nConvert other data formats into JSON format\n\n\n\n\n$convert.csv\n\n\nConvert CSV to JSON\n\n\n\u25a0 options\n\n\n\n\ndata\n: CSV string\n\n\n\n\n\u25a0 return value\n\n\n\n\nreturns the parsed JSON result.\n\n\nExpected format:\n must have the first row populated with attribute names. (See below for an example)\n\n\n\n\n\u25a0 example\n\n\nHere's an example CSV string returned from a network request.\n\n\nname, descrption, url, icon\ngithub, social coding, https://www.github.com, https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\nfacebook, Best place to build \n make an impact., https://www.facebook.com, https://www.facebook.com/images/fb_icon_325x325.png\nproduct hunt, Discover your next favorite thing, https://www.producthunt.com, https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg\n\n\n\nNotice how the first line is entirely made up of attribute names, and the rest rows are the actual data.\n\n\nWe will try to parse this CSV into JSON by using the following code:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"http://hastebin.com/raw/xiceheroku\",\n            \"data_type\": \"raw\"\n          },\n          \"success\": {\n            \"type\": \"$convert.csv\",\n            \"options\": {\n              \"data\": \"{{$jason}}\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\nThe end result:\n\n\n[\n  {\n    \"name\": \"github\",\n    \"description\": \"social coding\",\n    \"url\": \"https://www.github.com\",\n    \"icon\": \"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\"\n  },\n  {\n    \"name\": \"facebook\",\n    \"description\": \"Best place to build \n make an impact.\",\n    \"url\": \"https://www.facebook.com\",\n    \"icon\": \"https://www.facebook.com/images/fb_icon_325x325.png\"\n  },\n  {\n    \"name\": \"product hunt\",\n    \"description\": \"Discover your next favorite thing\",\n    \"url\": \"https://www.producthunt.com\",\n    \"icon\": \"https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg\"\n  }\n]\n\n\n\n\n\n$convert.rss\n\n\nConvert RSS to JSON. Built on top of \nnode-feedparser library\n\n\n\u25a0 options\n\n\n\n\ndata\n: RSS string\n\n\n\n\n\u25a0 return value\n\n\nreturns the parsed JSON result in the following format (\nYou can learn more about the spec here\n):\n\n\n\u25a0 example\n\n\nHere's an example where it makes a network request to \nhttp://feeds.gawker.com/lifehacker/full\n with \ndata_type\n of \nrss\n, converts it to JSON using \n$convert.rss\n, and then renders it.\n\n\n{\n  \"actions\": {\n    \"$load\": {\n      \"type\": \"$network.request\",\n      \"options\": {\n        \"url\": \"http://feeds.gawker.com/lifehacker/full\",\n        \"data_type\": \"rss\"\n      },\n      \"success\": {\n        \"type\": \"$convert.rss\",\n        \"options\": {\n          \"data\": \"{{$jason}}\"\n        },\n        \"success\": {\n          \"type\": \"$render\"\n        }\n      }\n    }\n  }\n}\n\n\n\nThe converted result right before \n$render\n will look something like this:\n\n\n{\n  \"$jason\": [\n    {\n      \"author\": \"Alan Henry\",\n      \"rss:pubdate\": {\n        \"@\": {},\n        \"#\": \"Thu, 9 Jun 2016 00:00:00 GMT\"\n      },\n      \"source\": {},\n      \"guid\": \"1780470292\",\n      \"link\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\",\n      \"title\": \"The Edge of the World Desktop\",\n      \"summary\": \"\nlt;p class=\\\"first-text\\\"\ngt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look. \nlt;/p\ngt;\",\n      \"image\": {},\n      \"rss:category\": [\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"featured desktop\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"desktops\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"wallpapers\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"customization\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"personalization\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"hud\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"rainmeter\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"themes\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"skins\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"windows\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"os x\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"mac\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"linux\"\n        }\n      ],\n      \"rss:link\": {\n        \"@\": {},\n        \"#\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\"\n      },\n      \"feedburner:origlink\": {\n        \"@\": {},\n        \"#\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\"\n      },\n      \"enclosures\": [],\n      \"origlink\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\",\n      \"pubDate\": \"2016-06-09T00:00:00.000Z\",\n      \"pubdate\": \"2016-06-09T00:00:00.000Z\",\n      \"rss:guid\": {\n        \"@\": {\n          \"ispermalink\": \"false\"\n        },\n        \"#\": \"1780470292\"\n      },\n      \"date\": \"2016-06-09T00:00:00.000Z\",\n      \"rss:title\": {\n        \"@\": {},\n        \"#\": \"The Edge of the World Desktop\"\n      },\n      \"meta\": {\n        \"#ns\": [\n          {\n            \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n          },\n          {\n            \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\"\n          },\n          {\n            \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\"\n          },\n          {\n            \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n          },\n          {\n            \"xmlns:atom\": \"http://www.w3.org/2005/Atom\"\n          },\n          {\n            \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\"\n          },\n          {\n            \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\"\n          },\n          {\n            \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\"\n          },\n          {\n            \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\"\n          }\n        ],\n        \"#version\": \"2.0\",\n        \"categories\": [],\n        \"language\": \"en\",\n        \"link\": \"http://lifehacker.com\",\n        \"title\": \"Lifehacker\",\n        \"rss:link\": {\n          \"@\": {},\n          \"#\": \"http://lifehacker.com\"\n        },\n        \"cloud\": {\n          \"type\": \"hub\",\n          \"href\": \"http://pubsubhubbub.appspot.com/\"\n        },\n        \"image\": {},\n        \"xmlurl\": \"http://www.lifehacker.com/index.xml\",\n        \"feedburner:info\": {\n          \"@\": {\n            \"uri\": \"lifehacker/full\"\n          }\n        },\n        \"feedburner:browserfriendly\": {\n          \"@\": {},\n          \"#\": \"This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site.\"\n        },\n        \"#xml\": {\n          \"version\": \"1.0\",\n          \"encoding\": \"UTF-8\"\n        },\n        \"@\": [\n          {\n            \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n          },\n          {\n            \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\"\n          },\n          {\n            \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\"\n          },\n          {\n            \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n          },\n          {\n            \"xmlns:atom\": \"http://www.w3.org/2005/Atom\"\n          },\n          {\n            \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\"\n          },\n          {\n            \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\"\n          }\n        ],\n        \"pubDate\": null,\n        \"pubdate\": null,\n        \"rss:language\": {\n          \"@\": {},\n          \"#\": \"en\"\n        },\n        \"date\": null,\n        \"generator\": null,\n        \"rss:title\": {\n          \"@\": {},\n          \"#\": \"Lifehacker\"\n        },\n        \"xmlUrl\": \"http://www.lifehacker.com/index.xml\",\n        \"favicon\": null,\n        \"rss:@\": {},\n        \"atom10:link\": [\n          {\n            \"@\": {\n              \"rel\": \"hub\",\n              \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\",\n              \"href\": \"http://pubsubhubbub.appspot.com/\"\n            }\n          },\n          {\n            \"@\": {\n              \"href\": \"http://www.lifehacker.com/index.xml\",\n              \"rel\": \"self\",\n              \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\",\n              \"type\": \"application/rss+xml\"\n            }\n          }\n        ],\n        \"rss:description\": {\n          \"@\": {},\n          \"#\": \"Tips and downloads for getting things done\"\n        },\n        \"copyright\": null,\n        \"#type\": \"rss\",\n        \"author\": null,\n        \"description\": \"Tips and downloads for getting things done\"\n      },\n      \"dc:creator\": {\n        \"@\": {},\n        \"#\": \"Alan Henry\"\n      },\n      \"rss:@\": {},\n      \"rss:description\": {\n        \"@\": {},\n        \"#\": \"\nlt;p class=\\\"first-text\\\"\ngt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look.\nlt;/p\ngt;\"\n      },\n      \"comments\": null,\n      \"categories\": [\n        \"featured desktop\",\n        \"desktops\",\n        \"wallpapers\",\n        \"customization\",\n        \"personalization\",\n        \"hud\",\n        \"rainmeter\",\n        \"themes\",\n        \"skins\",\n        \"windows\",\n        \"os x\",\n        \"mac\",\n        \"linux\"\n      ],\n      \"description\": \"\nlt;p class=\\\"first-text\\\"\ngt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look.\nlt;/p\ngt;\"\n    },\n    {\n      ...\n    }\n  ]\n}\n\n\n\nCheck out the full JSON for the RSS reader example\n\n\n\n\nEBF ADDITIONS\n\n\n\u2500\u2500 LOGOUT \u2500\u2500\n\n\nLogout user\n\n\n\n\n$logout\n\n\ndeletes and session data and returns to the native login screen if available or the initial jason screen\n\n\n\u25a0 example\n\n\n{\n    \"type\": \"button\",\n    \"text\": \"Logout\",\n    \"action\": {\n        \"type\": \"$logout\"\n    }\n}", 
            "title": "\u2605 Actions"
        }, 
        {
            "location": "/actions/#basics", 
            "text": "Expressing a view using JSON  is pretty straightforward.  However what makes Jasonette truly powerful is the ability to express  functions  that actually do something, entirely in JSON. We call it  action .  This could be anything from accessing the device features such as camera or addressbook, to making network requests. And you can compose them to carry out any sophisticated tasks. Not to mention being able to use inline Javascript within any JSON expression.", 
            "title": "Basics"
        }, 
        {
            "location": "/actions/#syntax", 
            "text": "Actions can take the following 5 attributes   type : Specify  action type . (note: THIS CANNOT BE A  TEMPLATE EXPRESSION  that needs to be evaluated. Use a static string.)  options : Arguments to be passed into the action (optional)  success : Another action to be called when the current action finishes. You can chain multiple actions to execute in sequence this way. (optional)  error : You can handle exceptions by attaching  error  to an action. (optional)   There are two ways of calling actions:    You can directly attach actions to UI elements  inline . In this case, the action will be executed when a user taps the element.  You can define an action under  actions registry  and trigger it by name. In this case you not only can attach actions to UI elements but also can trigger them based on system events or call them from anywhere.   First read through the explanation below to learn how to define actions inline.  And after that,  learn how to use  \"trigger\"  to trigger an action by name .", 
            "title": "Syntax"
        }, 
        {
            "location": "/actions/#examples-define-inline", 
            "text": "", 
            "title": "Examples - Define Inline"
        }, 
        {
            "location": "/actions/#network-request-and-then-render", 
            "text": "Make a network request and  $render  its content when it succeeds.  {\n  \"type\": \"label\",\n  \"text\": \"refresh\",\n  \"action\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/jYJ.json\"\n    },\n    \"success\": {\n      \"type\": \"$render\"\n    }\n  }\n}", 
            "title": "Network request and then render"
        }, 
        {
            "location": "/actions/#network-request-and-then-render-with-error-handling", 
            "text": "Same as above, except display a banner when the request fails.  {\n  \"type\": \"label\",\n  \"text\": \"refresh\",\n  \"action\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/jYJ.json\"\n    },\n    \"success\": {\n      \"type\": \"$render\"\n    },\n    \"error\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"Error\",\n        \"description\": \"Something went wrong.\"\n      }\n    }\n  }\n}", 
            "title": "Network request and then render, with error handling"
        }, 
        {
            "location": "/actions/#return-values", 
            "text": "You can access an action's return value by using the variable  $jason  from the next action (either the  success  or the  error  action).  For example,  $geo.get  action returns the geolocation of the current device in the following format:  {\n  \"coord\": \"51.5032510,-0.1278950\"\n}  Which means we can use this return value by accessing the  $jason  variable, using a  template  like this:  {\n  \"type\": \"$geo.get\",\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Your current coordinate\",\n      \"description\": \"{{$jason.coord}}\"\n    }\n  }\n}", 
            "title": "Return values"
        }, 
        {
            "location": "/actions/#what-kind-of-ui-elements-can-have-action-handlers", 
            "text": "action  can be attached to various UI elements to respond to touch, but not all.", 
            "title": "What kind of UI elements can have action handlers?"
        }, 
        {
            "location": "/actions/#can-be-attached-to", 
            "text": "menu -  $jason.body.header.menu  footer tabs -  $jason.body.footer.tabs  footer input -  $jason.body.footer.input.left  and  $jason.body.footer.input.right  Top level of a section item - Example:  $body.sections[0].items[0]  Layer item - Example -  $body.layers[0].items[0]  Button component - Normally you need to attach actions at at the item level as described above. But if you want to attach an action at a component level, you can use  \"type\": \"button .", 
            "title": "CAN be attached to:"
        }, 
        {
            "location": "/actions/#cannot-be-attached-to", 
            "text": "CANNOT attach actions to a label or image component unless it's at  item  level. Here's an example that DOESN'T work::  {\n   items : [{\n     type :  vertical ,\n     components : [{\n       type :  label ,\n       text :  touch me ,\n       action : { ... } \n    }]\n  }]\n}  label  and any other  non-button  type components do not respond to touch events directly.  This is why above code won't respond to touch, since it's attaching the action to the label.  However the following code WILL respond to touch:  {\n   items : [{\n     type :  label ,\n     text :  touch me ,\n     action : { ... } \n  }]\n}  This is because the  label  is at  item  level. Jasonette automatically wraps components with a layout when they're at  item  level.  Which means, internally above code is the same as:  {\n   items : [{\n     type :  vertical ,\n     action : { ... },\n     components : [{\n       type :  label ,\n       text :  touch me ,\n    }]\n  }]\n}  Notice how the action is tied to the  vetical  layout, which is at  item  level. So this will respond to touch.   So what if you really want to attach an action to a component, but the component is NOT at item level?  =  Use  buttons , like this:  {\n   items : [{\n     type :  vertical ,\n     components : [{\n       type :  button ,\n       url :  https://..... ,\n       action : { ... } \n    }]\n  }]\n}", 
            "title": "CANNOT be attached to:"
        }, 
        {
            "location": "/actions/#where-to-use-actions", 
            "text": "Actions are not just for UI components. It can be triggered in various ways, and used for various situations:   Handling user interaction  Handling another action's result  Handling system events   Let's go through each:", 
            "title": "Where to use actions?"
        }, 
        {
            "location": "/actions/#a-handling-user-interaction", 
            "text": "", 
            "title": "A. Handling user interaction"
        }, 
        {
            "location": "/actions/#user-touches-an-item", 
            "text": "Attach  action  attribute to  items ,  menu ,  layers , etc. to react to touch. (Read API documentation to see if a component supports  action  attribute)  In the example below, an  action  is attached to a  menu , so it gets triggered when user touches it.  {\n  \"head\": {\n    ...\n  },\n  \"body\": {\n    \"header\": {\n      \"menu\": {\n        \"text\": \"Press me\",\n         \"action\": {\n          \"type\": \"$util.alert\",\n          \"options\": {\n            \"title\": \"Good job!\",\n            \"description\": \"You know how to press a button!\"\n          }\n        } \n      }\n    },\n    ...\n  }\n}", 
            "title": "\u25a0 User touches an item"
        }, 
        {
            "location": "/actions/#user-changes-a-form-input-value", 
            "text": "There are some form input components such as  slider ,  search , etc. which trigger an action whenever its value changes. Just attach  action  attribute to handle that event.\nIn the example below, an  action  is attached to a  slider , so we can display a banner with the current value whenever user changes the value.  {\n  ...\n  {\n    \"type\": \"slider\",\n    \"name\": \"gauge\",\n     \"action\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"Current value\",\n        \"description\": \"{{$get.gauge}}\"\n      }\n    } \n  }\n  ...\n}", 
            "title": "\u25a0 User changes a form input value"
        }, 
        {
            "location": "/actions/#b-handling-another-actions-result", 
            "text": "All actions can have a  success  and an  error  attribute.   success  points to an action to be triggered after the current action finishes.  error  points to an action to be triggered if something goes wrong with the current action.   By using  success , we can chain multiple actions.  In the example below, a  $network.request  action gets called when a user touches the label, renders the result when it succeeds ( success ), and displays an error message when something goes wrong ( error ).  {\n  ...\n  {\n    \"type\": \"label\",\n    \"text\": \"Touch me\",\n    \"action\": {\n       \"type\": \"$network.request\",\n      \"options\": {\n        \"url\": \"https://www.jasonclient.org/items.json\"\n      }, \n       \"success\": {\n         \"type\": \"$render\" \n      },\n      \"error\": {\n         \"type\": \"$util.banner\",\n        \"options\": {\n          \"title\": \"Error\",\n          \"description\": \"Uh oh, something went wrong.\"\n        } \n      } \n    }\n  }\n  ...\n}", 
            "title": "B. Handling another action's result"
        }, 
        {
            "location": "/actions/#c-handling-system-events", 
            "text": "System events  are events automatically triggered by the system, instead of through user input.  You can attach any  action  to system events, such as  $load ,  $show ,  $foreground , etc.  Here's a brief example:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        },\n        \"$show\": {\n          \"type\": \"$reload\"\n        },\n        \"$foreground\": {\n          \"type\": \"$reload\"\n        }\n      }\n    },\n    ...\n  }\n}  Learn more about system events", 
            "title": "C. Handling system events"
        }, 
        {
            "location": "/actions/#triggering-actions", 
            "text": "When you define an action inline, these actions have no name. Therefore you cannot reuse them form elsewhere.  To be able to reuse actions, you need to register them under actions registry, and then trigger them by name.", 
            "title": "Triggering actions"
        }, 
        {
            "location": "/actions/#syntax_1", 
            "text": "To trigger an action, you can use the following syntax:   \"trigger\" : Trigger an action by name, registered under the actions registry. (note: THIS CANNOT BE A  TEMPLATE EXPRESSION  that needs to be evaluated. You must use a static string)  \"options\"  (optional):  same as inline actions  \"success\"  (optional): executed when the triggered action returnes via  $return.success  action  \"error\"  (optional): executed when the triggered action returns via  $return.error  action   They look similar to inline action definition except that you use  trigger  instead of  type .", 
            "title": "Syntax"
        }, 
        {
            "location": "/actions/#1-define-an-action-under-the-actions-registry", 
            "text": "First, you need to define the action inside  head.actions . In this case we name it  refresh_view :  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"refresh_view\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n  ...\n}", 
            "title": "1. Define an action under the actions registry"
        }, 
        {
            "location": "/actions/#2-trigger-it-by-name", 
            "text": "Second, to actually trigger it by name, just attach an action with a  trigger  attribute, like this:  {\n  \"type\": \"label\",\n  \"text\": \"Refresh\",\n  \"action\": {\n    \"trigger\": \"refresh_view\"\n  }\n}  Cool thing about this is, now you can trigger this action from anywhere in your code. You can trigger it manually from another action, or you could make it so that a system event automatically triggers the action.  Here's an example where  refresh_view  is triggered whenever the view comes into focus ( $show ) or comes back from background ( $foreground ):  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$show\": {\n          \"trigger\": \"refresh_view\"\n        },\n        \"$foreground\": {\n          \"trigger\": \"refresh_view\"\n        },\n        \"refresh_view\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n  ...\n}  Here's an example where an action triggers another action ( refresh  sets the cache, and then triggers  fetch ):  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"refresh\": {\n          \"type\": \"$cache.set\",\n          \"options\": {\n            \"items\": []\n          },\n          \"success\": {\n            \"trigger\": \"fetch\"\n          }\n        },\n        \"fetch\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n      },\n  ...\n}", 
            "title": "2. Trigger it by name"
        }, 
        {
            "location": "/actions/#3-return-from-subroutine-when-finished", 
            "text": "We saw from above that actions can trigger other actions.  But so far these action call chain examples have been one-way trip only, which means once an action triggers another action its life is over.  You can't do things like making a call and waiting for it to return with its result, and then continue on where it left off, using that value.  Let's look at the  refresh  example from above:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"refresh\": {\n          \"type\": \"$cache.set\",\n          \"options\": {\n            \"items\": []\n          },\n          \"success\": {\n            \"trigger\": \"fetch\"\n          }\n        },\n        \"fetch\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n        ...\n      }\n  ...\n}  The problem with this is each action does more than one thing:   refresh  resets the cache AND triggers fetch  fetch  makes a network request AND renders the result.   Maybe we want to add another action that resets the cache before doing something. Then, we need to add the same  $cache.set  action again.  Maybe we want to make the network request but do something else with the result instead of rendering.  It becomes difficult to reuse these actions since one action does more than one thing.  To solve this problem, we can break these actions out into self-contained modules so that:   One action only does one thing.  Each action ends by  returning its result instead of triggering another action  using  $return.success  or  $return.error  actions.   Here's the solution:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"reset\": {\n          \"type\": \"$cache.set\",\n          \"options\": {\n            \"items\": []\n          },\n          \"success\": {\n            \"type\": \"$return.success\"\n          }\n        },\n        \"refresh\": {\n          \"trigger\": \"reset\",\n          \"success\": {\n            \"trigger\": \"fetch\",\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          }\n        },\n        \"fetch\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonbase.com/things/jYJ.json\"\n          },\n          \"success\": {\n            \"type\": \"$return.success\"\n          }\n        }\n        ...\n      }\n  ...\n}  Here, the  reset  action only resets the cache.  And  fetch  action only makes a network request and returns its result. (No $render)  Lastly the  refresh  action functions as the main program that triggers each action one after another (triggers  reset , then triggers  fetch , and finally executes  $render )", 
            "title": "3. Return from subroutine when finished"
        }, 
        {
            "location": "/actions/#when-to-use-trigger-vs-defining-actions-inline", 
            "text": "In  most cases  it's recommended that you define your actions under  actions registry  and trigger them using  \"trigger\" .  For example, instead of:  {\n  \"$jason\": {\n    \"head\": {\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"item 1\",\n          \"action\": {\n            \"type\": \"$util.banner\",\n            \"options\": {\n              \"title\": \"Banner\",\n              \"description\": \"Pressed item\"\n            }\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 2\",\n          \"action\": {\n            \"type\": \"$util.banner\",\n            \"options\": {\n              \"title\": \"Banner\",\n              \"description\": \"Pressed item\"\n            }\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 3\",\n          \"action\": {\n            \"type\": \"$util.banner\",\n            \"options\": {\n              \"title\": \"Banner\",\n              \"description\": \"Pressed item\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}  You may want to define the action inside  head.actions , like this:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"show_banner\": {\n          \"type\": \"$util.banner\",\n          \"options\": {\n            \"title\": \"Banner\",\n            \"description\": \"Pressed item\"\n          }\n        }\n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"item 1\",\n          \"action\": {\n            \"trigger\": \"show_banner\"\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 2\",\n          \"action\": {\n            \"trigger\": \"show_banner\"\n          }\n        }, {\n          \"type\": \"label\",\n          \"text\": \"item 3\",\n          \"action\": {\n            \"trigger\": \"show_banner\"\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "When to use trigger vs. defining actions inline"
        }, 
        {
            "location": "/actions/#benefit-1", 
            "text": "As you can see above, using  trigger  lets you define a single action once and reuse it from multiple places in your view. It removes redundant code.", 
            "title": "Benefit 1"
        }, 
        {
            "location": "/actions/#benefit-2", 
            "text": "When you define an action inline, its behavior is fixed. For example, the  show_banner  action example above only does one thing: It displays a banner that says \"Pressed item\".  However in many cases we want to write one action and reuse them for various purposes. Maybe we want to display a banner that says \"Pressed item 1\", or \"Pressed item 2\".  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"show_banner\": {\n          \"type\": \"$util.banner\",\n          \"options\": {\n            \"title\": \"Banner\",\n            \"description\": \"Pressed item {{$jason.item}}\"\n          }\n        }\n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"item 1\",\n          \"action\": {\n            \"trigger\": \"show_banner\",\n            \"options\": {\n              \"item\": \"1\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "Benefit 2"
        }, 
        {
            "location": "/actions/#declaring-actions", 
            "text": "There are two ways you can call actions:  1. Inline action  Attach  action  attributes directly to UI elements  2. Action registry  Define actions inside  $jason.head.actions  and call them by name", 
            "title": "Declaring actions"
        }, 
        {
            "location": "/actions/#inline-action", 
            "text": "Inline actions are basically what we've been talking about so far. You directly attach an  action  to events, UI components, and another action. Here's an example:  {\n  ...\n  \"type\": \"label\",\n  \"action\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Hello\",\n      \"description\": \"World\"\n    }\n  }\n  ...\n}", 
            "title": "Inline Action"
        }, 
        {
            "location": "/actions/#action-registry", 
            "text": "We can define an action once and refer to them whenever we need to, instead of writing one for every situation.", 
            "title": "Action Registry"
        }, 
        {
            "location": "/actions/#comparison-with-inline-actions", 
            "text": "For example, here's an  inline action  example. We display multiple  items , and each item has the same  action  attribute content.  {\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n           \"action\": {\n            \"type\": \"$network.request\",\n            \"options\": {\n              \"url\": \"https://jasonclient.org/submit\",\n              \"method\": \"POST\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          } \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n           \"action\": {\n            \"type\": \"$network.request\",\n            \"options\": {\n              \"url\": \"https://jasonclient.org/submit\",\n              \"method\": \"POST\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          } \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n           \"action\": {\n            \"type\": \"$network.request\",\n            \"options\": {\n              \"url\": \"https://jasonclient.org/submit\",\n              \"method\": \"POST\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          } \n        }]\n      }]\n    }\n  }\n}  Below we have the same example, but using  $jason.head.actions  instead of re-defining the same action every time inline:  {\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n         \"submit_item\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonclient.org/submit\",\n            \"method\": \"POST\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        } \n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\",\n           \"action\": {\n            \"trigger\": \"submit_item\"\n          } \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\",\n           \"action\": {\n            \"trigger\": \"submit_item\"\n          } \n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\",\n           \"action\": {\n            \"trigger\": \"submit_item\"\n          } \n        }]\n      }]\n    }\n  }\n}", 
            "title": "\u25a0   Comparison with inline actions"
        }, 
        {
            "location": "/actions/#heres-whats-going-on", 
            "text": "Declare an action under  $jason.head.actions  (in this case we've named it  submit_item ).  Then we  trigger  the action from anywhere using the name.", 
            "title": "Here's what's going on:"
        }, 
        {
            "location": "/actions/#system-events", 
            "text": "Some actions are automatically triggered by the system when a certain event occurs. When you wish to take advantage of these, simply add them to  actions . They are:", 
            "title": "\u25a0   System events"
        }, 
        {
            "location": "/actions/#1-load", 
            "text": "$load  gets called once automatically when the view loads for the first time.  Here's an example where we make a network request when the view loads, and then render the response using the template.  {\n  ...\n  \"$load\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n    \"url\": \"http://jasonclient.org/req.json\"\n    },\n    \"success\": {\n    \"type\": \"$render\"\n    }\n  }\n  ...\n}", 
            "title": "1. $load"
        }, 
        {
            "location": "/actions/#2-show", 
            "text": "$show  gets called automatically whenever the view appears. For example when coming back from a modal view, coming back from its next view via back button, etc.  Here's an example  {\n  ...\n  \"$show\": {\n    \"type\": \"$reload\"\n  },\n  ...\n}", 
            "title": "2. $show"
        }, 
        {
            "location": "/actions/#3-foreground", 
            "text": "$foreground  is called automatically whenever the app comes back from the background state.  {\n  ...\n  \"$foreground\": {\n    \"type\": \"$reload\"\n  },\n  ...\n}", 
            "title": "3. $foreground"
        }, 
        {
            "location": "/actions/#4-pull", 
            "text": "$pull  gets called whenever user makes a pull to refresh action  {\n  ...\n  \"$pull\": {\n    \"type\": \"$reload\"\n  },\n  ...\n}", 
            "title": "4. $pull"
        }, 
        {
            "location": "/actions/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/actions/#require", 
            "text": "", 
            "title": "\u2500\u2500 REQUIRE \u2500\u2500"
        }, 
        {
            "location": "/actions/#require_1", 
            "text": "The  $require  action imports remote JSON files in parallel.  {\n  \"type\": \"$require\",\n  \"options\": {\n    \"profiles\": [\"https://...\", \"https://...\", \"https://\"],\n    \"items\": [\"https://...\", \"https://...\", \"https://...\"]\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}  It works similar to  $network.request  but with a few differences:   It can fetch multiple remote JSON files in parallel.  It is only for making simple  GET  requests. No POST/PUT/DELETE requests, etc.", 
            "title": "$require"
        }, 
        {
            "location": "/actions/#options", 
            "text": "The  options  object defines what the return value should look like. For example, the following  $require  action would fetch the contents of  https://hello.world/1.json  and then attach it to the  profile  attribute.  {\n  \"type\": \"$require\",\n  \"options\": {\n    \"profile\": \"https://hello.world/1.json\"\n  }\n}  When you chain this action with another action, you should be able to access the contents of  https://hello.world/1.json  via  {{$jason.profile}} .  The value in the key/value pair can take the form of:    a single url:  \"profile\": \"https://...\"    an array of urls:  \"profiles\": [\"https://...\", \"https://...\", \"https://...\"]", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value", 
            "text": "returns the constructed  options  object.  For example, let's say  https://blahblah.blah/1.json  and  https://blahblah.blah/2.json  each contained the following JSON files respectively:  {\n  \"items\": [\"abc\", \"def\", \"ghi\"]\n}\n\n{\n  \"items\": [\"cba\", \"fed\", \"ihg\"]\n}  We can fetch them in parallel like this:  {\n  \"type\": \"$require\",\n  \"options\": {\n    \"items1\": \"https://blahblah.blah/1.json\",\n    \"items2\": \"https://blahblah.blah/2.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}  As a result, when we are ready to  $render , the  $jason  value will be:  {\n  \"items1\": {\n    \"items\": [\"abc\", \"def\", \"ghi\"]\n  },\n  \"items2\": {\n    \"items\": [\"cba\", \"fed\", \"ihg\"]\n  }\n}", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#note", 
            "text": "Unlike  $set  or  $cache.set , the  $require  action on its own doesn't persist the data in any way.  So if you want to persist them to a local variable or a cache variable, you will need to chain the result to these actions and take care of assignment that way. Here's an example:  {\n  \"type\": \"$require\",\n  \"options\": {\n    \"profiles\": [\"https://...\", \"https://...\", \"https://\"]\n  },\n  \"success\": {\n    \"type\": \"$set\",\n    \"options\": {\n      \"profiles\": \"{{$jason.profiles}}\"\n    }\n  }\n}", 
            "title": "\u25a0 note"
        }, 
        {
            "location": "/actions/#functional", 
            "text": "Just like functions in any other programming language, you can call an action from an action, wait for it to return, and use the return value to continue where it left off.", 
            "title": "\u2500\u2500 FUNCTIONAL \u2500\u2500"
        }, 
        {
            "location": "/actions/#lambda", 
            "text": "Call another action by name (This is how  trigger  is implemented internally)  {\n  \"type\": \"$lambda\",\n  \"options\": {\n    \"name\": \"refresh\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    }\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Error\",\n      \"description\": \"Something went wrong\"\n    }\n  }\n}  Above code is the same as:  {\n  \"trigger\": \"refresh\",\n  \"options\": {\n    \"url\": \"https://jasonbase.com/things/3nf.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Error\",\n      \"description\": \"Something went wrong\"\n    }\n  }\n}  In most cases you may want to use  trigger  but sometimes it's useful to use  $lambda  directly, for example if you want to dynamically trigger different actions. Example:  {\n  \"type\": \"$lambda\",\n  \"options\": {\n    \"name\": \"{{action_name}}\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    }\n  },\n  ...\n}", 
            "title": "$lambda"
        }, 
        {
            "location": "/actions/#options_1", 
            "text": "name: the name of the action to trigger, registered  under actions registry  options:  options object  to pass to the next action", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_1", 
            "text": "Whatever the triggered action returns via  $return.success  or  $return.error", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#returnsuccess", 
            "text": "Unless you explicitly call  $return.success  or  $return.error , all triggered actions terminate when they reach the end of the call chain.  To return to the action which called the current action with a  success  state, we need to use  $return.success .  Then the caller action will resume where it left off and keep executing its  success  action.", 
            "title": "$return.success"
        }, 
        {
            "location": "/actions/#options_2", 
            "text": "The return value to pass back to the caller action.  If not specified, it automatically returns the current  $jason  value", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#no-success-or-error-of-its-own", 
            "text": "none  : Since  $return.success  is an action solely designed for returning the control back to the caller action,  $return.success  itself does not have  success  or  error  actions.", 
            "title": "\u25a0 no success or error of its own"
        }, 
        {
            "location": "/actions/#example", 
            "text": "In the example below, the  display_banner  triggers  fetch , and then displays a banner using the return value  $jason .  Notice how the  $lambda  action's  success  takes over after the  fetch  action returns via  $return.success .  {\n  \"display_banner\": {\n    \"type\": \"$lambda\",\n    \"options\": {\n      \"name\": \"fetch\"\n    },\n    \"success\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"The number of items:\",\n        \"description\": \"{{$jason.items.length}}\"\n      }\n    }\n  },\n  \"fetch\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    },\n    \"success\": {\n      \"type\": \"$return.success\",\n      \"options\": {\n        \"items\": \"{{$jason}}\"\n      }\n    }\n  }\n}  Again, this is the same as using  trigger :  {\n  \"display_banner\": {\n    \"trigger\": \"return_homer_simpson\",\n    \"success\": {\n      \"type\": \"$util.banner\",\n      \"options\": {\n        \"title\": \"The number of items:\",\n        \"description\": \"{{$jason.items.length}}\"\n      }\n    }\n  },\n  \"fetch\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://jasonbase.com/things/3nf.json\"\n    },\n    \"success\": {\n      \"type\": \"$return.success\",\n      \"options\": {\n        \"items\": \"{{$jason}}\"\n      }\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#returnerror", 
            "text": "Pretty much the same as  $return.success , except that it returns the control back to the caller action's  error  action.", 
            "title": "$return.error"
        }, 
        {
            "location": "/actions/#view", 
            "text": "Actions related to drawing views", 
            "title": "\u2500\u2500\u2500\u2500 VIEW \u2500\u2500\u2500\u2500"
        }, 
        {
            "location": "/actions/#reload", 
            "text": "Refreshes the view completely by re-fetching content from the current URL.  {\n  \"items\": [{\n    \"type\": \"label\",\n    \"text\": \"Refresh\",\n    \"action\": {\n      \"type\": \"$reload\"\n    }\n  }]\n}", 
            "title": "$reload"
        }, 
        {
            "location": "/actions/#options_3", 
            "text": "none", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_2", 
            "text": "none   This will reload the page when a user taps on the  item .", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#render", 
            "text": "Renders a  template  with data", 
            "title": "$render"
        }, 
        {
            "location": "/actions/#options_4", 
            "text": "data : Data to render. If not specified, it's the  $jason  value at the point  $render  was called.  template :  Template  name to render. If not specified, it will look for  $jason.head.templates.body  type :  \"html\"  |  \"json\"  (Default is  json . See  html templating  to learn more about how to render an HTML string natively using Jason)", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_3", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_1", 
            "text": "", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#rendering-return-value-from-the-previous-action", 
            "text": "By default  $render  renders the data returned from its previous action.   {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://jasonbase.com/things/gbe.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}  For example, let's say the network request returns the following result:  {\n    \"name\": \"Mr. Fisherman\",\n    \"image\": \"http://i.giphy.com/OmK8lulOMQ9XO.gif\",\n    \"status\": \"Busy fishing on the iPhone\"\n}  All Jasonette actions store their return values under  $jason  object when they return.  So we can access above value using the  $jason  variable.   Here's how we would write the  body  template:  {\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [{\n              \"type\": \"image\",\n              \"url\": \"{{$jason.image}}\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"{{$jason.text}}\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"{{$jason.status}}\"\n            }]\n          }]\n        }\n      ...\n  }\n}", 
            "title": "Rendering return value from the previous action"
        }, 
        {
            "location": "/actions/#specifying-data-when-rendering", 
            "text": "In most cases you will use the above method--rendering data passed in as a return value from the previous action.   However, you can also use  $render  as standalone, by manually specifying its data, like this (You rarely need to use this method):  {\n  \"type\": \"$render\",\n  \"options\": {\n    \"data\": [{\n      \"name\": \"Ethan\",\n      \"id\": \"1\"\n    }, {\n      \"name\": \"Jason\",\n      \"id\": \"2\"\n    }, {\n      \"name\": \"Jasonette\",\n      \"id\": \"3\"\n    }]\n  }\n}", 
            "title": "Specifying data when rendering"
        }, 
        {
            "location": "/actions/#rendering-the-body-template", 
            "text": "In most cases you will use  $render  without manually specifying the template, because it will assume you're rendering the  body  template. For example, a typical  $render  looks like this:  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://jasonclient.com/req.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}  If no  template  option is specified,  $render  will look for a  body  template inside  $jason.head.templates  and use that to render the data. For example, from the following JSON,  {\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason}}\": {\n                \"type\": \"label\",\n                \"text\": \"{{text}}\"\n              }\n            }\n          }]\n        }\n      ...\n  }\n}  When  $render  runs, it will take the JSON markup inside  $jason.head.templates.body , render it using the data, onto the view.", 
            "title": "Rendering the body template"
        }, 
        {
            "location": "/actions/#manually-specifying-the-template-to-render", 
            "text": "But sometimes you can also specify the template name. For example, we may want to render a template named  empty  instead of the default  body  template:  {\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          ....\n        },\n        \"empty_template\": {\n          \"sections\": [{\n            \"items\": [{\n              \"type\": \"label\",\n              \"text\": \"Empty view\"\n            }]\n          }]\n        }\n      ...\n  }\n}  In this case we could pass  {\"template\": \"empty_template\"}  as an option, like this:  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://jasonclient.com/req.json\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$render\",\n    \"options\": {\n      \"template\": \"empty_template\"\n    }\n  }\n}", 
            "title": "Manually specifying the template to render"
        }, 
        {
            "location": "/actions/#how-is-render-different-from-reload", 
            "text": "$render  redraws an existing template you already downloaded, using dynamic data.  $reload  completely refreshes the current URL. Here's an example scenario:   Jason view loads and fetches a JSON markup from the server ( main.json )  main.json  makes an API request to Twitter to fetch Tweets. (https://api.twitter.com/1.1/statuses/user_timeline.json)  Then it renders the result using its  body  template, which is under  $jason.head.templates.body  in  main.json .  From this point on, calling  $render  simply takes the  $jason.head.templates.body  we have in memory, and renders whatever data we pass in.  However calling  $reload  will make a full refresh, going back to step 1.", 
            "title": "How is $render different from $reload?"
        }, 
        {
            "location": "/actions/#conclusion", 
            "text": "In most cases, you call  $render  at the end of an action call chain, rendering the  $jason  return value from its preceding action.  Also, in most cases  $render  is used without specifying  template  or  data  options.  Just don't forget to have a template under  $jason.head.templates.body , since  $render  will automatically render that.    Also, remember that you can access the return value using  $jason  from the template.", 
            "title": "Conclusion"
        }, 
        {
            "location": "/actions/#snapshot", 
            "text": "Takes a snapshot of the currently visible screen", 
            "title": "$snapshot"
        }, 
        {
            "location": "/actions/#options_5", 
            "text": "none", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_4", 
            "text": "The return value is in this format:  {\n  \"data\": \"....\",\n  \"data_uri\": \"....\",\n  \"content_type\": \"image/jpeg\",\n}   Returns the snapshot as raw data under  data  attribute.  Also returns  data_uri  attribute, which contains the  data-uri  You can utilize the  data  by passing it to another action using  success  The  content_type  is  \"image/jpeg\"", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_2", 
            "text": "Take a snapshot and share  {\n  \"type\": \"$snapshot\",\n  \"success\": {\n    \"type\": \"$util.share\",\n    \"options\": {\n      \"items\": [\n        {\n          \"type\": \"image\",\n          \"data\": \"{{$jason.data}}\"\n        }\n      ]\n    }\n  }\n}     Share sheet  SMS example", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#href", 
            "text": "An action version of  href . Works the same way, but just another way to invoke href.  Use this when a component doesn't support  href  attribute directly but supports an  action .  Sometimes it's useful when you want to invoke  href  without displaying a disclosure indicator. (href comes with a disclosure indicator by default)", 
            "title": "$href"
        }, 
        {
            "location": "/actions/#options_6", 
            "text": "It's the same set of attributes as  href  since it simply invokes the href when triggered.   url  the url to transition to    view  can be  \"web\"  |  \"app\"  |  \"jason\"  (default)    options  Works the same way as the  options object for href      transition  can be  \"modal\"  |  \"fullscreen\"  |  \"push\"  (default)", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_5", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example-1", 
            "text": "{\n   \"type\": \"label\",\n   \"text\": \"trigger href\",\n   \"action\": {\n     \"type\": \"$href\",\n     \"options\": {\n       \"url\": \"...\",\n       \"transition\": \"...\",\n       \"view\": \"...\"\n     }\n   }\n}  is same as:  {\n   \"type\": \"label\",\n   \"text\": \"trigger href\",\n   \"href\": {\n     \"url\": \"...\",\n     \"transition\": \"...\",\n     \"view\": \"...\"\n   }\n}  The only difference is: in case of  items  the second option displays a disclosure indicator since we're directly using  href", 
            "title": "\u25a0 example 1"
        }, 
        {
            "location": "/actions/#example-2", 
            "text": "This example opens Instagram app using its URL scheme  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Take a photo on instagram\"\n    },\n    \"body\": {\n      \"sections\": [\n        {\n          \"items\": [\n            {\n              \"type\": \"label\",\n              \"text\": \"Take a photo on Instagram\",\n              \"action\": {\n                \"type\": \"$href\",\n                \"options\": {\n                  \"url\": \"instagram://camera\",\n                  \"view\": \"app\"\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}", 
            "title": "\u25a0 example 2"
        }, 
        {
            "location": "/actions/#close", 
            "text": "Close a modal (works when the currently view is a modal)", 
            "title": "$close"
        }, 
        {
            "location": "/actions/#options_7", 
            "text": "none", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_6", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#back", 
            "text": "Transition one step back from the current view   If the current view is a modal, it closes the current view  Otherwise it slides back to the previous view", 
            "title": "$back"
        }, 
        {
            "location": "/actions/#options_8", 
            "text": "none", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_7", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#network", 
            "text": "", 
            "title": "\u2500\u2500 NETWORK \u2500\u2500"
        }, 
        {
            "location": "/actions/#networkrequest", 
            "text": "Make GET/POST/PUT/DELETE network requests", 
            "title": "$network.request"
        }, 
        {
            "location": "/actions/#options_9", 
            "text": "url : The url to access.  method :  \"get\"  |  \"post\"  |  \"put\"  |  \"delete\" .  data : Parameters to send along with the url (optional)  header : Headers to attach to every request if any (optional)  data_type : Specifies how the fetched response will be processed. Can be  json ,  html ,  rss , or  raw .  json  assumes that the return value will be in JSON format, whereas  raw  expects a plain text. You can use  raw  type when fetching a plain text or CSV.  html  is for fetching HTML content and especially required when you need to utilize HTML requests associated with cookies/sessions.  rss  is used to fetch RSS. The default is  json .  content_type : Specifies which format the parameters will be sent as. By default it's sent as a form object, but in case you specify  {\"content_type\": \"json\"}  the data will be submitted as a JSON string.", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_8", 
            "text": "Whatever the server returns", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#examples", 
            "text": "", 
            "title": "\u25a0 examples"
        }, 
        {
            "location": "/actions/#example-1-simple-json-get-request", 
            "text": "Here's a simple example of GET request, fetching JSON. We don't need to specify  {\"type\": \"get\"}  here since the default type is  \"get\"  {\n    \"type\": \"$network.request\",\n    \"options\": {\n        \"url\": \"http://plasticfm.herokuapp.com/things/3.json\"\n    },\n    \"success\": {\n        \"type\": \"$render\"\n    }\n}", 
            "title": "Example 1. Simple JSON GET request"
        }, 
        {
            "location": "/actions/#example-2-more-complex-json-requests", 
            "text": "This time we're going to make a POST request, with all the data and header  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://www.jasonbase.com/messages.json\",\n    \"method\": \"post\",\n    \"data\": {\n      \"user_id\": \"fI9\",\n      \"message\": \"Hello there\"\n    },\n    \"header\": {\n      \"auth_token\": \"fnekfla98dls9sNFK0nf3\"\n    }\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  },\n  \"error\": {\n    \"type\": \"$util.alert\",\n    \"options\": {\n      \"title\": \"Error\",\n      \"description\": \"Uh oh, something went wrong\"\n    }\n  }\n}", 
            "title": "Example 2. More complex JSON requests"
        }, 
        {
            "location": "/actions/#example-3-html-get-request", 
            "text": "You can also make HTML type requests. Here's a request with  html  data_type.  {\n    \"type\": \"$network.request\",\n    \"options\": {\n        \"url\": \"https://news.ycombinator.com/newest\",\n        \"dataType\": \"html\"\n    },\n    \"success\": {\n        \"type\": \"$render\",\n        \"options\": {\n            \"type\": \"html\"\n        }\n    }\n}  It fetches the url as  html  type, and then renders it using the  html  type parser. See templates for more details on how to render HTML content in Jasonette.", 
            "title": "Example 3. HTML GET request"
        }, 
        {
            "location": "/actions/#example-4-html-post-request-with-cookies", 
            "text": "Dealing with cookies is simple. All you need to do is make the request to create a session. Jason will automatically store the returned cookie, and then attach it to all subsequent requests.\nHere's an example of signing into a website by making an HTML data_type  $network.request  call:  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://news.ycombinator.com/login\",\n    \"method\": \"post\",\n    \"data\": {\n      \"acct\": \"{{$get.username}}\",\n      \"pw\": \"{{$get.password}}\"\n    },\n    \"data_type\": \"html\"\n  },\n  \"success\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://news.ycombinator.com/saved?id={{$get.username}}\",\n      \"data_type\": \"html\"\n    },\n    \"success\": {\n      \"type\": \"$render\",\n      \"options\": {\n        \"type\": \"html\"\n      }\n    }\n  }\n}   It first signs into the site by making a  POST  request of  {\"data_type\": \"html\"} . Then it stores the cookie returned from the server.  Once the login succeeds, it makes a  GET  request of  {\"data_type\": \"html\"}  to an actual content API. The cookie from the previous step is automatically applied to the request.", 
            "title": "Example 4. HTML POST request with cookies"
        }, 
        {
            "location": "/actions/#networkupload", 
            "text": "Upload data to cloud providers. Currently supports S3, but  feel free to extend", 
            "title": "$network.upload"
        }, 
        {
            "location": "/actions/#options_10", 
            "text": "type :  \"s3\"  (Currently only supports s3)  bucket : s3 bucket name  path : the s3 path to upload the file  sign_url : To upload files to s3, you need to acquire a signed url from S3 first, and then upload it to that URL.", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_9", 
            "text": "file_name : a randomly generated filename. When  $network.upload  is called, it automatically generates a random, hashed filename to ensure uniqueness, and then stores the file onto the cloud provider with that name.  We need this attribute to keep track of the data we've just uploaded. For example, we may want to store the filename somewhere so we can access this file later.", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_3", 
            "text": "This example takes a photo and uploads to S3.  {\n  \"type\": \"$media.camera\",\n  \"options\": {\n    \"quality\": \"0.4\"\n  },\n  \"success\": {\n    \"type\": \"$network.upload\",\n    \"options\": {\n      \"type\": \"s3\",\n      \"bucket\": \"fm.ethan.jason\",\n      \"data\": \"{{$jason.data}}\",\n      \"path\": \"\",\n      \"sign_url\": \"https://imagejason.herokuapp.com/sign_url\"\n    },\n    \"success\": {\n      \"type\": \"$network.request\",\n      \"options\": {\n        \"url\": \"https://imagejason.herokuapp.com/post\",\n        \"method\": \"post\",\n        \"data\": {\n          \"bucket\": \"fm.ethan.jason\",\n          \"path\": \"/\",\n          \"filename\": \"{{$jason.filename}}\"\n        }\n      },\n      \"success\": {\n        \"type\": \"$reload\"\n      }\n    }\n  }\n}  Here's what's going on above:", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#1-the-client-takes-a-photo-using-the-mediacamera-action-and-passes-the-raw-data-to-networkupload-as-jason", 
            "text": "", 
            "title": "1. The client takes a photo using the $media.camera action and passes the raw data to $network.upload as $jason."
        }, 
        {
            "location": "/actions/#2-the-networkupload-first-looks-at-optionssign_url-and-makes-a-request-to-get-the-signed-url", 
            "text": "", 
            "title": "2. The $network.upload first looks at options.sign_url and makes a request to get the signed url."
        }, 
        {
            "location": "/actions/#3-the-server-should-return-a-signed-url-for-s3", 
            "text": "The  sign_url  attribute is the URL to your server, and your server should generate a signed url and return the result in the following format:  { \"$jason\": \"https://s3.amazonaws.com/...../...?AWSAccessKeyId=..... Expires=..... Signature=.....\"}  See the full server side code  to learn how to generate signed urls.", 
            "title": "3. The server should return a signed url for S3."
        }, 
        {
            "location": "/actions/#4-the-client-then-uploads-the-content-passed-in-as-data-to-the-just-generated-signed-url-using-a-randomly-generated-filename", 
            "text": "", 
            "title": "4. The client then uploads the content passed in as data to the just generated signed url, using a randomly generated filename."
        }, 
        {
            "location": "/actions/#5-once-the-upload-finishes-the-networkupload-returns-the-filename-generated-from-step-3", 
            "text": "", 
            "title": "5. Once the upload finishes, the $network.upload returns the filename generated from step 3."
        }, 
        {
            "location": "/actions/#6-then-it-stores-the-filename-to-our-server-by-making-a-post-networkrequest-to-httpsimagejasonherokuappcompost", 
            "text": "Check out the full code on Github:  s3-upload-example", 
            "title": "6. Then it stores the filename to our server by making a POST $network.request to https://imagejason.herokuapp.com/post"
        }, 
        {
            "location": "/actions/#session", 
            "text": "Check out a functional demo app with backend server, with user accounts  session-example", 
            "title": "\u2500\u2500 SESSION \u2500\u2500"
        }, 
        {
            "location": "/actions/#sessionset", 
            "text": "$session.set  takes care of  token authentication  to authenticate into any mobile API.  You need to call  $session.set   after  a  $network.request  action to an authentication endpoint, which returns an authentication token.  Sessions are tied to domain, which means as long as you authenticate with a domain, all other URLs under the same domain will use the same token therefore you won't need to re-authenticate for every URL under the same domain.  For cookie based HTML authentication, see  Example 4 from  $network.request  above .", 
            "title": "$session.set"
        }, 
        {
            "location": "/actions/#options_11", 
            "text": "domain : the domain to set the session for (example: \"jasonbase.com\")  header : headers to attach to every future  $network.request  to the specified domain.  body : body parameters to attach to every future  $network.request  to the specified domain.", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_10", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_4", 
            "text": "Here's an example:  \"action\": {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://sessionjason.herokuapp.com/users/sign_in.json\",\n    \"method\": \"post\",\n    \"data\": {\n      \"user[email]\": \"{{$get.email}}\",\n      \"user[password]\": \"{{$get.password}}\"\n    }\n  },\n  \"success\": {\n    \"type\": \"$session.set\",\n    \"options\": {\n      \"domain\": \"sessionjason.herokuapp.com\",\n      \"header\": {\n        \"X-User-Email\": \"{{$jason.email}}\",\n        \"X-User-Token\": \"{{$jason.authentication_token}}\"\n      }\n    },\n    \"success\": {\n      \"type\": \"$href\",\n      \"options\": {\n        \"url\": \"https://sessionjason.herokuapp.com/posts.json\",\n        \"transition\": \"replace\"\n      }\n    }\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Enter credentials\",\n      \"description\": \"Please enter both email and password\"\n    }\n  }\n}  Let's walk through each step.  The first action is  $network.request . It makes a POST request to  https://sessionjason.herokuapp.com/users/sign_in.json , to which the server returns the following JSON as a response:  {\n  \"id\":2,\n  \"email\":\"ethan@ethan.fm\",\n  \"created_at\":\"2016-10-14T22:55:00.664Z\",\n  \"updated_at\":\"2016-10-15T05:22:41.730Z\",\n  \"authentication_token\":\"fnekz4hf7ghw95m6ks0rf01j\"\n}  Next, we proceed to the next action, which is  $session.set . Here we use the return value from the  $network.request  and set the header.   This stores the  header  object for the specified  domain  (session.herokuapp.com), and this stored header will be attached to all future  $network.request  to this domain. The header to be stored will look like this:  {\n  \"header\": {\n    \"X-User-Email\": \"ethan@ethan.fm\",\n    \"X-User-Token\": \"fnekz4hf7ghw95m6ks0rf01j\"\n  }\n}   After the  $session.set , it goes to the next action  $href . This transitions to  https://sessionjason.herokuapp.com/posts.json .   This time, the network request will automatically attach the stored header to the request.   The server will recognize the authentication token and respond with the actual  posts.json .", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#sessionreset", 
            "text": "This action lets you clear sessions for a specified domain. Can be used for both  token authentication  and  web authentication via cookies   For token authentication, it clears your headers and body parameters objects tied to the domain, created through  $session.set .  For web requests (html), it clears your cookie tied to the domain, created through  html  type  $network.request ,  as described here .", 
            "title": "$session.reset"
        }, 
        {
            "location": "/actions/#options_12", 
            "text": "url : The url from which to sign out.  domain : The domain from which to sign out (used for APIs)  data : Parameters to send along with the url (optional)  type :  \"html\"  |  \"json\"  (Default is \"json\")", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#examples_1", 
            "text": "", 
            "title": "\u25a0 examples"
        }, 
        {
            "location": "/actions/#example-1-signing-out-of-token-authentication", 
            "text": "No need to specify  type , since it's  json  by default.  {\n    \"type\": \"$session.reset\",\n    \"options\": {\n    \"domain\": \"sessionjason.herokuapp.com\"\n    },\n    \"success\": {\n        \"type\": \"$reload\"\n    }\n}", 
            "title": "Example 1. Signing out of token authentication"
        }, 
        {
            "location": "/actions/#return-value_11", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example-2-signing-out-of-a-website-by-clearing-cookies", 
            "text": "Just set the  options.type  as  html .  {\n    \"type\": \"$session.reset\",\n    \"options\": {\n        \"domain\": \"http://news.ycombinator.com\",\n        \"type\": \"html\"\n    },\n    \"success\": {\n        \"type\": \"$reload\"\n    }\n}   Check out a functional demo app with backend server, with user accounts  session-example", 
            "title": "Example 2. Signing out of a website by clearing cookies"
        }, 
        {
            "location": "/actions/#variable", 
            "text": "Use $set and $get to set and get local variables.  Local variables are valid only within the current view and only stays on the memory.", 
            "title": "\u2500\u2500 VARIABLE \u2500\u2500"
        }, 
        {
            "location": "/actions/#set", 
            "text": "Set local variables.", 
            "title": "$set"
        }, 
        {
            "location": "/actions/#options_13", 
            "text": "key:value pairs. The key is the variable name, and the value is the variable's value.", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_12", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_5", 
            "text": "In the following example, the  $set  action sets the value of the two local variables  firstname  and  lastname  as  ethan  and  gliechtenstein , respectively.  {\n  \"type\": \"$set\",\n  \"options\": {\n    \"firstname\": \"ethan\",\n    \"lastname\": \"gliechtenstein\"\n  }\n}  This is how you set a variable. We are setting local variables  firstname  and  lastname  to  ethan  and  gliechtenstein  respectively.", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#do-something-after-setting-the-local-variable", 
            "text": "If you're using a local variable in your body template and wish to update the view to reflect the updated local variable, you need to call  $render .   For example you can add a  success  attribute to above action to redraw the view after update, like this:  {\n  \"type\": \"label\",\n  \"text\": \"{{$get.firstname}} {{$get.lastname}}\",\n  \"action\": {\n    \"type\": \"$set\",\n    \"options\": {\n      \"firstname\": \"ethan\",\n      \"lastname\": \"gliechtenstein\"\n    },\n    \"success\": {\n      \"type\": \"$render\"\n    }\n  }\n}", 
            "title": "do something after setting the local variable"
        }, 
        {
            "location": "/actions/#get", 
            "text": "You can access local variables by using a template expression  {{$get.VARIABLE_NAME}}   Normally, the usage flow is:  Set a variable using  $set  action  Use the variable from template through  {{$get.VARIABLE_NAME}}  expression.", 
            "title": "$get"
        }, 
        {
            "location": "/actions/#example_6", 
            "text": "Once you set  firstname  and  lastname  like we did above, we can use them like this:  [\n  {\n    \"type\": \"label\",\n    \"text\": \"{{$get.firstname}}\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"{{$get.lastname}}\"\n  }\n]  Here's a full usage example using both  $set  action and  $get  expression.  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$set\",\n          \"options\": {\n            \"bar\": \"#\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        },\n        \"$pull\": {\n          \"type\": \"$set\",\n          \"options\": {\n            \"bar\": \"{{$get.bar+'#'}}\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [{\n              \"type\": \"label\",\n              \"text\": \"{{$get.bar}}\"\n            }]\n          }]\n        }\n      }\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#heres-whats-going-on_1", 
            "text": "When the view loads ( $load  system event), it sets the local variable  bar 's value as \"#\", then renders the template with a label that displays the variable  bar  ( {{$get.bar}} ).  When the user makes a pull to refresh gesture ( $pull  event), it appends another \"#\" to  bar  and then renders again.", 
            "title": "Here's what's going on:"
        }, 
        {
            "location": "/actions/#cache", 
            "text": "Cache lets you persist and retrieve content. Unlike local variables, it will stay even when you close the app and come back.", 
            "title": "\u2500\u2500 CACHE \u2500\u2500"
        }, 
        {
            "location": "/actions/#cache-vs-local-variable", 
            "text": "Cache and local variables are both sandboxed per view url. Therefore anything you store to cache and local variable is stored just for that view.  Local variables are only on memory so will go away when the view refreshes. But cache is stored persistently and stays until you overwrite or reset it, even if the app is killed and restarted.", 
            "title": "Cache vs. Local variable"
        }, 
        {
            "location": "/actions/#write", 
            "text": "$cache.set  action is used to store to cache.", 
            "title": "Write"
        }, 
        {
            "location": "/actions/#options_14", 
            "text": "key:value pairs. The key is the cache variable name, and the value is the variable's value.", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_13", 
            "text": "returns the updated  $cache  object, which looks like this:  {\n  \"items\": [...]\n}", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#examples_2", 
            "text": "", 
            "title": "\u25a0 examples"
        }, 
        {
            "location": "/actions/#example-1-set-cache", 
            "text": "In the following example, it first makes a  $network.request , and then takes its return value  {{$jason}}  and stores it to cache using the  $cache.set  action.  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$cache.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    }\n  }\n}", 
            "title": "Example 1. Set cache"
        }, 
        {
            "location": "/actions/#example-2-set-cache-and-use-the-updated-value", 
            "text": "Simply setting the cache doesn't update the view. Let's try to render the updated result.  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$cache.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    },\n    \"success\": {\n      \"type\": \"$util.alert\",\n      \"options\": {\n        \"title\": \"Items fetched\",\n        \"description\": \"{{$cache.items.length}}\"\n      }\n    }\n  }\n}", 
            "title": "Example 2. Set cache and use the updated value"
        }, 
        {
            "location": "/actions/#read", 
            "text": "Directly access  $cache  variable from a template expression, for example  {{$cache.items}} .", 
            "title": "Read"
        }, 
        {
            "location": "/actions/#example_7", 
            "text": "For example, you could store a  tracking_keyword  value locally and automatically perform a search whenever the document loads.  {\n  \"type\": \"$oauth.request\",\n  \"options\": {\n    \"url\": SEARCH_URL,\n    \"data\": {\n      \"search_query\": \"{{$cache.tracking_keyword}}\"\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#reset", 
            "text": "Use  $cache.reset  action to reset the cache associated with the current url.", 
            "title": "Reset"
        }, 
        {
            "location": "/actions/#options_15", 
            "text": "none", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_14", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_8", 
            "text": "The following will wipe out all the cache values associated with the current view url.  {\n  \"type\": \"$cache.reset\"\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#global", 
            "text": "In most cases it is recommended to use  $cache  to persist data, because they are sandboxed per URL and it's secure.   But sometimes you may want to store variables globally so they're accessible from all the views.  This is what global variable does. Just like  $cache , it will stay even when you close the app and come back later.", 
            "title": "\u2500\u2500 GLOBAL \u2500\u2500"
        }, 
        {
            "location": "/actions/#global-vs-cache-vs-local-variables", 
            "text": "Cache is sandboxed per URL, but Global variables are global to the entire app.  Both Global and Cache persist data so they will stick around unless you delete the app or explicitly delete them using  $cache.reset  or  $global.reset .", 
            "title": "Global vs. Cache vs. Local Variables"
        }, 
        {
            "location": "/actions/#write_1", 
            "text": "$global.set  action is used to write to global variables.", 
            "title": "Write"
        }, 
        {
            "location": "/actions/#options_16", 
            "text": "key:value pairs. The key is the global variable name, and the value is the variable's value.", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_15", 
            "text": "returns the updated  $global  object, which looks like this:  {\n  \"key1\": [...],\n  \"key2\": ...\n}", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#examples_3", 
            "text": "", 
            "title": "\u25a0 examples"
        }, 
        {
            "location": "/actions/#example-1-set-global", 
            "text": "In the following example, it first makes a  $network.request , and then takes its return value  {{$jason}}  and stores it to global using the  $global.set  action.  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$global.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    }\n  }\n}", 
            "title": "Example 1. Set global"
        }, 
        {
            "location": "/actions/#example-2-set-global-and-use-the-updated-value", 
            "text": "Simply setting the global doesn't update the view. Let's try to render the updated result.  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"http://jasonclient.org/api/items.json\"\n  },\n  \"success\": {\n    \"type\": \"$global.set\",\n    \"options\": {\n      \"items\": \"{{$jason}}\"\n    },\n    \"success\": {\n      \"type\": \"$render\",\n      \"success\": {\n        \"type\": \"$util.alert\",\n        \"options\": {\n          \"title\": \"Items fetched\",\n          \"description\": \"{{$global.items.length}}\"\n        }\n      }\n    }\n  }\n}", 
            "title": "Example 2. Set global and use the updated value"
        }, 
        {
            "location": "/actions/#read_1", 
            "text": "Just like  $cache , you can read global variables using template expressions:", 
            "title": "Read"
        }, 
        {
            "location": "/actions/#example_9", 
            "text": "For example, you could store  $get.message  (local variable) into a global variable named  url , and then display a  $util.alert  with the global variable we just set, like this:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        ...\n        \"store\": {\n          \"type\": \"$global.set\",\n          \"options\": {\n            \"url\": \"{{$get.message}}\"\n          },\n          \"success\": {\n            \"type\": \"$util.alert\",\n            \"options\": {\n              \"title\": \"Current global 'url' variable\",\n              \"description\": \"{{$global.url}}\"\n            }\n          }\n        },\n        ...\n      },\n      ...\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#example-use-a-modal-to-set-global-and-render-the-result", 
            "text": "The following JSON opens  file://2.json .  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Global Test 1\",\n      \"actions\": {\n        \"$show\": {\n          \"type\": \"$render\"\n        },\n        \"$pull\": {\n          \"type\": \"$reload\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [\n            {\n              \"type\": \"vertical\",\n              \"items\": [\n                {\n                  \"type\": \"button\",\n                  \"text\": \"{{$global.something || 'Set Global'}}\",\n                  \"action\": {\n                    \"type\": \"$href\",\n                    \"options\": {\n                      \"url\": \"file://2.json\",\n                      \"transition\": \"modal\"\n                    }\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  }\n}  Here's the contents of  2.json .  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Global Test 2\",\n      \"actions\": {\n        \"$show\": {\n          \"type\": \"$render\"\n        },\n        \"$pull\": {\n          \"type\": \"$reload\"\n        },\n        \"save\": {\n          \"type\": \"$global.set\",\n          \"options\": {\n            \"something\": \"{{$get.something}}\"\n          },\n          \"success\": {\n            \"type\": \"$close\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"header\": {\n            \"menu\": {\n              \"text\": \"Reset\",\n              \"style\": {\n                \"size\": \"15\",\n                \"font\": \"Helvetica\",\n                \"color\": \"#4f8ff7\"\n              },\n              \"action\": {\n                \"type\": \"$global.reset\",\n                \"options\": {\n                  \"items\": [\"something\"]\n                },\n                \"success\": {\n                  \"type\": \"$close\"\n                }\n              }\n            }\n          },\n          \"sections\": [{\n            \"type\": \"vertical\",\n            \"items\": [{\n                \"type\": \"label\",\n                \"text\": \"Global value is: {{$global.something || ''}}\"\n              },\n              {\n                \"type\": \"vertical\",\n                \"style\": {\n                  \"padding\": \"10\"\n                },\n                \"components\": [{\n                  \"type\": \"textfield\",\n                  \"name\": \"something\",\n                  \"value\": \"{{$global.something || ''}}\",\n                  \"placeholder\": \"Add something here\"\n                }]\n              },\n              {\n                \"type\": \"button\",\n                \"text\": \"Save Global Variable\",\n                \"action\": {\n                  \"trigger\": \"save\"\n                }\n              }\n            ]\n          }]\n        }\n      }\n    }\n  }\n}", 
            "title": "Example: Use a modal to set global and render the result"
        }, 
        {
            "location": "/actions/#reset_1", 
            "text": "Use  $global.reset  action to remove global variables by name", 
            "title": "Reset"
        }, 
        {
            "location": "/actions/#options_17", 
            "text": "items  : An array of global variable names to remove", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_16", 
            "text": "The resulting  $global  object after removing the variables", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_10", 
            "text": "The following will wipe out all the global variables named  key1  and  key2 .  {\n  \"type\": \"$global.reset\",\n  \"items\": [\"key1\", \"key2\"]\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#script", 
            "text": "Jasonette lets you use simple inline JavaScript code inside template expressions. Here's an example where we use  JSON.stringify :  {\n   items : [\n    {\n       type :  label ,\n       url :  Full JSON string \n    },\n    {\n       type :  label ,\n       text :  {{JSON.stringify($jason)}} \n    }\n  ]\n}  However sometimes you may want to import an entire JavaScript library, just like you do with HTML using the  script  tag.", 
            "title": "\u2500\u2500 SCRIPT \u2500\u2500"
        }, 
        {
            "location": "/actions/#scriptinclude", 
            "text": "Include remote/local JavaScript file into the template context.", 
            "title": "$script.include"
        }, 
        {
            "location": "/actions/#options_18", 
            "text": "items : An array of include objects, each of which has the following attributes:  url : load from a url. You can use both remote (http:// or https://) or local (file://) urls  text : inline JavaScript code to import", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_17", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_11", 
            "text": "In the following example, we:   import  underscore.js ,   crypto.js ,  he.js , as well as inject an inline JavaScript code into the context via  text  attribute.  Use it by accessing the  $root  context. The JavaScript libraries get injected into the global context ( $root ) after running  $script.include .   Note that these JavaScript libraries referenced by  url  are downloaded in parallel just like how  $require action  works.  {\n   type :  $script.include ,\n   options : {\n     items : [\n      {  url :  https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js  },\n      {  text :  var randomcolor = function() { return '#'+Math.floor(Math.random()*16777215).toString(16); }  },\n      {  url :  https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js  },\n      {  url :  https://rawgit.com/mathiasbynens/he/master/he.js  }\n    ]\n  },\n   success : {\n     type :  $render ,\n     options : {\n       data : {\n         raw :  no man #38;s land ,\n         decoded :  {{$root.he.decode('no man #39;s land')}} ,\n         unique :  {{$root._.uniq([1,2,3,3,3,4,4,4,4,5])}} \n      }\n    }\n  }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#scriptclear", 
            "text": "Clears out the global context of the JavaScript template engine.", 
            "title": "$script.clear"
        }, 
        {
            "location": "/actions/#options_19", 
            "text": "none", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_18", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_12", 
            "text": "{\n   type :  $script.clear \n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#util", 
            "text": "Utility and widget methods", 
            "title": "\u2500\u2500 UTIL \u2500\u2500"
        }, 
        {
            "location": "/actions/#utilbanner", 
            "text": "Displays a banner notification with title and description.", 
            "title": "$util.banner"
        }, 
        {
            "location": "/actions/#options_20", 
            "text": "title  description  type :  \"error\"  |  \"success\"  |  \"info\"  (default)", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_19", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_13", 
            "text": "{\n    \"type\": \"$util.banner\",\n    \"options\": {\n        \"title\": \"Hello World\",\n        \"description\": \"I'm a banner. I display a title and a description\",\n        \"type\": \"info\"\n    }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#utiltoast", 
            "text": "Displays a toast notification with a simple text", 
            "title": "$util.toast"
        }, 
        {
            "location": "/actions/#options_21", 
            "text": "text : The text to display  type :  \"error\"  |  \"info\"  |  \"warning\"  |  \"dark\"  |  \"default\"  |  \"success\"  (default)", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_20", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_14", 
            "text": "{\n    \"type\": \"$util.toast\",\n    \"options\": {\n        \"text\": \"I'm a toast. I display a simple text.\",\n        \"type\": \"warning\"\n    }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#utilalert", 
            "text": "Displays an alert.  Alerts can also have form input fields users can fill in.  When you use the form input,  $util.alert  returns the resulting key/value pairs wrapped with  $jason .", 
            "title": "$util.alert"
        }, 
        {
            "location": "/actions/#types-of-alerts", 
            "text": "Basic  : You can just display a simple alert that has an  ok  and a  cancel  button.  Form  : You can also add input fields to the alert and use it to receive user input.       Basic Alert  Form Alert", 
            "title": "Types of alerts"
        }, 
        {
            "location": "/actions/#options_22", 
            "text": "title : title of the alert  description : description caption  form  (optional): Array of input elements. Each input can have the following attributes:  name : name of the field. Use this name to retrieve the value filled out by the user  value : set this attribute to preset the value inside the input field.  placeholder : placeholder text  type  (optional) :  secure  to hide keystrokes with *", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_21", 
            "text": "if the  form  attribute is used, returns the filled out  $jason  object  if the  form  attribute is NOT used, no return value", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#examples_4", 
            "text": "", 
            "title": "\u25a0 examples"
        }, 
        {
            "location": "/actions/#example-1-simple-notice-alert", 
            "text": "Just a simple alert with an OK and a Cancel button  {\n  \"type\": \"$util.alert\",\n  \"options\": {\n    \"title\": \"Basic Alert\",\n    \"description\": \"I'm a basic alert. I simply display an alert that needs to be dismissed before moving forward\"\n  },\n  \"success\": {\n    \"type\": \"$render\"\n  }\n}", 
            "title": "Example 1. Simple notice alert"
        }, 
        {
            "location": "/actions/#example-2-form-alert", 
            "text": "Here's an example of an alert that lets users fill out a form and return the value.  {\n  \"type\": \"$util.alert\",\n  \"options\": {\n    \"title\": \"Demo alert with input\",\n    \"description\": \"Try entering values and press OK\",\n    \"form\": [{\n      \"name\": \"username\",\n      \"placeholder\": \"Enter username\"\n    }, {\n      \"name\": \"password\",\n      \"placeholder\": \"Enter password\",\n      \"secure\": \"true\"\n    }]\n  }\n}  In this case, after the user fills out the form and presses \"OK\", the action will finish with a return value that takes the following form:  {\n  \"$jason\": {\n    \"username\": \"ethan\",\n    \"password\": \"sdn3Uef2!\"\n  }\n}  To use this return value, you can chain another action as a  success  callback and use the attributes, like this:  {\n  \"type\": \"$util.alert\",\n  \"options\": {\n    \"title\": \"Sign in\",\n    \"description\": \"Please enter username and password\",\n    \"form\": [{\n      \"name\": \"username\"\n    }, {\n      \"type\": \"secure\",\n      \"name\": \"password\"\n    }]\n  },\n  \"success\": {\n    \"type\": \"$network.request\",\n    \"options\": {\n      \"url\": \"https://www.jasonclient.org/users/sign_in.json\",\n      \"method\": \"post\",\n      \"data\": {\n        \"username\": \"{{$jason.username}}\",\n        \"password\": \"{{$jason.password}}\"\n      }\n    }\n  }\n}", 
            "title": "Example 2. Form Alert"
        }, 
        {
            "location": "/actions/#utilshare", 
            "text": "Share a text, image, video, or a combination of them.      Share sheet  SMS example", 
            "title": "$util.share"
        }, 
        {
            "location": "/actions/#options_23", 
            "text": "items  (array): Array of items to be shared. Each item can have the following attributes  type :  \"text\"  |  \"image\"  |  \"video\"  text : text  data : raw data to be shared (only for  image  type)  url : image url (only for  image  type)  file_url : video url (only for  video  type)", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_22", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#examples_5", 
            "text": "", 
            "title": "\u25a0 examples"
        }, 
        {
            "location": "/actions/#example-1-sharing-a-simple-text", 
            "text": "{\n  \"type\": \"$util.share\",\n  \"options\": {\n    \"items\": [{\n      \"type\": \"text\",\n      \"text\": \"This is an automated message\"\n    }]\n  }\n}", 
            "title": "Example 1. Sharing a simple text"
        }, 
        {
            "location": "/actions/#example-2-sharing-an-image-captured-from-snapshot", 
            "text": "{\n  \"type\": \"$snapshot\",\n  \"success\": {\n    \"type\": \"$util.share\",\n    \"options\": {\n      \"items\": [{\n        \"type\": \"image\",\n        \"data\": \"{{$jason.data}}\"\n      }]\n    }\n  }\n}", 
            "title": "Example 2. Sharing an image captured from $snapshot"
        }, 
        {
            "location": "/actions/#example-3-sharing-a-video-captured-from-mediacamera", 
            "text": "{\n  \"type\": \"$media.camera\",\n  \"success\": {\n    \"type\": \"$util.share\",\n    \"options\": {\n      \"items\": [{\n        \"type\": \"video\",\n        \"file_url\": \"{{$jason.file_url}}\"\n      }]\n    }\n  }\n}", 
            "title": "Example 3. Sharing a video captured from $media.camera"
        }, 
        {
            "location": "/actions/#example-4-sharing-an-image-from-a-url-and-a-text", 
            "text": "{\n  \"type\": \"$util.share\",\n  \"options\": {\n    \"items\": [{\n      \"type\": \"image\",\n      \"url\": \"https://vjs.zencdn.net/v/oceans.png\"\n    },{\n      \"type\": \"text\",\n      \"text\": \"This is a picture of ocean\"\n    }]\n  }\n}", 
            "title": "Example 4. Sharing an image from a URL, and a text"
        }, 
        {
            "location": "/actions/#utilpicker", 
            "text": "Opens a multiple choice picker menu, with each item linking to an  action  or an  href .", 
            "title": "$util.picker"
        }, 
        {
            "location": "/actions/#options_24", 
            "text": "title  (string): The top title caption for the picker  items  (array): An array of items from which the user can choose. Each item can contain the following attributes:  text : Text to display  href :  href  to trigger when selected.  action :  action  to call when selected.", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_23", 
            "text": "none", 
            "title": "\u25a0 Return value"
        }, 
        {
            "location": "/actions/#example_15", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"header\": {\n        \"menu\": {\n          \"text\": \"Menu\",\n          \"action\": {\n            \"type\": \"$util.picker\",\n            \"options\": {\n              \"items\": [{\n                \"text\": \"Trigger $util.banner\",\n                \"action\": {\n                  \"type\": \"$util.banner\",\n                  \"options\": {\n                    \"title\": \"Success\",\n                    \"description\": \"This is a banner\"\n                  }\n                }\n              },{\n                \"text\": \"Trigger $util.alert\",\n                \"action\": {\n                  \"type\": \"$util.alert\",\n                  \"options\": {\n                    \"title\": \"Alert\",\n                    \"description\": \"This is an alert triggered by $util.picker\"\n                  }\n                }\n              },{\n                \"text\": \"Trigger $audio.play\",\n                \"action\": {\n                  \"type\": \"$audio.play\",\n                  \"options\": {\n                    \"url\": \"https://s3.amazonaws.com/www.textcast.co/icons/yo.mp3\"\n                  }\n                }\n              }]\n            }\n          }\n        }\n      ...\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#utildatepicker", 
            "text": "Opens a date picker", 
            "title": "$util.datepicker"
        }, 
        {
            "location": "/actions/#options_25", 
            "text": "none", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_24", 
            "text": "When a user selects one of the dates it returns the selected date in in  unix timestamp format  (in string) like this:  {\n  \"value\": \"1471310358216\"\n}", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_16", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n    \"title\": \"Datepicker Demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Pick a date\",\n          \"action\": {\n            \"type\": \"$util.datepicker\",\n            \"options\": {\n              \"title\": \"Pick a date\",\n              \"description\": \"Just pick one\"\n            },\n            \"success\": {\n              \"type\": \"$util.alert\",\n              \"options\": {\n                \"title\": \"Selected date\",\n                \"description\": \"{{(new Date(parseInt( span style='color:#ff0000;' $jason /span ) * 1000)).toString()}}\"\n              }\n            }\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#utiladdressbook", 
            "text": "Fetches the addressbook to populate them into $jason.", 
            "title": "$util.addressbook"
        }, 
        {
            "location": "/actions/#options_26", 
            "text": "none", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_25", 
            "text": "Returns an array of contacts from the addressbook, like this:  [\n  {\n    \"name\": \"John\",\n    \"phone\": \"9176568890\",\n    \"email\": \"john@jasonclient.org\"\n  },\n  {\n    \"name\": \"Mary\",\n    \"phone\": \"9172562890\",\n    \"email\": \"mary@jasonclient.org\"\n  },\n  {\n    \"name\": \"Ethan\",\n    \"phone\": \"2026468271\",\n    \"email\": \"ethan@jasonclient.org\"\n  }\n]", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_17", 
            "text": "In this example, we access the addressbook when the view  $load s, then  $render  the content using the given template.  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Addressbook demo\",\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$util.addressbook\",\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [\n            {\n              \"items\": {\n                \"{{#each $jason}}\": {\n                  \"type\": \"vertical\",\n                  \"style\": {\n                    \"padding\": \"5\",\n                    \"spacing\": \"5\"\n                  },\n                  \"components\": [\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{name}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{JSON.stringify(phone)}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{JSON.stringify(email)}}\"\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#required-permissions", 
            "text": "On iOS,  $util.addressbook  works out of the box so you don't need to do anything.  But on Android you need to set up a  android.permission.READ_CONTACTS  permission.  Just open up  AndroidManifest.xml  file from Android Studio, and uncomment the lines described below:", 
            "title": "\u25a0  Required Permissions"
        }, 
        {
            "location": "/actions/#media", 
            "text": "Anything related to photo/video/camera.", 
            "title": "\u2500\u2500 MEDIA \u2500\u2500"
        }, 
        {
            "location": "/actions/#mediacamera", 
            "text": "Capture a video or a photo using the device camera", 
            "title": "$media.camera"
        }, 
        {
            "location": "/actions/#options_27", 
            "text": "type :  \"photo\"  |  \"video\"  edit :  \"true\"  (Don't include to remove the editing step)  quality :  \"high\"  |  \"medium\"  |  \"low\"  (Default is  \"medium\" )", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_26", 
            "text": "Returns an object with multiple attributes which represent the video/photo   file_url : local file url (Used for videos)  data_uri :  data-uri string  data : raw data (Used for photos)  content_type :  \"image/png\"  |  \"image/jpeg\"  |  \"video/mp4\"   For example, here's an example return value:  {\n  \"file_url\": \"...\",\n  \"data_uri\": \"data:image/png;base64,.....\",\n  \"data\": \"...\",\n  \"content_type\": \"image/png\"\n}  Normally you will want to pass the  data  to another action such as  $network.upload .", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_18", 
            "text": "In the following example, we take a photo using  $media.camera , and then utilize the  data_url  from the return value to set the  background  image url.   {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Camera\",\n      \"description\": \"Tap to open up camera\",\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$media.camera\",\n          \"options\": {\n            \"edit\": \"true\",\n            \"type\": \"photo\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"style\": {\n            \"background\": \"{{$jason.data_url}}\"\n          }\n        }\n      }\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#mediapicker", 
            "text": "Opens the device camera roll.", 
            "title": "$media.picker"
        }, 
        {
            "location": "/actions/#options_28", 
            "text": "type :  \"photo\"  |  \"video\"  edit :  \"true\"  (Don't include to remove the editing step)  quality :  \"high\"  |  \"medium\"  |  \"low\"  (Default is  \"medium\" )", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_27", 
            "text": "Same as  $media.camera", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_19", 
            "text": "{\n    \"$jason\": {\n        \"head\": {\n            \"title\": \"Media picker\",\n            \"description\": \"Tap to select media\"\n        },\n        \"body\": {\n            \"sections\": [{\n                \"items\": [{\n                    \"type\": \"label\",\n                    \"text\": \"Select media\",\n                    \"action\": {\n                        \"type\": \"$media.picker\",\n                        \"options\": {\n                            \"edit\": \"true\",\n                            \"type\": \"video\"\n                        },\n                        \"success\": {\n                            \"type\": \"$util.alert\",\n                            \"options\": {\n                                \"title\": \"Selected {{$jason['content_type']}} at\",\n                                \"description\": \"{{$jason.file_url}}\"\n                            }\n                        }\n                    }\n                }]\n            }]\n        }\n    }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#mediaplay", 
            "text": "plays a video from remote url.", 
            "title": "$media.play"
        }, 
        {
            "location": "/actions/#options_29", 
            "text": "url : the video url to play  muted :  \"true\"  to mute the sound", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_28", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_20", 
            "text": "{\n    \"$jason\": {\n        \"head\": {\n            \"title\": \"Video\",\n            \"description\": \"Tap to play the video\"\n        },\n        \"body\": {\n            \"sections\": [{\n                \"items\": [{\n                    \"type\": \"image\",\n                    \"url\": \"https://vjs.zencdn.net/v/oceans.png\",\n                    \"action\": {\n                        \"type\": \"$media.play\",\n                        \"options\": {\n                            \"url\": \"https://vjs.zencdn.net/v/oceans.mp4\"\n                        }\n                    }\n                }]\n            }]\n        }\n    }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#audio", 
            "text": "Anything related to audio", 
            "title": "\u2500\u2500 AUDIO \u2500\u2500"
        }, 
        {
            "location": "/actions/#audioplay", 
            "text": "Play audio from remote url.   Toggles between play and pause state if called multiple times.", 
            "title": "$audio.play"
        }, 
        {
            "location": "/actions/#options_30", 
            "text": "url :  A remote url to stream audio from.  title : Title to display on the lock screen while playing in background mode.  author : Author name to display on the lock screen while playing in background mode.  album : Album name to display on the lock screen while playing in background mode.  image : Image url to display on the lock screen while playing in background mode.", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_29", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_21", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Play audio\"\n    }, \n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Yo\",\n          \"action\": {\n            \"type\": \"$audio.play\",\n            \"options\": {\n              \"title\": \"Busdriver - Worlds to Run\",\n              \"author\": \"Song Exploder\",\n              \"image\": \"http://discover.pocketcasts.com/discover/images/400/fff9ba50-53e1-0131-8293-723c91aeae46.jpg\",\n              \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#audiopause", 
            "text": "Pauses an audio clip that's already playing from a remote url.", 
            "title": "$audio.pause"
        }, 
        {
            "location": "/actions/#options_31", 
            "text": "url: if specified, pauses ONLY this url. Otherwise, pauses all audios currently playing.", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_30", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#audiostop", 
            "text": "Stops an audio clip that's already playing from a remote url.", 
            "title": "$audio.stop"
        }, 
        {
            "location": "/actions/#options_32", 
            "text": "url: if specified, stops ONLY this url. Otherwise, stops all audios currently playing.", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_31", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#audioseek", 
            "text": "Seeks audio already playing from a remote url.  The position value must be a value between  0  and  1  (in string)", 
            "title": "$audio.seek"
        }, 
        {
            "location": "/actions/#options_33", 
            "text": "url : The audio url.  position : value between 0 and 1 (Must be in string format)", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_32", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_22", 
            "text": "Here's an example of seeking an audio clip to 30% position  {\n    \"$jason\": {\n        \"head\": {\n            \"title\": \"Seek example\"\n            \"actions\": {\n                \"$load\": {\n                    \"type\": \"$audio.play\",\n                    \"options\": {\n                        \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n                    }\n                }\n            }\n        },\n        \"body\": {\n            \"layers\": [{\n                \"type\": \"label\",\n                \"text\": \"Go to 30% position\",\n                \"style\": {\n                    \"bottom\": \"50\",\n                    \"left\": \"50%-50\",\n                    \"width\": \"100\"\n                },\n                \"action\": {\n                    \"type\": \"$audio.seek\",\n                    \"options\": {\n                        \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\",\n                        \"position\": \"0.3\"\n                    }\n                }\n            }]\n        }\n    }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#audioposition", 
            "text": "Get the position of the specified audio clip", 
            "title": "$audio.position"
        }, 
        {
            "location": "/actions/#options_34", 
            "text": "url : The audio url", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_33", 
            "text": "Returns the position between 0 and 1 in the following format:  {\n  \"value\": \"0.3\"\n}", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_23", 
            "text": "The following example displays a toast with the current position when the user taps the label.  {\n  \"$jason\": {\n    ...\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"How much did I listen so far?\",\n          \"action\": {\n            \"type\": \"$audio.position\",\n            \"options\": {\n            \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n          },\n          \"success\": {\n            \"type\": \"$util.toast\",\n            \"options\": {\n              \"text\": \"{{JSON.stringify($jason)}}\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#audioduration", 
            "text": "Returns total duration of the specified audio clip", 
            "title": "$audio.duration"
        }, 
        {
            "location": "/actions/#options_35", 
            "text": "url : The audio url", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_34", 
            "text": "Duration in seconds, in the following format:  {\n  \"value\": \"300\"\n}", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_24", 
            "text": "The following example displays a toast with the total duration of the track when the user taps the label.  {\n  \"$jason\": {\n    ...\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"How long is this track?\",\n          \"action\": {\n            \"type\": \"$audio.duration\",\n            \"options\": {\n              \"url\": \"http://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/songexploder/SongExploder73-Busdriver.mp3\"\n            },\n            \"success\": {\n              \"type\": \"$util.toast\",\n              \"options\": {\n                \"text\": \"{{JSON.stringify($jason)}}\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#audiorecord", 
            "text": "Record audio", 
            "title": "$audio.record"
        }, 
        {
            "location": "/actions/#options_36", 
            "text": "color : tint color when active  color:disabled : tint color when paused  theme :  light  to use light theme. Otherwise omit.", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_35", 
            "text": "file_url : the local url in which the audio was stored  data_uri : base64 encoded data-uri  content_type :  \"audio/m4a\"  (it's always this format)   Normally you will want to pass the result immediately to a  $network.upload  call in order to upload it to a cloud storage.", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_25", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Play audio\"\n    }, \n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Record Now\",\n          \"action\": {\n            \"type\": \"$audio.record\",\n            \"success\": {\n              \"type\": \"$util.alert\",\n              \"options\": {\n                \"title\": \"Audio stored at\",\n                \"description\": \"{{$jason.url}}\"\n              }\n            }\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#additional-permissions", 
            "text": "\u26a0\ufe0f  There are certain device permissions you need to turn on in order to use some of these actions.", 
            "title": "Additional Permissions"
        }, 
        {
            "location": "/actions/#ios-permission", 
            "text": "To support background audio play, you need to turn on background audio mode. Here's how:   [1] From XCode open  info.plist  file. Right click on the file and open as  source code .    [2] Uncomment the UIBackgroundModes part", 
            "title": "iOS Permission"
        }, 
        {
            "location": "/actions/#android-permissions", 
            "text": "[A] To support  $audio.record  on Android, you need to turn on  android.permission.RECORD_AUDIO  permission.  [B] To support background audio play, you need to turn on  android.permission.WAKE_LOCK  permission.   First open  AndroidManifest.xml  file from Android Stuido, and uncomment the relevant lines as shown below:", 
            "title": "Android Permissions"
        }, 
        {
            "location": "/actions/#geo", 
            "text": "", 
            "title": "\u2500\u2500 GEO \u2500\u2500"
        }, 
        {
            "location": "/actions/#geoget", 
            "text": "Get user's geolocation", 
            "title": "$geo.get"
        }, 
        {
            "location": "/actions/#options_37", 
            "text": "distance : accuracy distance in meters. By default it's 5000meters. The lower you go the more accurate it will be, but the longer it will take to retrieve the location.", 
            "title": "\u25a0  options"
        }, 
        {
            "location": "/actions/#return-value_36", 
            "text": "a  coord  object that contains  (latitude),(longitude)  format string  {\n  \"coord\": \"12.342,22.343\"\n}", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_26", 
            "text": "Below example demonstrates various ways of utilizing  $geo.get  return values  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Right Here\",\n      \"description\": \"Searching anything nearby, links to yelp, google streetview and foursquare\"\n    },\n    \"body\": {\n      \"sections\": [\n        {\n          \"items\": [\n            {\n              \"type\": \"label\",\n              \"text\": \"Street View\",\n              \"style\": {\n                \"size\": \"40\",\n                \"font\": \"HelveticaNeue-CondensedBold\",\n                \"color\": \"#000000\"\n              },\n              \"action\": {\n                \"type\": \"$geo.get\",\n                \"options\": {\n                  \"distance\": \"1000\"\n                },\n                \"success\": {\n                  \"type\": \"$href\",\n                  \"options\": {\n                    \"url\": \"http://maps.google.com/maps?q= layer=c cbll={{$jason.coord}} cbp=11,0,0,0,0\",\n                    \"view\": \"App\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"text\": \"Yelp\",\n              \"style\": {\n                \"size\": \"40\",\n                \"font\": \"HelveticaNeue-CondensedBold\",\n                \"color\": \"#000000\"\n              },\n              \"action\": {\n                \"type\": \"$geo.get\",\n                \"success\": {\n                  \"type\": \"$href\",\n                  \"options\": {\n                    \"url\": \"http://www.yelp.com/search?find_desc=food cll={{$jason.coord}} ns=1\",\n                    \"view\": \"App\"\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"text\": \"Foursquare\",\n              \"style\": {\n                \"size\": \"40\",\n                \"font\": \"HelveticaNeue-CondensedBold\",\n                \"color\": \"#000000\"\n              },\n              \"action\": {\n                \"type\": \"$geo.get\",\n                \"success\": {\n                  \"type\": \"$href\",\n                  \"options\": {\n                    \"url\": \"https://foursquare.com/explore?ll={{$jason.coord}} mode=url q=Food\",\n                    \"view\": \"App\"\n                  }\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#required-permissions_1", 
            "text": "On iOS,  $geo.get  works out of the box so you don't need to do anything.  But on Android you need to set up a location permission.  Just open up  AndroidManifest.xml  file from Android Studio, and uncomment the lines described below:", 
            "title": "\u25a0  Required Permissions"
        }, 
        {
            "location": "/actions/#timer", 
            "text": "", 
            "title": "\u2500\u2500 TIMER \u2500\u2500"
        }, 
        {
            "location": "/actions/#timerstart", 
            "text": "Start a timer", 
            "title": "$timer.start"
        }, 
        {
            "location": "/actions/#options_38", 
            "text": "interval : timer interval in seconds  name : name of the timer (used later to stop it)  repeats : if set to  \"true\" , it's a perpetually repeating timer. Otherwise the timer gets called only once.  action : the action to execute on every timer interval.", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_37", 
            "text": "none", 
            "title": "\u25a0  return value"
        }, 
        {
            "location": "/actions/#example_27", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$timer.start\",\n          \"options\": {\n            \"interval\": \"1\",\n            \"name\": \"timer1\",\n            \"repeats\": \"true\",\n            \"action\": {\n              \"type\": \"$render\"\n            }\n          }\n        }\n      },\n      \"templates\": {\n        ...\n      }\n    }\n  }\n}", 
            "title": "\u25a0  example"
        }, 
        {
            "location": "/actions/#timerstop", 
            "text": "Stops a timer", 
            "title": "$timer.stop"
        }, 
        {
            "location": "/actions/#options_39", 
            "text": "name : the name of the timer to stop. You need to have  started a timer with a name  first. It will stop all running timers if the name is not specified.", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_38", 
            "text": "none", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_28", 
            "text": "{\n  \"$jason\": {\n    ...\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"Stop the timer\",\n          \"action\": {\n            \"type\": \"$timer.stop\",\n            \"options\": {\n              \"name\": \"timer1\"\n            }\n          }\n        }]\n      }]\n    }\n  }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#conversion", 
            "text": "Convert other data formats into JSON format", 
            "title": "\u2500\u2500 CONVERSION \u2500\u2500"
        }, 
        {
            "location": "/actions/#convertcsv", 
            "text": "Convert CSV to JSON", 
            "title": "$convert.csv"
        }, 
        {
            "location": "/actions/#options_40", 
            "text": "data : CSV string", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_39", 
            "text": "returns the parsed JSON result.  Expected format:  must have the first row populated with attribute names. (See below for an example)", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_29", 
            "text": "Here's an example CSV string returned from a network request.  name, descrption, url, icon\ngithub, social coding, https://www.github.com, https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\nfacebook, Best place to build   make an impact., https://www.facebook.com, https://www.facebook.com/images/fb_icon_325x325.png\nproduct hunt, Discover your next favorite thing, https://www.producthunt.com, https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg  Notice how the first line is entirely made up of attribute names, and the rest rows are the actual data.  We will try to parse this CSV into JSON by using the following code:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"http://hastebin.com/raw/xiceheroku\",\n            \"data_type\": \"raw\"\n          },\n          \"success\": {\n            \"type\": \"$convert.csv\",\n            \"options\": {\n              \"data\": \"{{$jason}}\"\n            },\n            \"success\": {\n              \"type\": \"$render\"\n            }\n          }\n        }\n      }\n    }\n  }\n}  The end result:  [\n  {\n    \"name\": \"github\",\n    \"description\": \"social coding\",\n    \"url\": \"https://www.github.com\",\n    \"icon\": \"https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png\"\n  },\n  {\n    \"name\": \"facebook\",\n    \"description\": \"Best place to build   make an impact.\",\n    \"url\": \"https://www.facebook.com\",\n    \"icon\": \"https://www.facebook.com/images/fb_icon_325x325.png\"\n  },\n  {\n    \"name\": \"product hunt\",\n    \"description\": \"Discover your next favorite thing\",\n    \"url\": \"https://www.producthunt.com\",\n    \"icon\": \"https://pbs.twimg.com/profile_images/699572900643213312/RC2oRewL.jpg\"\n  }\n]", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#convertrss", 
            "text": "Convert RSS to JSON. Built on top of  node-feedparser library", 
            "title": "$convert.rss"
        }, 
        {
            "location": "/actions/#options_41", 
            "text": "data : RSS string", 
            "title": "\u25a0 options"
        }, 
        {
            "location": "/actions/#return-value_40", 
            "text": "returns the parsed JSON result in the following format ( You can learn more about the spec here ):", 
            "title": "\u25a0 return value"
        }, 
        {
            "location": "/actions/#example_30", 
            "text": "Here's an example where it makes a network request to  http://feeds.gawker.com/lifehacker/full  with  data_type  of  rss , converts it to JSON using  $convert.rss , and then renders it.  {\n  \"actions\": {\n    \"$load\": {\n      \"type\": \"$network.request\",\n      \"options\": {\n        \"url\": \"http://feeds.gawker.com/lifehacker/full\",\n        \"data_type\": \"rss\"\n      },\n      \"success\": {\n        \"type\": \"$convert.rss\",\n        \"options\": {\n          \"data\": \"{{$jason}}\"\n        },\n        \"success\": {\n          \"type\": \"$render\"\n        }\n      }\n    }\n  }\n}  The converted result right before  $render  will look something like this:  {\n  \"$jason\": [\n    {\n      \"author\": \"Alan Henry\",\n      \"rss:pubdate\": {\n        \"@\": {},\n        \"#\": \"Thu, 9 Jun 2016 00:00:00 GMT\"\n      },\n      \"source\": {},\n      \"guid\": \"1780470292\",\n      \"link\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\",\n      \"title\": \"The Edge of the World Desktop\",\n      \"summary\": \" lt;p class=\\\"first-text\\\" gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look.  lt;/p gt;\",\n      \"image\": {},\n      \"rss:category\": [\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"featured desktop\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"desktops\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"wallpapers\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"customization\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"personalization\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"hud\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"rainmeter\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"themes\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"skins\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"windows\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"os x\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"mac\"\n        },\n        {\n          \"@\": {\n            \"domain\": \"\"\n          },\n          \"#\": \"linux\"\n        }\n      ],\n      \"rss:link\": {\n        \"@\": {},\n        \"#\": \"http://feeds.gawker.com/~r/lifehacker/full/~3/kcJMaJ6Ad7I/the-edge-of-the-world-desktop-1780470292\"\n      },\n      \"feedburner:origlink\": {\n        \"@\": {},\n        \"#\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\"\n      },\n      \"enclosures\": [],\n      \"origlink\": \"http://lifehacker.com/the-edge-of-the-world-desktop-1780470292\",\n      \"pubDate\": \"2016-06-09T00:00:00.000Z\",\n      \"pubdate\": \"2016-06-09T00:00:00.000Z\",\n      \"rss:guid\": {\n        \"@\": {\n          \"ispermalink\": \"false\"\n        },\n        \"#\": \"1780470292\"\n      },\n      \"date\": \"2016-06-09T00:00:00.000Z\",\n      \"rss:title\": {\n        \"@\": {},\n        \"#\": \"The Edge of the World Desktop\"\n      },\n      \"meta\": {\n        \"#ns\": [\n          {\n            \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n          },\n          {\n            \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\"\n          },\n          {\n            \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\"\n          },\n          {\n            \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n          },\n          {\n            \"xmlns:atom\": \"http://www.w3.org/2005/Atom\"\n          },\n          {\n            \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\"\n          },\n          {\n            \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\"\n          },\n          {\n            \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\"\n          },\n          {\n            \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\"\n          }\n        ],\n        \"#version\": \"2.0\",\n        \"categories\": [],\n        \"language\": \"en\",\n        \"link\": \"http://lifehacker.com\",\n        \"title\": \"Lifehacker\",\n        \"rss:link\": {\n          \"@\": {},\n          \"#\": \"http://lifehacker.com\"\n        },\n        \"cloud\": {\n          \"type\": \"hub\",\n          \"href\": \"http://pubsubhubbub.appspot.com/\"\n        },\n        \"image\": {},\n        \"xmlurl\": \"http://www.lifehacker.com/index.xml\",\n        \"feedburner:info\": {\n          \"@\": {\n            \"uri\": \"lifehacker/full\"\n          }\n        },\n        \"feedburner:browserfriendly\": {\n          \"@\": {},\n          \"#\": \"This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site.\"\n        },\n        \"#xml\": {\n          \"version\": \"1.0\",\n          \"encoding\": \"UTF-8\"\n        },\n        \"@\": [\n          {\n            \"xmlns:itunes\": \"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n          },\n          {\n            \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\"\n          },\n          {\n            \"xmlns:taxo\": \"http://purl.org/rss/1.0/modules/taxonomy/\"\n          },\n          {\n            \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n          },\n          {\n            \"xmlns:atom\": \"http://www.w3.org/2005/Atom\"\n          },\n          {\n            \"xmlns:wfw\": \"http://wellformedweb.org/CommentAPI/\"\n          },\n          {\n            \"xmlns:feedburner\": \"http://rssnamespace.org/feedburner/ext/1.0\"\n          }\n        ],\n        \"pubDate\": null,\n        \"pubdate\": null,\n        \"rss:language\": {\n          \"@\": {},\n          \"#\": \"en\"\n        },\n        \"date\": null,\n        \"generator\": null,\n        \"rss:title\": {\n          \"@\": {},\n          \"#\": \"Lifehacker\"\n        },\n        \"xmlUrl\": \"http://www.lifehacker.com/index.xml\",\n        \"favicon\": null,\n        \"rss:@\": {},\n        \"atom10:link\": [\n          {\n            \"@\": {\n              \"rel\": \"hub\",\n              \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\",\n              \"href\": \"http://pubsubhubbub.appspot.com/\"\n            }\n          },\n          {\n            \"@\": {\n              \"href\": \"http://www.lifehacker.com/index.xml\",\n              \"rel\": \"self\",\n              \"xmlns:atom10\": \"http://www.w3.org/2005/Atom\",\n              \"type\": \"application/rss+xml\"\n            }\n          }\n        ],\n        \"rss:description\": {\n          \"@\": {},\n          \"#\": \"Tips and downloads for getting things done\"\n        },\n        \"copyright\": null,\n        \"#type\": \"rss\",\n        \"author\": null,\n        \"description\": \"Tips and downloads for getting things done\"\n      },\n      \"dc:creator\": {\n        \"@\": {},\n        \"#\": \"Alan Henry\"\n      },\n      \"rss:@\": {},\n      \"rss:description\": {\n        \"@\": {},\n        \"#\": \" lt;p class=\\\"first-text\\\" gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look. lt;/p gt;\"\n      },\n      \"comments\": null,\n      \"categories\": [\n        \"featured desktop\",\n        \"desktops\",\n        \"wallpapers\",\n        \"customization\",\n        \"personalization\",\n        \"hud\",\n        \"rainmeter\",\n        \"themes\",\n        \"skins\",\n        \"windows\",\n        \"os x\",\n        \"mac\",\n        \"linux\"\n      ],\n      \"description\": \" lt;p class=\\\"first-text\\\" gt;This OS X desktop is simple, elegant, and combines a few simple widgets with a gorgeous wallpaper to great effect. If you like what you see, here\u2019s how you can set it up, customize your own menubar, and give your Mac the same look. lt;/p gt;\"\n    },\n    {\n      ...\n    }\n  ]\n}  Check out the full JSON for the RSS reader example", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/actions/#ebf-additions", 
            "text": "", 
            "title": "EBF ADDITIONS"
        }, 
        {
            "location": "/actions/#logout", 
            "text": "Logout user", 
            "title": "\u2500\u2500 LOGOUT \u2500\u2500"
        }, 
        {
            "location": "/actions/#logout_1", 
            "text": "deletes and session data and returns to the native login screen if available or the initial jason screen", 
            "title": "$logout"
        }, 
        {
            "location": "/actions/#example_31", 
            "text": "{\n    \"type\": \"button\",\n    \"text\": \"Logout\",\n    \"action\": {\n        \"type\": \"$logout\"\n    }\n}", 
            "title": "\u25a0 example"
        }, 
        {
            "location": "/components/", 
            "text": "Types of Components\n\n\nComponents are user interface elements that can be used in different places, such as \nitems\n, and \nlayers\n.\n\n\n\n\nlabel\n\n\nimage\n\n\nbutton\n\n\ntextfield\n\n\ntextarea\n\n\nslider\n\n\nhtml\n\n\nspace\n\n\nmap\n\n\nDon't see what you want? \nYou can add more!\n\n\n\n\n\n\n\u25a0 label\n\n\nStatic uneditable text element.\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"label\"\n\n\ntext\n: The text to display\n\n\nstyle\n:\n\n\nfont\n: \ntext font name\n\n\nsize\n: text size\n\n\ncolor\n: text color in color code\n\n\npadding\n: padding in pixels\n\n\nbackground\n: background color of the label in color code\n\n\ncorner_radius\n: corner radius for the label\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Hello world\",\n  \"style\": {\n    \"font\": \"Avenir\",\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n\n\n\n\n\u25a0 image\n\n\nImage loaded from either remote url or data-url\n\n\n\n\n\n\n \u26a0\ufe0f Disclaimer:\n\n\nimage components are NOT Interactive. To attach \naction\n or \nhref\n to make an image interactive, use \nimage buttons\n\n\n\n\n\n\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"image\"\n\n\nurl\n: image url\n\n\nheader\n: (optional) in case the image needs authentication and we need to attach a header object to the request\n\n\nstyle\n (optional)\n\n\ncorner_radius\n: corner radius. use this to make the image rounded\n\n\nwidth\n\n\nheight\n\n\ncolor\n: To set the tint color (only for icons)\n\n\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"image\",\n  \"url\": \"http://i.imgur.com/KUJPgGV.png\",\n  \"header\": {\n    \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\"\n  },\n  \"style\": {\n    \"width\": \"50\",\n    \"height\": \"50\",\n    \"corner_radius\": \"25\"\n  }\n}\n\n\n\n\n\n\u25a0  button\n\n\nA basic component that responds to user tap.\n\n\nCan be either a text button or an image button, depending on what attributes are used.\n\n\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"button\"\n\n\ntext\n: button text (pick either \ntext\n or \nurl\n, can't have both)\n\n\nurl\n: button image url (pick either \ntext\n or \nurl\n, can't have both)\n\n\nheader\n: (optional) in case the we're using the image button and the image needs authentication and we need to attach a header object to the request\n\n\nstyle\n\n\nwidth\n: Width of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region)\n\n\nheight\n: Height of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region)\n\n\ncolor\n: text color\n\n\nbackground\n: background color\n\n\ncolor\n: To set the tint color (only for icons)\n\n\ncorner_radius\n: corner radius for the button\n\n\npadding\n: padding outside of the text (in case of text button) or outside of the image (in case of image button). Note that the height and width will stay the same regardless of what padding value you set.\n\n\nalign\n: Only for text buttons. You can set it as \nleft\n, \nright\n, or \ncenter\n. The default is \ncenter\n. (Irrelevant on image buttons since image buttons will always be centered)\n\n\n\n\n\n\naction\n : Attach an action attribute to be triggered when user taps the button.\n\n\n\n\n\n\nExample\n\n\nText button\n\n\nUse \ntext\n attribute to make it a label button\n\n\n{\n  \"type\": \"button\",\n  \"text\": \"Tap Me!\",\n  \"style\": {\n    \"width\": \"50\",\n    \"height\": \"50\",\n    \"background\": \"#00ff00\",\n    \"color\": \"#ffffff\",\n    \"font\": \"HelveticaNeue\",\n    \"size\": \"12\",\n    \"corner_radius\": \"25\"\n  },\n  \"action\": {\n    \"trigger\": \"reload\"\n  }\n}\n\n\n\nImage button\n\n\nUse \nurl\n attribute to make it an image button\n\n\n{\n  \"type\": \"button\",\n  \"url\": \"https://raw.githubusercontent.com/Jasonette/Jasonpedia/gh-pages/assets/krusty.png\",\n  \"header\": {\n    \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\"\n  },\n  \"style\": {\n    \"width\": \"50\",\n    \"height\": \"50\",\n    \"background\": \"#00ff00\",\n    \"color\": \"#ffffff\",\n    \"font\": \"HelveticaNeue\",\n    \"size\": \"12\",\n    \"corner_radius\": \"25\"\n  },\n  \"action\": {\n    \"trigger\": \"reload\"\n  }\n}\n\n\n\n\n\n\u25a0 textfield\n\n\nSingle line input field\n\n\n\n\n\n\ntextfields are seamlessly integrated with \nlocal variables\n\n\nsyntax\n\n\n\n\nname\n: name of the local variable to set.\n\n\nvalue\n: in case you wish to prefill the field.\n\n\nplaceholder\n: Placeholder text for when there's no content filled in.\n\n\nkeyboard\n: The keyboard type. One of the following: \n\"text\"\n | \n\"number\"\n | \n\"phone\"\n | \n\"url\"\n | \n\"email\"\n (if unspecified, the default is \n\"text\"\n)\n\n\nstyle\n: style the textfield\n\n\nbackground\n\n\nalign\n\n\nautocorrect\n: set to \n\"true\"\n to enable autocorrect\n\n\nautocapitalize\n: set to \n\"true\"\n to enable autocapitalize\n\n\nspellcheck\n: set to \n\"true\"\n to enable spellcheck\n\n\nsize\n: text size\n\n\nfont\n: text font\n\n\ncolor\n: text color\n\n\nplaceholder_color\n: placeholder text color\n\n\nsecure:\n hide character input if set to \n\"true\"\n\n\n\n\n\n\n\n\nexamples\n\n\nExample 1: password input\n\n\n{\n  \"type\": \"textfield\",\n  \"name\": \"password\",\n  \"value\": \"dhenf93f!\",\n  \"placeholder\": \"Enter password\",\n  \"style\": {\n    \"placeholder_color\": \"#cecece\",\n    \"font\": \"HelveticaNeue\",\n    \"align\": \"center\",\n    \"width\": \"200\",\n    \"height\": \"60\",\n    \"secure\": \"true\",\n    \"size\": \"12\"\n  }\n}\n\n\n\nExample 2: autocorrect/autocaptiazlie/spellcheck input\n\n\n{\n  \"type\": \"textfield\",\n  \"name\": \"status\",\n  \"placeholder\": \"Status update\",\n  \"style\": {\n    \"placeholder_color\": \"#cecece\",\n    \"font\": \"HelveticaNeue\",\n    \"align\": \"center\",\n    \"width\": \"200\",\n    \"height\": \"60\",\n    \"autocorrect\": \"true\",\n    \"autocapitalize\": \"true\",\n    \"spellcheck\": \"true\",\n    \"size\": \"12\"\n  }\n}\n\n\n\n\n\n\u25a0 textarea\n\n\nMultiline input field\n\n\n\n\n\n\nname\n: name of the local variable to set.\n\n\nvalue\n: in case you wish to prefill the field.\n\n\nplaceholder\n: Placeholder text for when there's no content filled in.\n\n\nkeyboard\n: The keyboard type. One of the following: \n\"text\"\n | \n\"number\"\n | \n\"phone\"\n | \n\"url\"\n | \n\"email\"\n (if unspecified, the default is \n\"text\"\n)\n\n\nstyle\n: style the textfield\n\n\nbackground\n\n\nalign\n: \n\"left\"\n | \n\"center\"\n | \n\"right\"\n (default is \n\"left\"\n)\n\n\nautocorrect\n: set to \n\"true\"\n to enable autocorrect\n\n\nautocapitalize\n: set to \n\"true\"\n to enable autocapitalize\n\n\nspellcheck\n: set to \n\"true\"\n to enable spellcheck\n\n\nsize\n: text size\n\n\nfont\n: text font\n\n\ncolor\n: text color\n\n\nplaceholder_color\n: placeholder text color\n\n\n\n\n\n\n\n\nexample\n\n\nBelow, we've named the textarea \nstatus\n, and then refer to its value from \nsubmit\n action through the template expression \n{{$get.status}}\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        ...\n        \n\"submit\"\n: {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://stts.jasonclient.org/status.json\",\n            \"method\": \"post\",\n            \"data\": {\n              \"content\": \n\"{{$get.status}}\"\n\n            }\n          },\n          \"success\": {\n            \"type\": \"$reload\"\n          }\n        }\n\n        ...\n      }\n    },\n    \"body\": {\n      ...\n      \n{\n        \"type\": \"textarea\",\n        \n\"name\": \"status\",\n\n        \"placeholder\": \"Status update\",\n        \"value\": \"Eating lunch..\",\n        \"style\": {\n          \"background\": \"rgba(0,0,0,0)\",\n          \"placeholder_color\": \"#cecece\",\n          \"font\": \"HelveticaNeue\",\n          \"align\": \"center\",\n          \"width\": \"100%\",\n          \"height\": \"300\",\n          \"autocorrect\": \"true\",\n          \"autocapitalize\": \"true\",\n          \"spellcheck\": \"true\",\n          \"size\": \"12\"\n        }\n      }\n\n      ...\n    }\n  }\n}\n\n\n\n\n\n\u25a0 slider\n\n\nHorizontal slider input\n\n\n\n\nsyntax\n\n\n\n\nname\n: name of the local variable to set.\n\n\nvalue\n: value between 0 and 1 (in string) to preset the slider with. For example \n\"0.3\"\n\n\naction\n: \naction\n to execute after user completes the sliding gesture.\n\n\nstyle\n\n\nwidth\n\n\nheight\n\n\ncolor\n\n\n\n\n\n\n\n\nexample\n\n\nBelow, we set the slider's name \ngauge\n and triggers the \nnotice\n action, which accesses its value whenever the user ends the sliding action.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n      \n\"notice\": {\n        \"type\": \"$util.alert\",\n        \"options\": {\n          \"title\": \"Volume changed\",\n          \n\"description\": \"{{parseFloat($get.gauge)*100}}%\"\n\n        }\n      }\n\n      ...\n    },\n    \"body\": {\n      ...\n      \n{\n        \"type\": \"slider\",\n        \n\"name\": \"gauge\",\n\n        \"action\": {\n          \"trigger\": \"notice\"\n        }\n      }\n\n      ...\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\u25a0  html\n\n\nA self-contained web environment that you can plug in, style, and manipulate just like the rest of the components.\n\n\nTo learn more, refer to \nWeb containers\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\u25a0  space\n\n\nAn empty space component mostly used for layout purposes.\n\n\n\n\nsyntax\n\n\n\n\nstyle\n\n\nbackground\n: background color (transparent if not specified)\n\n\nwidth\n: only specify if you want a horizontally fixed size space\n\n\nheight\n: only specify if you want a vertically fixed size space\n\n\n\n\n\n\n\n\nExample 1. Flexible size space\n\n\nIf you don't specify the style, the space component will contract or expand flexibly depending on its surrounding sibling components.\n\n\nThis is useful for when you wish to make special alignments, such as aligning one component to the left, and the other to the right in a horizontal layout.\n\n\n{\n  \"type\": \"horizontal\",\n  \"components\": [\n    \n{\n      \"type\": \"image\",\n      \"url\": \"https://jasonclient.org/img/john.png\",\n      \"style\": {\n        \"width\": \"50\"\n      }\n    }, \n    \n{\n      \"type\": \"space\"\n    },\n\n    {\n      \"type\": \"button\",\n      \"text\": \"Follow\"\n      \"style\": {\n        \"width\": \"100\",\n        \"height\": \"50\"\n      }\n    }\n\n  ]\n}\n\n\n\nExample 2. Fixed size space\n\n\nYou can also set the size of a space component.\n\n\n{\n  \"type\": \"vertical\",\n  \"components\": [\n    \n{\n      \"type\": \"image\",\n      \"url\": \"https://jasonclient.org/img/john.png\",\n      \"style\": {\n        \"width\": \"50\"\n      }\n    }, \n    \n{\n      \"type\": \"space\",\n      \"style\": {\n        \"height\": \"50\"\n      }\n    },\n\n    {\n      \"type\": \"label\",\n      \"text\": \"The names 'John Doe' or 'John Roe' for men, 'Jane Doe' or 'Jane Roe' for women, or 'Johnnie Doe' and 'Janie Doe' for children, or just 'Doe' non-gender-specifically are used as placeholder names for a party whose true identity is unknown or must be withheld in a legal action, case, or discussion.\"\n    }\n\n  ]\n}\n\n\n\n\n\n\u25a0  map\n\n\nMap component\n\n\n\n\nsyntax\n\n\n\u2022 \ntype\n: \n\"map\"\n\n\n\u2022 \nregion\n: Describes the region this map component will draw.\n\n\n\n\ncoord\n: Coordinate string in \nLATITUDE,LONGITUDE\n format, around which the map should be centered. (example: \n\"40.7146598,-73.9418602\"\n)\n\n\nwidth\n: The width in meters in terms of how wide the map region should be\n\n\nheight\n: The height in meters in terms of how wide the map region should be\n\n\n\n\n\u2022 \npins\n: Array of pin objects. Each pin contains the following attributes:\n\n\n\n\ncoord\n: Coordinate string in \nLATITUDE,LONGITUDE\n format. (example: \n\"40.7146598,-73.9418602\"\n)\n\n\ntitle\n\n\ndescription\n\n\nstyle\n\n\nselected\n: display the annotation by default even when not tapped.\n\n\n\n\n\n\n\n\n\u2022 \nstyle\n: Styling of the component itself\n\n\n\n\ntype\n: \n\"satellite\"\n | \n\"hybrid\"\n | \n\"hybrid_flyover\"\n | \n\"satellite_flyover\"\n\n\nwidth\n: width of the component to display\n\n\nheight\n: height of the component to display\n\n\ncorner_radius\n: corner radius of the component\n\n\n\n\nExample\n\n\n{\n  \"type\": \"map\",\n  \"region\": {\n    \"coord\": \"40.7197614,-73.9909211\",\n    \"width\": \"100\",\n    \"height\": \"100\"\n  },\n  \"pins\": [{\n    \"title\": \"This is a pin\",\n    \"description\": \"It really is.\",\n    \"coord\": \"40.7197614,-73.9909211\",\n    \"style\": {\n      \"selected\": \"true\"\n    }\n  }],\n  \"style\": {\n    \"width\": \"100%\",\n    \"height\": \"300\"\n  }\n}\n\n\n\nPermissions and API Keys\n\n\nOn iOS the map component works right out of the box using Apple's native map.\n\n\nHowever on Android you need to set it up using Google Maps API.\n\n\n\n\nJust open up \nAndroidManifest.xml\n file from Android Studio.\n\n\nUncomment the lines described below:\n\n\nAnd add your Google Maps API Key (You can get it from \nhere\n)\n\n\n\n\n\n\n\n\nTypes of Components - EBF Additions\n\n\n\n\ntoggle\n\n\nradiobuttons\n\n\ncheckboxes\n\n\ndropdown\n\n\ndatepicker\n\n\ndatetimepicker\n\n\nnumberfield\n\n\npager\n\n\n\n\n\u25a0 toggle\n\n\nToggle (Switch) view to display a boolean value. The label is always Yes or No (internationalized on the client). The value must be \n\"0\"\n (No) or \n\"1\"\n (Yes).\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"toggle\"\n\n\nname\n: name of the local variable to set.\n\n\nvalue\n: \n\"0\"\n or \n\"1\"\n\n\nstyle\n:\n\n\nsize\n: text size\n\n\ncolor\n: color in color code (applies to background and border, complimentary color is always transparent, so that the background \"shines\" through)\n\n\npadding\n: padding in pixels around the entire component\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"toggle\",\n  \"name\": \"someFieldName\",\n  \"value\": \"true\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n\n\n\n\n\u25a0 radiobuttons\n\n\nDisplays a set of buttons, of which only one button can be selected at once. The selected button is highlighted.\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"radiobuttons\"\n\n\nname\n: name of the local variable to set.\n\n\noptions\n: an array of option objects, each of which contains a label, a value and defaultSelected property\n\n\nstyle\n:\n\n\nsize\n: text size\n\n\ncolor\n: text color in color code\n\n\npadding\n: padding in pixels around the entire component\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"radiobuttons\",\n  \"name\": \"someFieldName\",\n  \"options\": [\n    {\n      \"label\": \"Radio Button 01\",\n      \"value\": \"Value 1\",\n      \"defaultSelected\": \"false\"\n    },\n    {\n      \"label\": \"Radio Button 02\",\n      \"value\": \"Value 2\",\n      \"defaultSelected\": \"true\"\n    },\n    {\n      \"label\": \"Radio Button 03\",\n      \"value\": \"Value 3\",\n      \"defaultSelected\": \"false\"\n    }\n  ],\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n\n\n\n\n\u25a0 checkboxes\n\n\nDisplays a set of buttons each containing a checkbox and a label. Multiple buttons can be selected at the same time.\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"checkboxes\"\n\n\nname\n: name of the local variable to set.\n\n\noptions\n: an array of option objects, each of which contains a label, a value and defaultSelected property\n\n\nstyle\n:\n\n\nsize\n: text size\n\n\ncolor\n: text color in color code\n\n\npadding\n: padding in pixels around the entire component\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"checkboxes\",\n  \"name\": \"someFieldName\",\n  \"options\": [\n    {\n      \"label\": \"Checkbox Option 1\",\n      \"value\": \"Value 1\",\n      \"defaultSelected\": \"true\"\n    },\n    {\n      \"label\": \"Checkbox Option 2\",\n      \"value\": \"Value 2\",\n      \"defaultSelected\": \"false\"\n    },\n    {\n      \"label\": \"Checkbox Option 3\",\n      \"value\": \"Value 3\",\n      \"defaultSelected\": \"true\"\n    }\n  ],\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n\n\n\n\n\u25a0 dropdown\n\n\nDisplays a dropdown element. When the user taps the element, a list of options is presented to the user. The user may select only one option at a time.\n\n\nDropDown element before selection\n\n\n\n\nDropDown selection slideout\n\n\n\n\nDropDown element after selection (or when defaultValue is set)\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"dropdown\"\n\n\nname\n: name of the local variable to set.\n\n\noptions\n: an array of option objects, each of which contains a label, a value and defaultSelected property\n\n\nstyle\n:\n\n\nsize\n: text size\n\n\ncolor\n: text color in color code\n\n\npadding\n: padding in pixels around the entire component\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"dropdown\",\n  \"name\": \"someFieldName\",\n  \"options\": [\n    {\n      \"label\": \"Dropdown Option 1\",\n      \"value\": \"Value 1\",\n      \"defaultSelected\": \"false\"\n    },\n    {\n      \"label\": \"Dropdown Option 2\",\n      \"value\": \"Value 2\",\n      \"defaultSelected\": \"true\"\n    },\n    {\n      \"label\": \"Dropdown Option 3\",\n      \"value\": \"Value 3\",\n      \"defaultSelected\": \"false\"\n    }\n  ],\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n\n\n\n\n\u25a0 datepicker\n\n\nDate Picker view. Allows the user to select a date without time.\n\n\nTODO: @ogy: replace these ugly ass images\n\n\ndatepicker component before selection\n\n\n\n\ndatepicker component upon selection\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"datepicker\"\n\n\nname\n: name of the local variable to set.\n\n\ndefaultValue\n: \nISO8601 compliant date\n\n\nstyle\n: (applies to datepicker component before selection only)\n\n\nsize\n: text size\n\n\ncolor\n: color in color code (applies to background and border, complimentary color is always transparent, so that the background \"shines\" through)\n\n\npadding\n: padding in pixels around the entire component\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"datepicker\",\n  \"name\": \"someFieldName\",\n  \"defaultValue\": \"2017-01-30T00:00:00Z\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n---\n\n\n\n\u25a0 datetimepicker\n\n\nDateTime Picker view. Allows the user to select a date and time.\n\n\nTODO: @ogy: replace these ugly ass images\n\n\ndatetimepicker component before selection\n\n\n\n\ndatetimepicker component upon selection\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"datetimepicker\"\n\n\nname\n: name of the local variable to set.\n\n\ndefaultValue\n: \nISO8601 compliant date\n\n\nstyle\n: (applies to datetimepicker component before selection only)\n\n\nsize\n: text size\n\n\ncolor\n: color in color code (applies to background and border, complimentary color is always transparent, so that the background \"shines\" through)\n\n\npadding\n: padding in pixels around the entire component\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"datetimepicker\",\n  \"name\": \"someFieldName\",\n  \"defaultValue\": \"2017-01-30T00:00:00Z\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n\n\n\n\n\u25a0 numberfield\n\n\nComponent to display and edit number values\n\n\nTODO: @ogy: design number fields\n\n\nsyntax\n\n\n\n\ntype\n: \n\"numberfield\"\n\n\nname\n: name of the local variable to set.\n\n\ndefaultValue\n: optional default number\n\n\nplaceholder\n: optional placholder number to display if field is empty\n\n\nminimumValue\n: optional minimum number the user is allowed to enter\n\n\nmaximumValue\n: optional maximum number the user is allowed to enter\n\n\nstyle\n:\n\n\nsize\n: text size\n\n\ncolor\n: color in color code\n\n\npadding\n: padding in pixels around the entire component\n\n\n\n\n\n\n\n\nexample\n\n\n{\n  \"type\": \"numberfield\",\n  \"name\": \"someFieldName\",\n  \"defaultValue\": \"5\",\n  \"placeholder\": \"1\",\n  \"minimumValue\": \"1\",\n  \"maximumValue\": \"10\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n\n\n\n\n\u25a0 pager\n\n\nComponent that allows the user to switch between different pages of components by swiping left and right\n\n\npager component\n\n\n\n\npager component with position \n\"bottom\"\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"pager\"\n\n\nposition\n: \n\"top\"\n or \n\"bottom\"\n\n\npages\n: array of pages that contain a name and a components property each\n\n\n\n\nexample\n\n\n{\n  \"type\": \"pager\",\n  \"pages\": [\n    {\n      \"name\": \"Form_Page 01\",\n      \"components\": [\n\n      ]\n    },\n    {\n      \"name\": \"Page 2\",\n      \"components\": [\n\n      ]\n    },\n  ]\n}", 
            "title": "\u2605 Components"
        }, 
        {
            "location": "/components/#types-of-components", 
            "text": "Components are user interface elements that can be used in different places, such as  items , and  layers .   label  image  button  textfield  textarea  slider  html  space  map  Don't see what you want?  You can add more!", 
            "title": "Types of Components"
        }, 
        {
            "location": "/components/#label", 
            "text": "Static uneditable text element.", 
            "title": "\u25a0 label"
        }, 
        {
            "location": "/components/#syntax", 
            "text": "type :  \"label\"  text : The text to display  style :  font :  text font name  size : text size  color : text color in color code  padding : padding in pixels  background : background color of the label in color code  corner_radius : corner radius for the label", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example", 
            "text": "{\n  \"type\": \"label\",\n  \"text\": \"Hello world\",\n  \"style\": {\n    \"font\": \"Avenir\",\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#image", 
            "text": "Image loaded from either remote url or data-url     \u26a0\ufe0f Disclaimer:  image components are NOT Interactive. To attach  action  or  href  to make an image interactive, use  image buttons", 
            "title": "\u25a0 image"
        }, 
        {
            "location": "/components/#syntax_1", 
            "text": "type :  \"image\"  url : image url  header : (optional) in case the image needs authentication and we need to attach a header object to the request  style  (optional)  corner_radius : corner radius. use this to make the image rounded  width  height  color : To set the tint color (only for icons)", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_1", 
            "text": "{\n  \"type\": \"image\",\n  \"url\": \"http://i.imgur.com/KUJPgGV.png\",\n  \"header\": {\n    \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\"\n  },\n  \"style\": {\n    \"width\": \"50\",\n    \"height\": \"50\",\n    \"corner_radius\": \"25\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#button", 
            "text": "A basic component that responds to user tap.  Can be either a text button or an image button, depending on what attributes are used.", 
            "title": "\u25a0  button"
        }, 
        {
            "location": "/components/#syntax_2", 
            "text": "type :  \"button\"  text : button text (pick either  text  or  url , can't have both)  url : button image url (pick either  text  or  url , can't have both)  header : (optional) in case the we're using the image button and the image needs authentication and we need to attach a header object to the request  style  width : Width of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region)  height : Height of the clickable region (In case of image buttons, the image will auto-resize proportionally to fit into this region)  color : text color  background : background color  color : To set the tint color (only for icons)  corner_radius : corner radius for the button  padding : padding outside of the text (in case of text button) or outside of the image (in case of image button). Note that the height and width will stay the same regardless of what padding value you set.  align : Only for text buttons. You can set it as  left ,  right , or  center . The default is  center . (Irrelevant on image buttons since image buttons will always be centered)    action  : Attach an action attribute to be triggered when user taps the button.", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_2", 
            "text": "Text button  Use  text  attribute to make it a label button  {\n  \"type\": \"button\",\n  \"text\": \"Tap Me!\",\n  \"style\": {\n    \"width\": \"50\",\n    \"height\": \"50\",\n    \"background\": \"#00ff00\",\n    \"color\": \"#ffffff\",\n    \"font\": \"HelveticaNeue\",\n    \"size\": \"12\",\n    \"corner_radius\": \"25\"\n  },\n  \"action\": {\n    \"trigger\": \"reload\"\n  }\n}  Image button  Use  url  attribute to make it an image button  {\n  \"type\": \"button\",\n  \"url\": \"https://raw.githubusercontent.com/Jasonette/Jasonpedia/gh-pages/assets/krusty.png\",\n  \"header\": {\n    \"auth_token\": \"3nfdss3fNdlenghs_dnekgldnvq334hd\"\n  },\n  \"style\": {\n    \"width\": \"50\",\n    \"height\": \"50\",\n    \"background\": \"#00ff00\",\n    \"color\": \"#ffffff\",\n    \"font\": \"HelveticaNeue\",\n    \"size\": \"12\",\n    \"corner_radius\": \"25\"\n  },\n  \"action\": {\n    \"trigger\": \"reload\"\n  }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/components/#textfield", 
            "text": "Single line input field    textfields are seamlessly integrated with  local variables", 
            "title": "\u25a0 textfield"
        }, 
        {
            "location": "/components/#syntax_3", 
            "text": "name : name of the local variable to set.  value : in case you wish to prefill the field.  placeholder : Placeholder text for when there's no content filled in.  keyboard : The keyboard type. One of the following:  \"text\"  |  \"number\"  |  \"phone\"  |  \"url\"  |  \"email\"  (if unspecified, the default is  \"text\" )  style : style the textfield  background  align  autocorrect : set to  \"true\"  to enable autocorrect  autocapitalize : set to  \"true\"  to enable autocapitalize  spellcheck : set to  \"true\"  to enable spellcheck  size : text size  font : text font  color : text color  placeholder_color : placeholder text color  secure:  hide character input if set to  \"true\"", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#examples", 
            "text": "", 
            "title": "examples"
        }, 
        {
            "location": "/components/#example-1-password-input", 
            "text": "{\n  \"type\": \"textfield\",\n  \"name\": \"password\",\n  \"value\": \"dhenf93f!\",\n  \"placeholder\": \"Enter password\",\n  \"style\": {\n    \"placeholder_color\": \"#cecece\",\n    \"font\": \"HelveticaNeue\",\n    \"align\": \"center\",\n    \"width\": \"200\",\n    \"height\": \"60\",\n    \"secure\": \"true\",\n    \"size\": \"12\"\n  }\n}", 
            "title": "Example 1: password input"
        }, 
        {
            "location": "/components/#example-2-autocorrectautocaptiazliespellcheck-input", 
            "text": "{\n  \"type\": \"textfield\",\n  \"name\": \"status\",\n  \"placeholder\": \"Status update\",\n  \"style\": {\n    \"placeholder_color\": \"#cecece\",\n    \"font\": \"HelveticaNeue\",\n    \"align\": \"center\",\n    \"width\": \"200\",\n    \"height\": \"60\",\n    \"autocorrect\": \"true\",\n    \"autocapitalize\": \"true\",\n    \"spellcheck\": \"true\",\n    \"size\": \"12\"\n  }\n}", 
            "title": "Example 2: autocorrect/autocaptiazlie/spellcheck input"
        }, 
        {
            "location": "/components/#textarea", 
            "text": "Multiline input field    name : name of the local variable to set.  value : in case you wish to prefill the field.  placeholder : Placeholder text for when there's no content filled in.  keyboard : The keyboard type. One of the following:  \"text\"  |  \"number\"  |  \"phone\"  |  \"url\"  |  \"email\"  (if unspecified, the default is  \"text\" )  style : style the textfield  background  align :  \"left\"  |  \"center\"  |  \"right\"  (default is  \"left\" )  autocorrect : set to  \"true\"  to enable autocorrect  autocapitalize : set to  \"true\"  to enable autocapitalize  spellcheck : set to  \"true\"  to enable spellcheck  size : text size  font : text font  color : text color  placeholder_color : placeholder text color", 
            "title": "\u25a0 textarea"
        }, 
        {
            "location": "/components/#example_3", 
            "text": "Below, we've named the textarea  status , and then refer to its value from  submit  action through the template expression  {{$get.status}}  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        ...\n         \"submit\" : {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://stts.jasonclient.org/status.json\",\n            \"method\": \"post\",\n            \"data\": {\n              \"content\":  \"{{$get.status}}\" \n            }\n          },\n          \"success\": {\n            \"type\": \"$reload\"\n          }\n        } \n        ...\n      }\n    },\n    \"body\": {\n      ...\n       {\n        \"type\": \"textarea\",\n         \"name\": \"status\", \n        \"placeholder\": \"Status update\",\n        \"value\": \"Eating lunch..\",\n        \"style\": {\n          \"background\": \"rgba(0,0,0,0)\",\n          \"placeholder_color\": \"#cecece\",\n          \"font\": \"HelveticaNeue\",\n          \"align\": \"center\",\n          \"width\": \"100%\",\n          \"height\": \"300\",\n          \"autocorrect\": \"true\",\n          \"autocapitalize\": \"true\",\n          \"spellcheck\": \"true\",\n          \"size\": \"12\"\n        }\n      } \n      ...\n    }\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#slider", 
            "text": "Horizontal slider input", 
            "title": "\u25a0 slider"
        }, 
        {
            "location": "/components/#syntax_4", 
            "text": "name : name of the local variable to set.  value : value between 0 and 1 (in string) to preset the slider with. For example  \"0.3\"  action :  action  to execute after user completes the sliding gesture.  style  width  height  color", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_4", 
            "text": "Below, we set the slider's name  gauge  and triggers the  notice  action, which accesses its value whenever the user ends the sliding action.  {\n  \"$jason\": {\n    \"head\": {\n      ...\n       \"notice\": {\n        \"type\": \"$util.alert\",\n        \"options\": {\n          \"title\": \"Volume changed\",\n           \"description\": \"{{parseFloat($get.gauge)*100}}%\" \n        }\n      } \n      ...\n    },\n    \"body\": {\n      ...\n       {\n        \"type\": \"slider\",\n         \"name\": \"gauge\", \n        \"action\": {\n          \"trigger\": \"notice\"\n        }\n      } \n      ...\n    }\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#html", 
            "text": "A self-contained web environment that you can plug in, style, and manipulate just like the rest of the components.  To learn more, refer to  Web containers .", 
            "title": "\u25a0  html"
        }, 
        {
            "location": "/components/#space", 
            "text": "An empty space component mostly used for layout purposes.", 
            "title": "\u25a0  space"
        }, 
        {
            "location": "/components/#syntax_5", 
            "text": "style  background : background color (transparent if not specified)  width : only specify if you want a horizontally fixed size space  height : only specify if you want a vertically fixed size space", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example-1-flexible-size-space", 
            "text": "If you don't specify the style, the space component will contract or expand flexibly depending on its surrounding sibling components.  This is useful for when you wish to make special alignments, such as aligning one component to the left, and the other to the right in a horizontal layout.  {\n  \"type\": \"horizontal\",\n  \"components\": [\n     {\n      \"type\": \"image\",\n      \"url\": \"https://jasonclient.org/img/john.png\",\n      \"style\": {\n        \"width\": \"50\"\n      }\n    }, \n     {\n      \"type\": \"space\"\n    }, \n    {\n      \"type\": \"button\",\n      \"text\": \"Follow\"\n      \"style\": {\n        \"width\": \"100\",\n        \"height\": \"50\"\n      }\n    } \n  ]\n}", 
            "title": "Example 1. Flexible size space"
        }, 
        {
            "location": "/components/#example-2-fixed-size-space", 
            "text": "You can also set the size of a space component.  {\n  \"type\": \"vertical\",\n  \"components\": [\n     {\n      \"type\": \"image\",\n      \"url\": \"https://jasonclient.org/img/john.png\",\n      \"style\": {\n        \"width\": \"50\"\n      }\n    }, \n     {\n      \"type\": \"space\",\n      \"style\": {\n        \"height\": \"50\"\n      }\n    }, \n    {\n      \"type\": \"label\",\n      \"text\": \"The names 'John Doe' or 'John Roe' for men, 'Jane Doe' or 'Jane Roe' for women, or 'Johnnie Doe' and 'Janie Doe' for children, or just 'Doe' non-gender-specifically are used as placeholder names for a party whose true identity is unknown or must be withheld in a legal action, case, or discussion.\"\n    } \n  ]\n}", 
            "title": "Example 2. Fixed size space"
        }, 
        {
            "location": "/components/#map", 
            "text": "Map component", 
            "title": "\u25a0  map"
        }, 
        {
            "location": "/components/#syntax_6", 
            "text": "", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#type-map", 
            "text": "", 
            "title": "\u2022 type: \"map\""
        }, 
        {
            "location": "/components/#region-describes-the-region-this-map-component-will-draw", 
            "text": "coord : Coordinate string in  LATITUDE,LONGITUDE  format, around which the map should be centered. (example:  \"40.7146598,-73.9418602\" )  width : The width in meters in terms of how wide the map region should be  height : The height in meters in terms of how wide the map region should be", 
            "title": "\u2022 region: Describes the region this map component will draw."
        }, 
        {
            "location": "/components/#pins-array-of-pin-objects-each-pin-contains-the-following-attributes", 
            "text": "coord : Coordinate string in  LATITUDE,LONGITUDE  format. (example:  \"40.7146598,-73.9418602\" )  title  description  style  selected : display the annotation by default even when not tapped.", 
            "title": "\u2022 pins: Array of pin objects. Each pin contains the following attributes:"
        }, 
        {
            "location": "/components/#style-styling-of-the-component-itself", 
            "text": "type :  \"satellite\"  |  \"hybrid\"  |  \"hybrid_flyover\"  |  \"satellite_flyover\"  width : width of the component to display  height : height of the component to display  corner_radius : corner radius of the component", 
            "title": "\u2022 style: Styling of the component itself"
        }, 
        {
            "location": "/components/#example_5", 
            "text": "{\n  \"type\": \"map\",\n  \"region\": {\n    \"coord\": \"40.7197614,-73.9909211\",\n    \"width\": \"100\",\n    \"height\": \"100\"\n  },\n  \"pins\": [{\n    \"title\": \"This is a pin\",\n    \"description\": \"It really is.\",\n    \"coord\": \"40.7197614,-73.9909211\",\n    \"style\": {\n      \"selected\": \"true\"\n    }\n  }],\n  \"style\": {\n    \"width\": \"100%\",\n    \"height\": \"300\"\n  }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/components/#permissions-and-api-keys", 
            "text": "On iOS the map component works right out of the box using Apple's native map.  However on Android you need to set it up using Google Maps API.   Just open up  AndroidManifest.xml  file from Android Studio.  Uncomment the lines described below:  And add your Google Maps API Key (You can get it from  here )", 
            "title": "Permissions and API Keys"
        }, 
        {
            "location": "/components/#types-of-components-ebf-additions", 
            "text": "toggle  radiobuttons  checkboxes  dropdown  datepicker  datetimepicker  numberfield  pager", 
            "title": "Types of Components - EBF Additions"
        }, 
        {
            "location": "/components/#toggle", 
            "text": "Toggle (Switch) view to display a boolean value. The label is always Yes or No (internationalized on the client). The value must be  \"0\"  (No) or  \"1\"  (Yes).", 
            "title": "\u25a0 toggle"
        }, 
        {
            "location": "/components/#syntax_7", 
            "text": "type :  \"toggle\"  name : name of the local variable to set.  value :  \"0\"  or  \"1\"  style :  size : text size  color : color in color code (applies to background and border, complimentary color is always transparent, so that the background \"shines\" through)  padding : padding in pixels around the entire component", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_6", 
            "text": "{\n  \"type\": \"toggle\",\n  \"name\": \"someFieldName\",\n  \"value\": \"true\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#radiobuttons", 
            "text": "Displays a set of buttons, of which only one button can be selected at once. The selected button is highlighted.", 
            "title": "\u25a0 radiobuttons"
        }, 
        {
            "location": "/components/#syntax_8", 
            "text": "type :  \"radiobuttons\"  name : name of the local variable to set.  options : an array of option objects, each of which contains a label, a value and defaultSelected property  style :  size : text size  color : text color in color code  padding : padding in pixels around the entire component", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_7", 
            "text": "{\n  \"type\": \"radiobuttons\",\n  \"name\": \"someFieldName\",\n  \"options\": [\n    {\n      \"label\": \"Radio Button 01\",\n      \"value\": \"Value 1\",\n      \"defaultSelected\": \"false\"\n    },\n    {\n      \"label\": \"Radio Button 02\",\n      \"value\": \"Value 2\",\n      \"defaultSelected\": \"true\"\n    },\n    {\n      \"label\": \"Radio Button 03\",\n      \"value\": \"Value 3\",\n      \"defaultSelected\": \"false\"\n    }\n  ],\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#checkboxes", 
            "text": "Displays a set of buttons each containing a checkbox and a label. Multiple buttons can be selected at the same time.", 
            "title": "\u25a0 checkboxes"
        }, 
        {
            "location": "/components/#syntax_9", 
            "text": "type :  \"checkboxes\"  name : name of the local variable to set.  options : an array of option objects, each of which contains a label, a value and defaultSelected property  style :  size : text size  color : text color in color code  padding : padding in pixels around the entire component", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_8", 
            "text": "{\n  \"type\": \"checkboxes\",\n  \"name\": \"someFieldName\",\n  \"options\": [\n    {\n      \"label\": \"Checkbox Option 1\",\n      \"value\": \"Value 1\",\n      \"defaultSelected\": \"true\"\n    },\n    {\n      \"label\": \"Checkbox Option 2\",\n      \"value\": \"Value 2\",\n      \"defaultSelected\": \"false\"\n    },\n    {\n      \"label\": \"Checkbox Option 3\",\n      \"value\": \"Value 3\",\n      \"defaultSelected\": \"true\"\n    }\n  ],\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#dropdown", 
            "text": "Displays a dropdown element. When the user taps the element, a list of options is presented to the user. The user may select only one option at a time.  DropDown element before selection   DropDown selection slideout   DropDown element after selection (or when defaultValue is set)", 
            "title": "\u25a0 dropdown"
        }, 
        {
            "location": "/components/#syntax_10", 
            "text": "type :  \"dropdown\"  name : name of the local variable to set.  options : an array of option objects, each of which contains a label, a value and defaultSelected property  style :  size : text size  color : text color in color code  padding : padding in pixels around the entire component", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_9", 
            "text": "{\n  \"type\": \"dropdown\",\n  \"name\": \"someFieldName\",\n  \"options\": [\n    {\n      \"label\": \"Dropdown Option 1\",\n      \"value\": \"Value 1\",\n      \"defaultSelected\": \"false\"\n    },\n    {\n      \"label\": \"Dropdown Option 2\",\n      \"value\": \"Value 2\",\n      \"defaultSelected\": \"true\"\n    },\n    {\n      \"label\": \"Dropdown Option 3\",\n      \"value\": \"Value 3\",\n      \"defaultSelected\": \"false\"\n    }\n  ],\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#datepicker", 
            "text": "Date Picker view. Allows the user to select a date without time.  TODO: @ogy: replace these ugly ass images  datepicker component before selection   datepicker component upon selection", 
            "title": "\u25a0 datepicker"
        }, 
        {
            "location": "/components/#syntax_11", 
            "text": "type :  \"datepicker\"  name : name of the local variable to set.  defaultValue :  ISO8601 compliant date  style : (applies to datepicker component before selection only)  size : text size  color : color in color code (applies to background and border, complimentary color is always transparent, so that the background \"shines\" through)  padding : padding in pixels around the entire component", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_10", 
            "text": "{\n  \"type\": \"datepicker\",\n  \"name\": \"someFieldName\",\n  \"defaultValue\": \"2017-01-30T00:00:00Z\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}\n\n---", 
            "title": "example"
        }, 
        {
            "location": "/components/#datetimepicker", 
            "text": "DateTime Picker view. Allows the user to select a date and time.  TODO: @ogy: replace these ugly ass images  datetimepicker component before selection   datetimepicker component upon selection", 
            "title": "\u25a0 datetimepicker"
        }, 
        {
            "location": "/components/#syntax_12", 
            "text": "type :  \"datetimepicker\"  name : name of the local variable to set.  defaultValue :  ISO8601 compliant date  style : (applies to datetimepicker component before selection only)  size : text size  color : color in color code (applies to background and border, complimentary color is always transparent, so that the background \"shines\" through)  padding : padding in pixels around the entire component", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_11", 
            "text": "{\n  \"type\": \"datetimepicker\",\n  \"name\": \"someFieldName\",\n  \"defaultValue\": \"2017-01-30T00:00:00Z\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#numberfield", 
            "text": "Component to display and edit number values  TODO: @ogy: design number fields", 
            "title": "\u25a0 numberfield"
        }, 
        {
            "location": "/components/#syntax_13", 
            "text": "type :  \"numberfield\"  name : name of the local variable to set.  defaultValue : optional default number  placeholder : optional placholder number to display if field is empty  minimumValue : optional minimum number the user is allowed to enter  maximumValue : optional maximum number the user is allowed to enter  style :  size : text size  color : color in color code  padding : padding in pixels around the entire component", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_12", 
            "text": "{\n  \"type\": \"numberfield\",\n  \"name\": \"someFieldName\",\n  \"defaultValue\": \"5\",\n  \"placeholder\": \"1\",\n  \"minimumValue\": \"1\",\n  \"maximumValue\": \"10\",\n  \"style\": {\n    \"size\": \"30\",\n    \"color\": \"rgb(200,0,0)\",\n    \"padding\": \"10\"\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/components/#pager", 
            "text": "Component that allows the user to switch between different pages of components by swiping left and right  pager component   pager component with position  \"bottom\"", 
            "title": "\u25a0 pager"
        }, 
        {
            "location": "/components/#syntax_14", 
            "text": "type :  \"pager\"  position :  \"top\"  or  \"bottom\"  pages : array of pages that contain a name and a components property each", 
            "title": "syntax"
        }, 
        {
            "location": "/components/#example_13", 
            "text": "{\n  \"type\": \"pager\",\n  \"pages\": [\n    {\n      \"name\": \"Form_Page 01\",\n      \"components\": [\n\n      ]\n    },\n    {\n      \"name\": \"Page 2\",\n      \"components\": [\n\n      ]\n    },\n  ]\n}", 
            "title": "example"
        }, 
        {
            "location": "/layout/", 
            "text": "Types of layout\n\n\nYou can construct all kinds of sophisticated UIs for \nsection items/headers\n by laying out multiple \ncomponents\n vertically, horizontally, or through combination of the two.\n\n\n\n\nvertical\n\n\nhorizontal\n\n\nnested\n\n\n\n\n\n\nvertical\n\n\nIn a vertical layout, the item's components flow vertically, from top to bottom.\n\n\nExample\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"vertical layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [\n          {\n            \"type\": \"vertical\",\n            \"components\": [{\n              \"type\": \"label\",\n              \"text\": \"John Doe\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"33\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"A normal guy with a normal name\"\n            }]\n          }\n        ]\n      }]\n    }\n  }\n}\n\n\n\nAbove JSON will render into the following view:\n\n\n\n\n\n\nhorizontal\n\n\nIn a horizontal layout, the item's components flow horizontally, from left to right.\n\n\nExample\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"horizontal layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"horizontal\",\n          \"components\": [{\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }, {\n            \"type\": \"label\",\n            \"text\": \"Ethan\",\n            \"style\": { \"font\": \"HelveticaNeue-Bold\" }\n          }]\n        }]\n      }]\n    }\n  }\n}\n\n\n\nAbove JSON will render into the following view:\n\n\n\n\n\n\nNested layout\n\n\nA layout can also contain another layout as one of its components. This way you can create any type of sophisticated layout you want by nesting one layout inside another.\n\n\nHere's an example:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"nested layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"horizontal\",\n          \"components\": [{\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }, {\n            \"type\": \"vertical\",\n            \"components\": [{\n              \"type\": \"label\",\n              \"text\": \"Ethan\",\n              \"style\": { \"font\": \"HelveticaNeue-Bold\" }\n            }, {\n              \"type\": \"label\",\n              \"text\": \"Gliechtenstein\"\n            }]\n          }]\n        }]\n      }]\n    }\n  }\n}\n\n\n\nAbove JSON will render into the following view:\n\n\n\n\n\n\nTypes of layout - EBF Additions\n\n\n\n\ngrid\n\n\n\n\ngrid\n\n\nA grid layout will display its components in rows and columns. The grid view will show as many columns per row as possible, based on \ncomponent_width\n, in order to accomodate for differnt screen dimensions. The height of a row is automatically calculated and must be equal to the height of the tallest item of that row. Components within a grid layout will be centered horizontally and vertically if they don't occupy all availble column space.\n\n\n\n\nsyntax\n\n\n\n\ntype\n: \n\"grid\"\n\n\ncomponent_width\n: The text to display\n\n\ngrid_border\n: The color in color code of the 1px border between grid items or \nnone\n if hidden\n\n\nstyle\n:\n\n\nbackground\n: background color of the grid layout\n\n\n\n\n\n\ncomponents\n: grid items\n\n\n\n\nexample\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"grid layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"grid\",\n          \"component_width\": \"200\",\n          \"grid_border\": \"#abcdef\",\n          \"components\": [{\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }, {\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }]\n        }]\n      }]\n    }\n  }\n}\n\n\n\n\n\nStyling a layout\n\n\nsyntax\n\n\n\u25a0  padding\n\n\nthe space surrounding the layout itself, in pixels.\n\n\nIf not specified, the default value is \n10\n.\n\n\n\u25a0  spacing\n\n\nthe space among each immediate children components, in pixels.\n\n\n\u25a0  background\n\n\nbackground color code (Example: \n{\"background\": \"#ff0000\"}\n, \n{\"background\": \"rgba(0,0,0,0.4)\"}\n)\n\n\n\u25a0  z_index\n\n\nspecifies the stack order of the layout, defining whether the layout is displayed on top of another or below. Default is 0. (Example: \n{\"z_index\": \"-1\"}\n\n\n\u25a0 opacity\n\n\nopacity (between \"0\" and \"1\")\n\n\n\u25a0  align\n\n\nHow the children components will be aligned perpendicular to the layout's direction.\n\n\n\n\n\n\nFor vertical layout\n\n\n\n\nleft\n: align left\n\n\ncenter\n: align center horizontally\n\n\nright\n: align right\n\n\n\n\n\n\n\n\nFor horizontal layout\n\n\n\n\ntop\n: align top\n\n\ncenter\n: align center\n\n\nbottom\n: align bottom\n\n\nfill\n: stretch all children vertically to fit the layout height equally\n\n\n\n\n\n\n\n\n\u25a0  distribution\n\n\nDescribes how the children components should be distributed in relation to one another.\n\n\nNormally you don't need to use this property, but this comes in handy when you just want child components to automatically stretch to each have the same size.\n\n\n\n\n\n\nFor vertical layout\n\n\n\n\n\"fill\"\n: The child components stretch to fill the layout (default)\n\n\n\"equalsize\"\n: The child components have the same size. Use this if you didn't specify height for any of them but want them to just expand to fill the layout each with the same height.\n\n\n\n\n\n\n\n\nFor horizontal layout\n\n\n\n\n\"fill\"\n: The child components stretch to fill the layout (default)\n\n\n\"equalsize\"\n: The child components have the same size. Use this if you didn't specify width for any of them but want them to just expand to fill the layout each with the same width.\n\n\n\n\n\n\n\n\nexamples\n\n\nExample 1. Vertical layout with center align\n\n\nIn case of vertical layout, it describes how the children components should be aligned horizontally.\n\n\nBelow, we see that the vertical layout has \n\"align\": \"center\"\n style.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"center aligned vertical layout\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"vertical\",\n          \"style\": {\n            \"align\": \"center\"\n          },\n          \"components\": [\n            {\n              \"type\": \"image\",\n              \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n              \"style\": {\n                \"width\": \"100\"\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"style\": {\n                \"color\": \"#000000\",\n                \"background\": \"#ff0000\"\n              },\n              \"text\": \"John Doe\"\n            },\n            {\n              \"type\": \"button\",\n              \"text\": \"Follow\",\n              \"style\": {\n                \"color\": \"#ff0000\",\n                \"background\": \"#000000\"\n              }\n            }\n          ]\n        }]\n      }]\n    }\n  }\n}\n\n\n\nThis would render into the following view:\n\n\n\n\nNotice how all components--image, label, and button--are center aligned.\n\n\n\n\nExample 2. Horizontal align with bottom align\n\n\nIn case of horizontal layout, \nalign\n describes how the children components should be aligned vertically.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"bottom aligned horizontal layout\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"horizontal\",\n          \"style\": {\n            \"align\": \"bottom\"\n          },\n          \"components\": [\n            {\n              \"type\": \"image\",\n              \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n              \"style\": {\n                \"width\": \"100\"\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"style\": {\n                \"background\": \"#000000\",\n                \"color\": \"#ff0000\"\n              },\n              \"text\": \"John Doe\"\n            },\n            {\n              \"type\": \"button\",\n              \"style\": {\n                \"background\": \"#ff0000\",\n                \"color\": \"#000000\"\n              },\n              \"text\": \"Follow\"\n            }\n          ]\n        }]\n      }]\n    }\n  }\n}\n\n\n\nAbove JSON will render into:\n\n\n\n\nNotice how all components--image, label, and button--are bottom aligned.\n\n\n\n\nExample 3. Padding and Spacing\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Padding and spacing demonstration\",\n      \"styles\": {\n        \"label_class\": {\n          \"background\": \"#ff0000\",\n          \"padding\": \"10\",\n          \"color\": \"#ffffff\"\n        }\n      }\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"#00ff00\",\n        \"border\": \"#000000\"\n      },\n      \"sections\": [{\n        \"items\": [\n          {\n            \"type\": \"vertical\",\n            \"components\": [{\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"First row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Second row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Third row\"\n            }]\n          },\n          {\n            \"type\": \"vertical\",\n            \"style\": {\n              \"padding\": \"50\"\n            },\n            \"components\": [{\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"First row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Second row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Third row\"\n            }]\n          },\n          {\n            \"type\": \"vertical\",\n            \"style\": {\n              \"padding\": \"50\",\n              \"spacing\": \"10\"\n            },\n            \"components\": [{\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"First row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Second row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Third row\"\n            }]\n          }\n        ]\n      }]\n    }\n  }\n}\n\n\n\nAbove JSON turns into the following view:\n\n\n\n\n\n\n\n\n\u2605 Here's what's going on:\n\n\n\n\n1. The first row has \nNO padding\n and \nNO spacing\n values.\n\n\nAs mentioned above, if no padding is specified, the default is \n10\n.\n\n\nThat's why we see the small gap between the red label and the edges.\n\n\n\n\n2. The second row has a padding of \n50\n.\n\n\nThat's why we see a larger gap (\n50\n pixels)\n\n\n\n\n3. The third row has the same padding as #2, but also a \nspacing\n of \n10\n.\n\n\nThe \nspacing\n attribute defines the space in pixels among child components. That's why we now see \n10\n pixels in between the red labels.", 
            "title": "\u2605 Layout"
        }, 
        {
            "location": "/layout/#types-of-layout", 
            "text": "You can construct all kinds of sophisticated UIs for  section items/headers  by laying out multiple  components  vertically, horizontally, or through combination of the two.   vertical  horizontal  nested", 
            "title": "Types of layout"
        }, 
        {
            "location": "/layout/#vertical", 
            "text": "In a vertical layout, the item's components flow vertically, from top to bottom.", 
            "title": "vertical"
        }, 
        {
            "location": "/layout/#example", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"vertical layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [\n          {\n            \"type\": \"vertical\",\n            \"components\": [{\n              \"type\": \"label\",\n              \"text\": \"John Doe\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"33\"\n            }, {\n              \"type\": \"label\",\n              \"text\": \"A normal guy with a normal name\"\n            }]\n          }\n        ]\n      }]\n    }\n  }\n}  Above JSON will render into the following view:", 
            "title": "Example"
        }, 
        {
            "location": "/layout/#horizontal", 
            "text": "In a horizontal layout, the item's components flow horizontally, from left to right.", 
            "title": "horizontal"
        }, 
        {
            "location": "/layout/#example_1", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"horizontal layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"horizontal\",\n          \"components\": [{\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }, {\n            \"type\": \"label\",\n            \"text\": \"Ethan\",\n            \"style\": { \"font\": \"HelveticaNeue-Bold\" }\n          }]\n        }]\n      }]\n    }\n  }\n}  Above JSON will render into the following view:", 
            "title": "Example"
        }, 
        {
            "location": "/layout/#nested-layout", 
            "text": "A layout can also contain another layout as one of its components. This way you can create any type of sophisticated layout you want by nesting one layout inside another.  Here's an example:  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"nested layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"horizontal\",\n          \"components\": [{\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }, {\n            \"type\": \"vertical\",\n            \"components\": [{\n              \"type\": \"label\",\n              \"text\": \"Ethan\",\n              \"style\": { \"font\": \"HelveticaNeue-Bold\" }\n            }, {\n              \"type\": \"label\",\n              \"text\": \"Gliechtenstein\"\n            }]\n          }]\n        }]\n      }]\n    }\n  }\n}  Above JSON will render into the following view:", 
            "title": "Nested layout"
        }, 
        {
            "location": "/layout/#types-of-layout-ebf-additions", 
            "text": "grid", 
            "title": "Types of layout - EBF Additions"
        }, 
        {
            "location": "/layout/#grid", 
            "text": "A grid layout will display its components in rows and columns. The grid view will show as many columns per row as possible, based on  component_width , in order to accomodate for differnt screen dimensions. The height of a row is automatically calculated and must be equal to the height of the tallest item of that row. Components within a grid layout will be centered horizontally and vertically if they don't occupy all availble column space.", 
            "title": "grid"
        }, 
        {
            "location": "/layout/#syntax", 
            "text": "type :  \"grid\"  component_width : The text to display  grid_border : The color in color code of the 1px border between grid items or  none  if hidden  style :  background : background color of the grid layout    components : grid items", 
            "title": "syntax"
        }, 
        {
            "location": "/layout/#example_2", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"grid layout demo\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"grid\",\n          \"component_width\": \"200\",\n          \"grid_border\": \"#abcdef\",\n          \"components\": [{\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }, {\n            \"type\": \"image\",\n            \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n            \"style\": {\n              \"width\": \"80\"\n            }\n          }]\n        }]\n      }]\n    }\n  }\n}", 
            "title": "example"
        }, 
        {
            "location": "/layout/#styling-a-layout", 
            "text": "", 
            "title": "Styling a layout"
        }, 
        {
            "location": "/layout/#syntax_1", 
            "text": "", 
            "title": "syntax"
        }, 
        {
            "location": "/layout/#padding", 
            "text": "the space surrounding the layout itself, in pixels.  If not specified, the default value is  10 .", 
            "title": "\u25a0  padding"
        }, 
        {
            "location": "/layout/#spacing", 
            "text": "the space among each immediate children components, in pixels.", 
            "title": "\u25a0  spacing"
        }, 
        {
            "location": "/layout/#background", 
            "text": "background color code (Example:  {\"background\": \"#ff0000\"} ,  {\"background\": \"rgba(0,0,0,0.4)\"} )", 
            "title": "\u25a0  background"
        }, 
        {
            "location": "/layout/#z_index", 
            "text": "specifies the stack order of the layout, defining whether the layout is displayed on top of another or below. Default is 0. (Example:  {\"z_index\": \"-1\"}", 
            "title": "\u25a0  z_index"
        }, 
        {
            "location": "/layout/#opacity", 
            "text": "opacity (between \"0\" and \"1\")", 
            "title": "\u25a0 opacity"
        }, 
        {
            "location": "/layout/#align", 
            "text": "How the children components will be aligned perpendicular to the layout's direction.    For vertical layout   left : align left  center : align center horizontally  right : align right     For horizontal layout   top : align top  center : align center  bottom : align bottom  fill : stretch all children vertically to fit the layout height equally", 
            "title": "\u25a0  align"
        }, 
        {
            "location": "/layout/#distribution", 
            "text": "Describes how the children components should be distributed in relation to one another.  Normally you don't need to use this property, but this comes in handy when you just want child components to automatically stretch to each have the same size.    For vertical layout   \"fill\" : The child components stretch to fill the layout (default)  \"equalsize\" : The child components have the same size. Use this if you didn't specify height for any of them but want them to just expand to fill the layout each with the same height.     For horizontal layout   \"fill\" : The child components stretch to fill the layout (default)  \"equalsize\" : The child components have the same size. Use this if you didn't specify width for any of them but want them to just expand to fill the layout each with the same width.", 
            "title": "\u25a0  distribution"
        }, 
        {
            "location": "/layout/#examples", 
            "text": "", 
            "title": "examples"
        }, 
        {
            "location": "/layout/#example-1-vertical-layout-with-center-align", 
            "text": "In case of vertical layout, it describes how the children components should be aligned horizontally.  Below, we see that the vertical layout has  \"align\": \"center\"  style.  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"center aligned vertical layout\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"vertical\",\n          \"style\": {\n            \"align\": \"center\"\n          },\n          \"components\": [\n            {\n              \"type\": \"image\",\n              \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n              \"style\": {\n                \"width\": \"100\"\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"style\": {\n                \"color\": \"#000000\",\n                \"background\": \"#ff0000\"\n              },\n              \"text\": \"John Doe\"\n            },\n            {\n              \"type\": \"button\",\n              \"text\": \"Follow\",\n              \"style\": {\n                \"color\": \"#ff0000\",\n                \"background\": \"#000000\"\n              }\n            }\n          ]\n        }]\n      }]\n    }\n  }\n}  This would render into the following view:", 
            "title": "Example 1. Vertical layout with center align"
        }, 
        {
            "location": "/layout/#notice-how-all-components-image-label-and-button-are-center-aligned", 
            "text": "", 
            "title": "Notice how all components--image, label, and button--are center aligned."
        }, 
        {
            "location": "/layout/#example-2-horizontal-align-with-bottom-align", 
            "text": "In case of horizontal layout,  align  describes how the children components should be aligned vertically.  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"bottom aligned horizontal layout\"\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"horizontal\",\n          \"style\": {\n            \"align\": \"bottom\"\n          },\n          \"components\": [\n            {\n              \"type\": \"image\",\n              \"url\": \"https://pbs.twimg.com/profile_images/557061751150112768/eMwi4Xz2.jpeg\",\n              \"style\": {\n                \"width\": \"100\"\n              }\n            },\n            {\n              \"type\": \"label\",\n              \"style\": {\n                \"background\": \"#000000\",\n                \"color\": \"#ff0000\"\n              },\n              \"text\": \"John Doe\"\n            },\n            {\n              \"type\": \"button\",\n              \"style\": {\n                \"background\": \"#ff0000\",\n                \"color\": \"#000000\"\n              },\n              \"text\": \"Follow\"\n            }\n          ]\n        }]\n      }]\n    }\n  }\n}  Above JSON will render into:", 
            "title": "Example 2. Horizontal align with bottom align"
        }, 
        {
            "location": "/layout/#notice-how-all-components-image-label-and-button-are-bottom-aligned", 
            "text": "", 
            "title": "Notice how all components--image, label, and button--are bottom aligned."
        }, 
        {
            "location": "/layout/#example-3-padding-and-spacing", 
            "text": "{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Padding and spacing demonstration\",\n      \"styles\": {\n        \"label_class\": {\n          \"background\": \"#ff0000\",\n          \"padding\": \"10\",\n          \"color\": \"#ffffff\"\n        }\n      }\n    },\n    \"body\": {\n      \"style\": {\n        \"background\": \"#00ff00\",\n        \"border\": \"#000000\"\n      },\n      \"sections\": [{\n        \"items\": [\n          {\n            \"type\": \"vertical\",\n            \"components\": [{\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"First row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Second row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Third row\"\n            }]\n          },\n          {\n            \"type\": \"vertical\",\n            \"style\": {\n              \"padding\": \"50\"\n            },\n            \"components\": [{\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"First row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Second row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Third row\"\n            }]\n          },\n          {\n            \"type\": \"vertical\",\n            \"style\": {\n              \"padding\": \"50\",\n              \"spacing\": \"10\"\n            },\n            \"components\": [{\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"First row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Second row\"\n            }, {\n              \"type\": \"label\",\n              \"class\": \"label_class\",\n              \"text\": \"Third row\"\n            }]\n          }\n        ]\n      }]\n    }\n  }\n}  Above JSON turns into the following view:", 
            "title": "Example 3. Padding and Spacing"
        }, 
        {
            "location": "/layout/#heres-whats-going-on", 
            "text": "", 
            "title": "\u2605 Here's what's going on:"
        }, 
        {
            "location": "/layout/#1-the-first-row-has-no-padding-and-no-spacing-values", 
            "text": "As mentioned above, if no padding is specified, the default is  10 .  That's why we see the small gap between the red label and the edges.", 
            "title": "1. The first row has NO padding and NO spacing values."
        }, 
        {
            "location": "/layout/#2-the-second-row-has-a-padding-of-50", 
            "text": "That's why we see a larger gap ( 50  pixels)", 
            "title": "2. The second row has a padding of 50."
        }, 
        {
            "location": "/layout/#3-the-third-row-has-the-same-padding-as-2-but-also-a-spacing-of-10", 
            "text": "The  spacing  attribute defines the space in pixels among child components. That's why we now see  10  pixels in between the red labels.", 
            "title": "3. The third row has the same padding as #2, but also a spacing of 10."
        }, 
        {
            "location": "/templates/", 
            "text": "\u25a0 What is a template?\n\n\nSometimes we may want to dynamically generate the JSON from the client side instead of directly using a JSON returned from the server.\n\n\nIt may be for rendering a local user input, it may be for rendering a result from a 3rd party API. There are several cases where templating makes sense. \nLearn more here\n\n\nTo achieve this we use templates.\n\n\n\n\nTemplates have slots (\n{{ }}\n) to be filled in.\n\n\nAll expressions inside \n{{ }}\n are evaluated with the data in memory and substituted in.\n\n\nTemplates handle not only evaluation but also support \nlooping (\n#each\n) and conditionals (\n#if/#elseif/#else\n)\n.\n\n\nTemplates are always declared under \n$jason.head.templates\n.\n\n\nMost of the times we just use the \nbody\n template (\n$jason.head.templates.body\n).\n\n\n\n\n\n\nvalid expressions\n\n\nJasonette template engine takes advantage of the native javascript engine. This means:\n\n\n1. Any expression that evaluates to a value.\n\n\n{\n  \"items\": [\n    {\n      \"type\": \"image\",\n      \"url\": \"{{$jason.image}}\"\n    },\n    {\n      \"type\": \"label\",\n      \"text\": \"{{$jason.username}}\"\n    }\n  ]\n}\n\n\n\n2. Any javascript expression.\n\n\nJasonette implements the native javascript engine to evaluate expressions. So you can use any javascript expression inside \n{{ }}\n.\n\n\n{\n  \"items\": [\n    {\n      \"type\": \"label\",\n      \"url\": \"Full JSON string\"\n    },\n    {\n      \"type\": \"label\",\n      \"text\": \"{{JSON.stringify($jason)}}\"\n    }\n  ]\n}\n\n\n\n3. A full fledged javascript function.\n\n\nIf it involves multiple instructions, you can even write a full fledged function inside the template expression.\n\n\nJust make sure to end with a \nreturn\n statement.\n\n\n{\n  \"items\": [\n    {\n      \"type\": \"label\",\n      \"url\": \"Reversed Fullname\"\n    },\n    {\n      \"type\": \"label\",\n      \"text\": \"{{var sorted_posts = $jason.posts.sort(function(a,b){ return new Date(b.created_at) - new Date(a.created_at); }); return sorted_posts[0];}}\"\n    }\n  ]\n}\n\n\n\nexample\n\n\nHere's an example where we use the \n$geo.get\n action to get the current location, and render it dynamically using the template.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Display location\",\n      \"actions\": {\n        \"type\": \"$geo.get\",\n        \"success\": {\n          \"type\": \"$render\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [\n              {\n                \"type\": \"label\",\n                \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\"\n              },\n              {\n                \"type\": \"label\",\n                \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\"\n              }           \n            ]\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nIn above JSON markup, the \n$jason.body\n part is missing, because we will dynamically generate it via \n$render\n.\n\n\nThe \n$render\n action will render the data with the template, and insert it into where \n$jason.body\n should be. The result would be:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Display location\",\n      \"actions\": {\n        \"type\": \"$geo.get\",\n        \"success\": {\n          \"type\": \"$render\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [\n              {\n                \"type\": \"label\",\n                \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\"\n              },\n              {\n                \"type\": \"label\",\n                \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\"\n              }           \n            ]\n          }]\n        }\n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [\n          {\n            \"type\": \"label\",\n            \"text\": \"Latitude: 12.1234\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Longitude: 23.2345\"\n          }           \n        ]\n      }]\n    }\n  }\n}\n\n\n\nNotice how we now have the \n$jason.body\n filled out.\n\n\n\n\n\u25a0 Syntax\n\n\nJSON\n\n\nLet's take a look at how JSON templating works:\n\n\n\n\n1. Loop (#each)\n\n\nTo demonstrate looping, let's look at an example. We have a static JSON that looks like this:\n\n\n{\n  \"body\": {\n    \"sections\": [{\n      \"items\": [\n        {\n          \"type\": \"label\",\n          \"text\": \"Homer\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Marge\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Lisa\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Bart\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Maggie\"\n        }\n      ]\n    }]\n  }\n}\n\n\n\nIF you look at each item, the only part that's custom is the name (\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"). We want to shorten this so that we don't have to rewrite \n\"type\": \"label\"\n for every item.\n\n\nFirst, we need to declare a data attribute (\nLearn more about \nhead.data\n):\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"data\": {\n        \"members\": [\n          { \"name\": \"Homer\" },\n          { \"name\": \"Marge\" },\n          { \"name\": \"Lisa\" },\n          { \"name\": \"Bart\" },\n          { \"name\": \"Maggie\" }\n        ]\n      }\n    }\n  }\n}\n\n\n\nThen we will declare a \nbody\n template that will iterate through this \nmembers\n array and turn each into renderable item.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"data\": {\n        \"members\": [\n          { \"name\": \"Homer\" },\n          { \"name\": \"Marge\" },\n          { \"name\": \"Lisa\" },\n          { \"name\": \"Bart\" },\n          { \"name\": \"Maggie\" }\n        ]\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each members}}\": {\n                \"type\": \"label\",\n                \"text\": \"{{name}}\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nThe \n#each\n keyword will iterate through the expression that comes after it (\nmembers\n) and generate a JSON array from the result, ending up with the final JSON markup we saw at the beginning.\n\n\nHow to access variables from inside nested #each\n\n\nWhen there's only a single \n#each\n expression it's simple. But when we have multiple \n#each\n expressions, dealing with context becomes a bit tricky.\n\n\nHere's an example:\n\n\n{\n  \"{{#each families}}\": {\n    \"{{#each members}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\"\n    }\n  }\n}\n\n\n\nWhat if we want to access \nfamilies\n object from inside the nested \n{{#each members}}\n loop? \n\n\nWe can't just do:\n\n\n{\n  \"{{#each families}}\": {\n    \"{{#each members}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{families.length}}\"\n    }\n  }\n}\n\n\n\nbecause inside the \n{{#each members}}\n loop, the context is each family member. Above expression will result in the parser trying to access for example \nmembers[0].families.length\n instead of \nfamilies.length\n. It will throw an error because a \nmember\n object doesn't contain a \nfamilies\n attribute.\n\n\nWe need a way to access the root context. This is where \n$root\n comes in.\n\n\nWhenever you're inside a loop, you can refer to the root context using \n$root\n. So above example will be:\n\n\n{\n  \"{{#each families}}\": {\n    \"{{#each members}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{$root.families.length}}\"\n    }\n  }\n}\n\n\n\nYou can use the \n$root\n object to access everything at the root level, such as \n$get\n (through \n$root.$get\n), \n$cache\n (through \n$root.$cache\n), \n$global\n (through \n$root.$global\n), etc.\n\n\n\n\n2. Conditional (#if/#elseif/#else)\n\n\nConditionals are used to conditionally render their children only when the expression evaluates to \ntrue\n.\n\n\nConditionals take the form of an \narray\n.\n\n\n\n\nThe parser walks through the array sequentially\n\n\nExecutes each conditional expression\n\n\nAnd Renders the child JSON of the first conditional expression that evaluates to \ntrue\n\n\n\n\nsyntax\n\n\nConditionals take the following format.\n\n\n[\n  {\n    \"{{#if (EXPRESSION A)}}\": (JSON)\n  },\n  {\n    \"{{#elseif (EXPRESSION B)}}\": (JSON)\n  }\n  {\n    \"{{#else (EXPRESSION C)}}\": (JSON)\n  }\n]\n\n\n\nThe template will walk through the items in the array sequentially until it encounters an conditional expression that's true. Then it will only render its child JSON.\n\n\nNote\n\n\n\n\n#elseif\n and \n#else\n are optional.\n\n\nif no conditional expression evaluates to \ntrue\n, nothing gets rendered.\n\n\n\n\nExample\n\n\nLet's say we are are trying to render the following return value (\n$jason\n):\n\n\n{\n  \"data\": {\n    \"name\": \"Homer\"\n  }\n}\n\n\n\nWhat happens when we run above data through the following template?\n\n\n{\n    \"type\": \"label\",\n    \"text\": [\n        {\n            \"{{#if $jason.data.name=='Bart'}}\": \"Ay Caramba!\"\n        },\n        {\n            \"{{#elseif $jason.data.name=='Homer'}}\": \"Donuts...\"\n        }\n    ]\n}\n\n\n\nIt will render the following result:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Donuts...\"\n}\n\n\n\n3. \"this\"\n\n\nthis\n is a javascript keyword used to refer to the current context. Let's look at what that means:\n\n\nFor example we want to generate this JSON using \n#each\n:\n\n\n[\n  {\n    \"type\": \"label\",\n    \"text\": \"Homer\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Marge\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Lisa\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Bart\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Maggie\"\n  }\n]\n\n\n\nIf our data looks like this:\n\n\n{\n  \"members\": [{\"name\": \"Homer\"}, {\"name\": \"Marge\"}, {\"name\": \"Lisa\"}, {\"name\": \"Bart\"}, {\"name\": \"Maggie\"}]\n}\n\n\n\nWe can write the following template:\n\n\n{\n  \"{{#each members}}\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\"\n  }\n}\n\n\n\nBut what if it looked like this:\n\n\n{\n  \"members\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"]\n}\n\n\n\nNow we're lost. Since each individual element in the \nmembers\n array is just a string instead of an object, \nwe need some way to refer to the object itself\n.\n\n\nThis is where \nthis\n comes in. To handle this situation we can write the following template:\n\n\n{\n  \"{{#each members}}\": {\n    \"type\": \"label\",\n    \"text\": \"{{this}}\"\n  }\n}\n\n\n\nKeep in mind that the change in context makes global objects such as \n$get\n, and \n$cache\n inaccessible. You can use the \n$root\n object to get at them, e.g. \n$root.$get\n.\n\n\nNon-JSON\n\n\nLet's take a look at how non-JSON (CSV, RSS, HTML) templating works:\n\n\nCSV\n\n\nWhen you have a raw CSV content, you can parse it into JSON format before feeding it into a template.\n\n\nTo do this, use \n$convert.csv\n\n\nHere's a functional example\n\n\n\n\nRSS\n\n\nWhen you have an RSS content, you can parse it into JSON format before feeding it into a template.\n\n\nTo do this, use \n$convert.rss\n\n\nHere's a functional example\n\n\n\n\nHTML\n\n\nUnlike other formats like CSV and RSS, Jasonette implements a separate HTML template engine, so we don't need to parse HTML into JSON.\n\n\nInstead, we convert HTML DOM elements into JSON, using the built-in \nHTML to JSON parser\n, which is built on top of \nCheerio library\n, which has similar syntax to \njQuery\n\n\nHow to use\n\n\nStep 1. Make a \n$network.request\n\n\nIt starts with an HTML content. You can fetch HTML content by making \n$network.request\n calls with \ndata_type\n of \nhtml\n, like this:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"type\": \"$network.request\",\n        \"options\": {\n          \"url\": \"http://www.techmeme.com/river\",\n          \"data_type\": \"html\"\n        }\n      }\n    }\n  }\n}\n\n\n\nStep 2. \n$render\n as html\n\n\nIn order to render it using the html parser, you need to call \n$render\n with \ndata_type\n of \nhtml\n:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"type\": \"$network.request\",\n        \"options\": {\n          \"url\": \"http://www.techmeme.com/river\",\n          \"data_type\": \"html\"\n        },\n        \"success\": {\n          \"type\": \"$render\",\n          \"options\": {\n            \"type\": \"html\"\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\nStep 3. Use jQuery syntax to parse and render\n\n\nThe HTML template engine automatically sets the \nbody\n element as \n$jason\n.\n\n\nFrom there we can use the \njQuery\n syntax to parse and render content:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"type\": \"$network.request\",\n        \"options\": {\n          \"url\": \"http://www.techmeme.com/river\",\n          \"data_type\": \"html\"\n        },\n        \"success\": {\n          \"type\": \"$render\",\n          \"options\": {\n            \"type\": \"html\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [\n            {\n              \"items\": {\n                \"{{#each $jason.find('tr.ritem')}}\": {\n                  \"type\": \"vertical\",\n                  \"components\": [\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{$(this).find('td \n a').text()}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{$(this).find('cite').text()}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{$(this).find('td').first().text() + '  ' + $(this).closest('table').prev().text()}}\"\n                    }\n                  ],\n                  \"href\": {\n                    \"view\": \"web\",\n                    \"url\": \"{{$(this).find('td \n a').attr('href')}}\"\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n\n\n\nHere's a functional example\n\n\n\n\n\u25a0 When to use templates\n\n\nNormally you can just return a static JSON document from the server and Jason would do its job to render it. However sometimes you may want to dynamically render the view.\n\n\nHere are some cases where using a template makes sense:\n\n\n\n\nMake a separate network request for data, then render the response\n\n\nDynamically render local data\n\n\nDynamically render data generated from device sensors\n\n\nSeparate data from template for less redundancy\n\n\n\n\nLet's take a look at each:\n\n\n\n\n1. Separate data from view\n\n\nMake a separate network request for data, then render the response\nFor example here's a JSON markup that renders a list of labels:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 4\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 5\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 6\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 7\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 8\"\n        }]\n      }]\n    }\n  }\n}\n\n\n\nAs you can see, the \n\"type\": \"label\"\n part is repeated for each item.\n\n\nInstead of this static JSON, we can use a template/data approach:\n\n\n\n\nReturn a \nbody template\n.\n\n\nMake a separate network request on \n$load\n just to fetch the data.\n\n\nRender the fetched data using the body template.\n\n\n\n\nHere's what it looks like:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonclient.org/rownames.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.result}}\": {\n                \"type\": \"label\",\n                \"text\": \"This is row {{row_name}}\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\nNotice there's no \nbody\n under \n$jason\n here (\n$jason.body\n). It's because we're going to dynamically generate the body using the body template inside \ntemplates\n (\n$jason.head.templates.body\n).\n\n\n\n\n\n\nAlso notice the \nactions\n attribute contains a $load attribute\n, so this will be triggered as soon as the view loads.\n\n\n\n\n\n\nSo putting all these together, here's what's going on:\n\n\n\n\nThe Jason app loads the JSON shown above, from our server.\n\n\nThere's no \nbody\n attribute so nothing is rendered on the screen by default. However, notice there's a \nbody\n attribute under \ntemplates\n. This is the template that will be rendered as the \nbody\n later.\n\n\nImmediately after the view loads, the \n$load\n action gets automatically triggered by the system.\n\n\n\n\n$load\n makes a \n$network.request\n call with the url specified. We will need to return the following data from the API:\n\n\n{\n    \"result\": [{\n      \"row_name\": \"1\"\n    }, {\n      \"row_name\": \"2\"\n    }, {\n      \"row_name\": \"3\"\n    }, {\n      \"row_name\": \"4\"\n    }, {\n      \"row_name\": \"5\"\n    }, {\n      \"row_name\": \"6\"\n    }, {\n      \"row_name\": \"7\"\n    }, {\n      \"row_name\": \"8\"\n    }]\n  }\n\n\n\n\n\n\nOnce \n$network.request\n succeeds, its \nsuccess\n action gets executed next. In this case it's \n$render\n.\n\n\n\n\n$render\n draws the view \nusing the \nbody\n template and the data from the network request\n.\n\n\n\n\nThe result is the same as the \noriginal static JSON\n\n\n\n\n\n\nNetwork request to a 3rd party API:\n Let's say we want to build a Twitter client. What we want to do is:\n\n\n\n\n\n\nFetch the data by making a network request to Twitter API.\n\n\n\n\n\n\nRender the data using our own template.\n\n\n\n\n\n\nInstant plug and play:\n Most web development frameworks nowadays come with JSON API right out of the box. This means you can simply write a template and render your own existing API.\n\n\n\n\n\n\n2. Local user input\n\n\nDynamically render local data:\n\n\nYou can render templates using any type of data, which includes \nlocal variables\n you can set using form components such as:\n\n\n\n\ntextfield\n\n\ntextarea\n\n\nsearch\n\n\netc.\n\n\n\n\nExample:\n Below, we render the label using a local variable named \nmessage\n, which is automatically set whenever the \ntextfield\n value changes. \nNote that there is no top level \nbody\n element after \nhead\n.\n Instead we have a \nbody\n template, which will be rendered into body whenever we call the \n$render\n action.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$render\"\n        },\n        \"$pull\": {\n          \"type\": \"$render\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          ...\n          \"items\": [\n            {\n              \"type\": \"textfield\",\n              \"name\": \"message\"\n            },\n            {\n              \"type\": \"label\"\n              \"text\": {{$get.message}}\"\n            }\n          ]\n          ...\n        }\n      }\n    }\n  }\n}\n\n\n\n3. Device API generated data\n\n\nDynamically render data generated from device APIs\n\n\n\n\ngeolocation\n\n\naddressbook\n\n\ncamera\n\n\ntimer\n\n\netc.\n\n\n\n\nExample:\n Below, we access the geolocation device sensor and render its result. Since our server has no knowledge of the device sensor data, templates are the only way to go in this case.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$geo.get\",\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          ...\n          \"items\": [\n            {\n              \"type\": \"label\"\n              \"text\": {{$jason.coord}}\"\n            }\n          ]\n          ...\n        }\n      }\n    }\n  }\n}\n\n\n\n4. Reduce redundancy\n\n\nSeparate data from template for less redundancy\n\n\nSometimes you simply want to separate view from model to avoid lots of code redundancy. See the below \ndata\n section for details.\n\n\n\n\n\u25a0 What can be rendered\n\n\n1. Inline data\n\n\nThe \nhead.data\n attribute is used to automatically fill in the \nbody\n template if one exists.\n\n\nWhen a view loads,\n\n\n\n\nJasonette looks at \n$jason.head.data\n and \n$jason.head.templates.body\n.\n\n\nIf both exist, it dynamically generates the view using the data and the template, and inserts it into \n$jason.body\n.\n\n\n\n\nHere's a Jason markup \nwithout\n a template/data. As you can see, the label items mostly repeat, except for the \ntext\n attribute.\n\n\n{\n  ...\n  \"body\": {\n    \"sections\": [\n      \"items\": [\n        {\n          \"type\": \"label\",\n          \"text\": \"Ethan\",\n          \"style\": {\n            \"color\": \"#000000\",\n            \"size\": \"14\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"padding\": \"10\",\n            \"background\": \"rgba(0,0,0,0.5)\",\n            \"width\": \"300\",\n            \"height\": \"100\"\n          }\n        }\n        ...\n        {\n          \"type\": \"label\",\n          \"text\": \"John\",\n          \"style\": {\n            \"color\": \"#000000\",\n            \"size\": \"14\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"padding\": \"10\",\n            \"background\": \"rgba(0,0,0,0.5)\",\n            \"width\": \"300\",\n            \"height\": \"100\"\n          }\n        }\n        {\n          \"type\": \"label\",\n          \"text\": \"Samantha\",\n          \"style\": {\n            \"color\": \"#000000\",\n            \"size\": \"14\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"padding\": \"10\",\n            \"background\": \"rgba(0,0,0,0.5)\",\n            \"width\": \"300\",\n            \"height\": \"100\"\n          }\n        }\n      ]\n    ]\n  }\n}\n\n\n\nUsing template/data, we can reduce it down to:\n\n\n{\n  \"head\": {\n    \"data\": {\n      \"names\": [\"Ethan\", ..., \"John\", \"Samantha\"]\n    },\n    \"templates\": {\n      \"body\": {\n        \"sections\": [{\n          \"items\": {\n            \"{{#each names}}\": {\n              \"type\": \"label\",\n              \"text\": \"Ethan\",\n              \"style\": {\n                \"color\": \"#000000\",\n                \"size\": \"14\",\n                \"font\": \"HelveticaNeue-Bold\",\n                \"padding\": \"10\",\n                \"background\": \"rgba(0,0,0,0.5)\",\n                \"width\": \"300\",\n                \"height\": \"100\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\n2. Return value of an action\n\n\nBut templates really shine when you use it to render dynamic data, produced by running some action on the device.\n\n\nThis is essential, since your server has no knowledge of what it should render if the data to render is a result of user interaction.\n\n\nSee here\n for details.\n\n\n3. Manually specify data\n\n\nThis is rarely needed, but sometimes we need a way to manually specify data for the \n$render\n action.\n\n\nSee here\n for details.", 
            "title": "\u2605 Templates"
        }, 
        {
            "location": "/templates/#what-is-a-template", 
            "text": "Sometimes we may want to dynamically generate the JSON from the client side instead of directly using a JSON returned from the server.  It may be for rendering a local user input, it may be for rendering a result from a 3rd party API. There are several cases where templating makes sense.  Learn more here  To achieve this we use templates.   Templates have slots ( {{ }} ) to be filled in.  All expressions inside  {{ }}  are evaluated with the data in memory and substituted in.  Templates handle not only evaluation but also support  looping ( #each ) and conditionals ( #if/#elseif/#else ) .  Templates are always declared under  $jason.head.templates .  Most of the times we just use the  body  template ( $jason.head.templates.body ).", 
            "title": "\u25a0 What is a template?"
        }, 
        {
            "location": "/templates/#valid-expressions", 
            "text": "Jasonette template engine takes advantage of the native javascript engine. This means:", 
            "title": "valid expressions"
        }, 
        {
            "location": "/templates/#1-any-expression-that-evaluates-to-a-value", 
            "text": "{\n  \"items\": [\n    {\n      \"type\": \"image\",\n      \"url\": \"{{$jason.image}}\"\n    },\n    {\n      \"type\": \"label\",\n      \"text\": \"{{$jason.username}}\"\n    }\n  ]\n}", 
            "title": "1. Any expression that evaluates to a value."
        }, 
        {
            "location": "/templates/#2-any-javascript-expression", 
            "text": "Jasonette implements the native javascript engine to evaluate expressions. So you can use any javascript expression inside  {{ }} .  {\n  \"items\": [\n    {\n      \"type\": \"label\",\n      \"url\": \"Full JSON string\"\n    },\n    {\n      \"type\": \"label\",\n      \"text\": \"{{JSON.stringify($jason)}}\"\n    }\n  ]\n}", 
            "title": "2. Any javascript expression."
        }, 
        {
            "location": "/templates/#3-a-full-fledged-javascript-function", 
            "text": "If it involves multiple instructions, you can even write a full fledged function inside the template expression.  Just make sure to end with a  return  statement.  {\n  \"items\": [\n    {\n      \"type\": \"label\",\n      \"url\": \"Reversed Fullname\"\n    },\n    {\n      \"type\": \"label\",\n      \"text\": \"{{var sorted_posts = $jason.posts.sort(function(a,b){ return new Date(b.created_at) - new Date(a.created_at); }); return sorted_posts[0];}}\"\n    }\n  ]\n}", 
            "title": "3. A full fledged javascript function."
        }, 
        {
            "location": "/templates/#example", 
            "text": "Here's an example where we use the  $geo.get  action to get the current location, and render it dynamically using the template.  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Display location\",\n      \"actions\": {\n        \"type\": \"$geo.get\",\n        \"success\": {\n          \"type\": \"$render\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [\n              {\n                \"type\": \"label\",\n                \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\"\n              },\n              {\n                \"type\": \"label\",\n                \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\"\n              }           \n            ]\n          }]\n        }\n      }\n    }\n  }\n}  In above JSON markup, the  $jason.body  part is missing, because we will dynamically generate it via  $render .  The  $render  action will render the data with the template, and insert it into where  $jason.body  should be. The result would be:  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"Display location\",\n      \"actions\": {\n        \"type\": \"$geo.get\",\n        \"success\": {\n          \"type\": \"$render\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": [\n              {\n                \"type\": \"label\",\n                \"text\": \"Latitude: {{ $jason.coord.split(',')[0] }}\"\n              },\n              {\n                \"type\": \"label\",\n                \"text\": \"Longitude: {{ $jason.coord.split(',')[1] }}\"\n              }           \n            ]\n          }]\n        }\n      }\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [\n          {\n            \"type\": \"label\",\n            \"text\": \"Latitude: 12.1234\"\n          },\n          {\n            \"type\": \"label\",\n            \"text\": \"Longitude: 23.2345\"\n          }           \n        ]\n      }]\n    }\n  }\n}  Notice how we now have the  $jason.body  filled out.", 
            "title": "example"
        }, 
        {
            "location": "/templates/#syntax", 
            "text": "", 
            "title": "\u25a0 Syntax"
        }, 
        {
            "location": "/templates/#json", 
            "text": "Let's take a look at how JSON templating works:", 
            "title": "JSON"
        }, 
        {
            "location": "/templates/#1-loop-each", 
            "text": "To demonstrate looping, let's look at an example. We have a static JSON that looks like this:  {\n  \"body\": {\n    \"sections\": [{\n      \"items\": [\n        {\n          \"type\": \"label\",\n          \"text\": \"Homer\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Marge\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Lisa\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Bart\"\n        },\n        {\n          \"type\": \"label\",\n          \"text\": \"Maggie\"\n        }\n      ]\n    }]\n  }\n}  IF you look at each item, the only part that's custom is the name (\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"). We want to shorten this so that we don't have to rewrite  \"type\": \"label\"  for every item.  First, we need to declare a data attribute ( Learn more about  head.data ):  {\n  \"$jason\": {\n    \"head\": {\n      \"data\": {\n        \"members\": [\n          { \"name\": \"Homer\" },\n          { \"name\": \"Marge\" },\n          { \"name\": \"Lisa\" },\n          { \"name\": \"Bart\" },\n          { \"name\": \"Maggie\" }\n        ]\n      }\n    }\n  }\n}  Then we will declare a  body  template that will iterate through this  members  array and turn each into renderable item.  {\n  \"$jason\": {\n    \"head\": {\n      \"data\": {\n        \"members\": [\n          { \"name\": \"Homer\" },\n          { \"name\": \"Marge\" },\n          { \"name\": \"Lisa\" },\n          { \"name\": \"Bart\" },\n          { \"name\": \"Maggie\" }\n        ]\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each members}}\": {\n                \"type\": \"label\",\n                \"text\": \"{{name}}\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}  The  #each  keyword will iterate through the expression that comes after it ( members ) and generate a JSON array from the result, ending up with the final JSON markup we saw at the beginning.", 
            "title": "1. Loop (#each)"
        }, 
        {
            "location": "/templates/#how-to-access-variables-from-inside-nested-each", 
            "text": "When there's only a single  #each  expression it's simple. But when we have multiple  #each  expressions, dealing with context becomes a bit tricky.  Here's an example:  {\n  \"{{#each families}}\": {\n    \"{{#each members}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\"\n    }\n  }\n}  What if we want to access  families  object from inside the nested  {{#each members}}  loop?   We can't just do:  {\n  \"{{#each families}}\": {\n    \"{{#each members}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{families.length}}\"\n    }\n  }\n}  because inside the  {{#each members}}  loop, the context is each family member. Above expression will result in the parser trying to access for example  members[0].families.length  instead of  families.length . It will throw an error because a  member  object doesn't contain a  families  attribute.  We need a way to access the root context. This is where  $root  comes in.  Whenever you're inside a loop, you can refer to the root context using  $root . So above example will be:  {\n  \"{{#each families}}\": {\n    \"{{#each members}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{$root.families.length}}\"\n    }\n  }\n}  You can use the  $root  object to access everything at the root level, such as  $get  (through  $root.$get ),  $cache  (through  $root.$cache ),  $global  (through  $root.$global ), etc.", 
            "title": "How to access variables from inside nested #each"
        }, 
        {
            "location": "/templates/#2-conditional-ifelseifelse", 
            "text": "Conditionals are used to conditionally render their children only when the expression evaluates to  true .  Conditionals take the form of an  array .   The parser walks through the array sequentially  Executes each conditional expression  And Renders the child JSON of the first conditional expression that evaluates to  true", 
            "title": "2. Conditional (#if/#elseif/#else)"
        }, 
        {
            "location": "/templates/#syntax_1", 
            "text": "Conditionals take the following format.  [\n  {\n    \"{{#if (EXPRESSION A)}}\": (JSON)\n  },\n  {\n    \"{{#elseif (EXPRESSION B)}}\": (JSON)\n  }\n  {\n    \"{{#else (EXPRESSION C)}}\": (JSON)\n  }\n]  The template will walk through the items in the array sequentially until it encounters an conditional expression that's true. Then it will only render its child JSON.", 
            "title": "syntax"
        }, 
        {
            "location": "/templates/#note", 
            "text": "#elseif  and  #else  are optional.  if no conditional expression evaluates to  true , nothing gets rendered.", 
            "title": "Note"
        }, 
        {
            "location": "/templates/#example_1", 
            "text": "Let's say we are are trying to render the following return value ( $jason ):  {\n  \"data\": {\n    \"name\": \"Homer\"\n  }\n}  What happens when we run above data through the following template?  {\n    \"type\": \"label\",\n    \"text\": [\n        {\n            \"{{#if $jason.data.name=='Bart'}}\": \"Ay Caramba!\"\n        },\n        {\n            \"{{#elseif $jason.data.name=='Homer'}}\": \"Donuts...\"\n        }\n    ]\n}  It will render the following result:  {\n  \"type\": \"label\",\n  \"text\": \"Donuts...\"\n}", 
            "title": "Example"
        }, 
        {
            "location": "/templates/#3-this", 
            "text": "this  is a javascript keyword used to refer to the current context. Let's look at what that means:  For example we want to generate this JSON using  #each :  [\n  {\n    \"type\": \"label\",\n    \"text\": \"Homer\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Marge\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Lisa\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Bart\"\n  },\n  {\n    \"type\": \"label\",\n    \"text\": \"Maggie\"\n  }\n]  If our data looks like this:  {\n  \"members\": [{\"name\": \"Homer\"}, {\"name\": \"Marge\"}, {\"name\": \"Lisa\"}, {\"name\": \"Bart\"}, {\"name\": \"Maggie\"}]\n}  We can write the following template:  {\n  \"{{#each members}}\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\"\n  }\n}  But what if it looked like this:  {\n  \"members\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"]\n}  Now we're lost. Since each individual element in the  members  array is just a string instead of an object,  we need some way to refer to the object itself .  This is where  this  comes in. To handle this situation we can write the following template:  {\n  \"{{#each members}}\": {\n    \"type\": \"label\",\n    \"text\": \"{{this}}\"\n  }\n}  Keep in mind that the change in context makes global objects such as  $get , and  $cache  inaccessible. You can use the  $root  object to get at them, e.g.  $root.$get .", 
            "title": "3. \"this\""
        }, 
        {
            "location": "/templates/#non-json", 
            "text": "Let's take a look at how non-JSON (CSV, RSS, HTML) templating works:", 
            "title": "Non-JSON"
        }, 
        {
            "location": "/templates/#csv", 
            "text": "When you have a raw CSV content, you can parse it into JSON format before feeding it into a template.  To do this, use  $convert.csv  Here's a functional example", 
            "title": "CSV"
        }, 
        {
            "location": "/templates/#rss", 
            "text": "When you have an RSS content, you can parse it into JSON format before feeding it into a template.  To do this, use  $convert.rss  Here's a functional example", 
            "title": "RSS"
        }, 
        {
            "location": "/templates/#html", 
            "text": "Unlike other formats like CSV and RSS, Jasonette implements a separate HTML template engine, so we don't need to parse HTML into JSON.  Instead, we convert HTML DOM elements into JSON, using the built-in  HTML to JSON parser , which is built on top of  Cheerio library , which has similar syntax to  jQuery", 
            "title": "HTML"
        }, 
        {
            "location": "/templates/#how-to-use", 
            "text": "", 
            "title": "How to use"
        }, 
        {
            "location": "/templates/#step-1-make-a-networkrequest", 
            "text": "It starts with an HTML content. You can fetch HTML content by making  $network.request  calls with  data_type  of  html , like this:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"type\": \"$network.request\",\n        \"options\": {\n          \"url\": \"http://www.techmeme.com/river\",\n          \"data_type\": \"html\"\n        }\n      }\n    }\n  }\n}", 
            "title": "Step 1. Make a $network.request"
        }, 
        {
            "location": "/templates/#step-2-render-as-html", 
            "text": "In order to render it using the html parser, you need to call  $render  with  data_type  of  html :  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"type\": \"$network.request\",\n        \"options\": {\n          \"url\": \"http://www.techmeme.com/river\",\n          \"data_type\": \"html\"\n        },\n        \"success\": {\n          \"type\": \"$render\",\n          \"options\": {\n            \"type\": \"html\"\n          }\n        }\n      }\n    }\n  }\n}", 
            "title": "Step 2. $render as html"
        }, 
        {
            "location": "/templates/#step-3-use-jquery-syntax-to-parse-and-render", 
            "text": "The HTML template engine automatically sets the  body  element as  $jason .  From there we can use the  jQuery  syntax to parse and render content:  {\n  \"$jason\": {\n    \"head\": {\n      \"actions\": {\n        \"type\": \"$network.request\",\n        \"options\": {\n          \"url\": \"http://www.techmeme.com/river\",\n          \"data_type\": \"html\"\n        },\n        \"success\": {\n          \"type\": \"$render\",\n          \"options\": {\n            \"type\": \"html\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [\n            {\n              \"items\": {\n                \"{{#each $jason.find('tr.ritem')}}\": {\n                  \"type\": \"vertical\",\n                  \"components\": [\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{$(this).find('td   a').text()}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{$(this).find('cite').text()}}\"\n                    },\n                    {\n                      \"type\": \"label\",\n                      \"text\": \"{{$(this).find('td').first().text() + '  ' + $(this).closest('table').prev().text()}}\"\n                    }\n                  ],\n                  \"href\": {\n                    \"view\": \"web\",\n                    \"url\": \"{{$(this).find('td   a').attr('href')}}\"\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}  Here's a functional example", 
            "title": "Step 3. Use jQuery syntax to parse and render"
        }, 
        {
            "location": "/templates/#when-to-use-templates", 
            "text": "Normally you can just return a static JSON document from the server and Jason would do its job to render it. However sometimes you may want to dynamically render the view.  Here are some cases where using a template makes sense:   Make a separate network request for data, then render the response  Dynamically render local data  Dynamically render data generated from device sensors  Separate data from template for less redundancy   Let's take a look at each:", 
            "title": "\u25a0 When to use templates"
        }, 
        {
            "location": "/templates/#1-separate-data-from-view", 
            "text": "Make a separate network request for data, then render the response\nFor example here's a JSON markup that renders a list of labels:  {\n  \"$jason\": {\n    \"head\": {\n      ...\n    },\n    \"body\": {\n      \"sections\": [{\n        \"items\": [{\n          \"type\": \"label\",\n          \"text\": \"This is row 1\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 2\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 3\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 4\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 5\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 6\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 7\"\n        }, {\n          \"type\": \"label\",\n          \"text\": \"This is row 8\"\n        }]\n      }]\n    }\n  }\n}  As you can see, the  \"type\": \"label\"  part is repeated for each item.  Instead of this static JSON, we can use a template/data approach:   Return a  body template .  Make a separate network request on  $load  just to fetch the data.  Render the fetched data using the body template.   Here's what it looks like:  {\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$network.request\",\n          \"options\": {\n            \"url\": \"https://jasonclient.org/rownames.json\"\n          },\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.result}}\": {\n                \"type\": \"label\",\n                \"text\": \"This is row {{row_name}}\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}    Notice there's no  body  under  $jason  here ( $jason.body ). It's because we're going to dynamically generate the body using the body template inside  templates  ( $jason.head.templates.body ).    Also notice the  actions  attribute contains a $load attribute , so this will be triggered as soon as the view loads.    So putting all these together, here's what's going on:   The Jason app loads the JSON shown above, from our server.  There's no  body  attribute so nothing is rendered on the screen by default. However, notice there's a  body  attribute under  templates . This is the template that will be rendered as the  body  later.  Immediately after the view loads, the  $load  action gets automatically triggered by the system.   $load  makes a  $network.request  call with the url specified. We will need to return the following data from the API:  {\n    \"result\": [{\n      \"row_name\": \"1\"\n    }, {\n      \"row_name\": \"2\"\n    }, {\n      \"row_name\": \"3\"\n    }, {\n      \"row_name\": \"4\"\n    }, {\n      \"row_name\": \"5\"\n    }, {\n      \"row_name\": \"6\"\n    }, {\n      \"row_name\": \"7\"\n    }, {\n      \"row_name\": \"8\"\n    }]\n  }    Once  $network.request  succeeds, its  success  action gets executed next. In this case it's  $render .   $render  draws the view  using the  body  template and the data from the network request .   The result is the same as the  original static JSON    Network request to a 3rd party API:  Let's say we want to build a Twitter client. What we want to do is:    Fetch the data by making a network request to Twitter API.    Render the data using our own template.    Instant plug and play:  Most web development frameworks nowadays come with JSON API right out of the box. This means you can simply write a template and render your own existing API.", 
            "title": "1. Separate data from view"
        }, 
        {
            "location": "/templates/#2-local-user-input", 
            "text": "Dynamically render local data:  You can render templates using any type of data, which includes  local variables  you can set using form components such as:   textfield  textarea  search  etc.   Example:  Below, we render the label using a local variable named  message , which is automatically set whenever the  textfield  value changes.  Note that there is no top level  body  element after  head .  Instead we have a  body  template, which will be rendered into body whenever we call the  $render  action.  {\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$render\"\n        },\n        \"$pull\": {\n          \"type\": \"$render\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          ...\n          \"items\": [\n            {\n              \"type\": \"textfield\",\n              \"name\": \"message\"\n            },\n            {\n              \"type\": \"label\"\n              \"text\": {{$get.message}}\"\n            }\n          ]\n          ...\n        }\n      }\n    }\n  }\n}", 
            "title": "2. Local user input"
        }, 
        {
            "location": "/templates/#3-device-api-generated-data", 
            "text": "Dynamically render data generated from device APIs   geolocation  addressbook  camera  timer  etc.   Example:  Below, we access the geolocation device sensor and render its result. Since our server has no knowledge of the device sensor data, templates are the only way to go in this case.  {\n  \"$jason\": {\n    \"head\": {\n      ...\n      \"actions\": {\n        \"$load\": {\n          \"type\": \"$geo.get\",\n          \"success\": {\n            \"type\": \"$render\"\n          }\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          ...\n          \"items\": [\n            {\n              \"type\": \"label\"\n              \"text\": {{$jason.coord}}\"\n            }\n          ]\n          ...\n        }\n      }\n    }\n  }\n}", 
            "title": "3. Device API generated data"
        }, 
        {
            "location": "/templates/#4-reduce-redundancy", 
            "text": "Separate data from template for less redundancy  Sometimes you simply want to separate view from model to avoid lots of code redundancy. See the below  data  section for details.", 
            "title": "4. Reduce redundancy"
        }, 
        {
            "location": "/templates/#what-can-be-rendered", 
            "text": "", 
            "title": "\u25a0 What can be rendered"
        }, 
        {
            "location": "/templates/#1-inline-data", 
            "text": "The  head.data  attribute is used to automatically fill in the  body  template if one exists.  When a view loads,   Jasonette looks at  $jason.head.data  and  $jason.head.templates.body .  If both exist, it dynamically generates the view using the data and the template, and inserts it into  $jason.body .   Here's a Jason markup  without  a template/data. As you can see, the label items mostly repeat, except for the  text  attribute.  {\n  ...\n  \"body\": {\n    \"sections\": [\n      \"items\": [\n        {\n          \"type\": \"label\",\n          \"text\": \"Ethan\",\n          \"style\": {\n            \"color\": \"#000000\",\n            \"size\": \"14\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"padding\": \"10\",\n            \"background\": \"rgba(0,0,0,0.5)\",\n            \"width\": \"300\",\n            \"height\": \"100\"\n          }\n        }\n        ...\n        {\n          \"type\": \"label\",\n          \"text\": \"John\",\n          \"style\": {\n            \"color\": \"#000000\",\n            \"size\": \"14\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"padding\": \"10\",\n            \"background\": \"rgba(0,0,0,0.5)\",\n            \"width\": \"300\",\n            \"height\": \"100\"\n          }\n        }\n        {\n          \"type\": \"label\",\n          \"text\": \"Samantha\",\n          \"style\": {\n            \"color\": \"#000000\",\n            \"size\": \"14\",\n            \"font\": \"HelveticaNeue-Bold\",\n            \"padding\": \"10\",\n            \"background\": \"rgba(0,0,0,0.5)\",\n            \"width\": \"300\",\n            \"height\": \"100\"\n          }\n        }\n      ]\n    ]\n  }\n}  Using template/data, we can reduce it down to:  {\n  \"head\": {\n    \"data\": {\n      \"names\": [\"Ethan\", ..., \"John\", \"Samantha\"]\n    },\n    \"templates\": {\n      \"body\": {\n        \"sections\": [{\n          \"items\": {\n            \"{{#each names}}\": {\n              \"type\": \"label\",\n              \"text\": \"Ethan\",\n              \"style\": {\n                \"color\": \"#000000\",\n                \"size\": \"14\",\n                \"font\": \"HelveticaNeue-Bold\",\n                \"padding\": \"10\",\n                \"background\": \"rgba(0,0,0,0.5)\",\n                \"width\": \"300\",\n                \"height\": \"100\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}", 
            "title": "1. Inline data"
        }, 
        {
            "location": "/templates/#2-return-value-of-an-action", 
            "text": "But templates really shine when you use it to render dynamic data, produced by running some action on the device.  This is essential, since your server has no knowledge of what it should render if the data to render is a result of user interaction.  See here  for details.", 
            "title": "2. Return value of an action"
        }, 
        {
            "location": "/templates/#3-manually-specify-data", 
            "text": "This is rarely needed, but sometimes we need a way to manually specify data for the  $render  action.  See here  for details.", 
            "title": "3. Manually specify data"
        }, 
        {
            "location": "/mixin/", 
            "text": "Just like you can build a car, build a castle, or build a spaceship by composing simple lego bricks, you can build an entire application by composing multiple JSON files.\n\n\n\n\n\u25a0 Basics\n\n\nYou can use \n@\n to mix-in a remote JSON object.\n\n\nLet's say \nhttps://lorem.ipsum/simpsons.json\n contains the following content:\n\n\n[\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"]\n\n\n\nWe can mix this into our JSON simply by doing this:\n\n\n{\n  \"the_simpsons\": {\n    \"firstnames\": {\n      \"@\": \"https://lorem.ipsum/simpsons.json\"\n    },\n    \"lastname\": \"Simpson\"\n  }\n}\n\n\n\nJasonette fetches the JSON from the URL and simply replaces it with the \n@\n node.\n\n\nHere's the result:\n\n\n{\n  \"the_simpsons\": {\n    \"firstnames\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"],\n    \"lastname\": \"Simpson\"\n  }\n}\n\n\n\n\n\n\u25a0 How it works\n\n\nIt's useful to understand how this works internally. Whenever Jasonette loads a single JSON file here's what happens:\n\n\n\n\nLoad JSON from a URL.\n\n\nJasonette scans the JSON to resolve the mixins if any.\n\n\nSometimes it's not enough to resolve it once, especially when you mix \nremote mixins with local mixins\n. Jasonette continues mixin resolution until everything is resolved.\n\n\nJasonette draws the view.\n\n\nThe system triggers \n$load\n / \n$show\n events.\n\n\n\n\n Note 1: All mixins resolutions are carried out in parallel, and the rendering starts only when all mixins have resolved (or failed).\n\n\n Note 2: In case an endpoint doesn't respond or returns an error, that part gets resolved as an empty string and silently fails instead of halting everything.\n\n\n Note 3: The order is important. Since the mixin resolution happens BEFORE actual rendering, you can even mix-in a template expression from a remote JSON\n\n\n\n\n\u25a0 Multiple Mixins\n\n\nYou are not limited to a single mixin. You can mix-in as many remote JSON urls as you want. For example:\n\n\n{\n  \"cats\": {\n    \"@\": \"https://lorem.ipsum/cats.json\"\n  },\n  \"dogs\": {\n    \"@\": \"https://lorem.ipsum/dogs.json\"\n  },\n  \"monsters\": {\n    \"@\": \"https://lorem.ipsum/monsters.json\"\n  }\n}\n\n\n\nJasonette automatically detects all occurrences of mixins in a JSON file, fetches them in parallel, and attaches them to their corresponding locations.\n\n\n\n\n\u25a0 Anywhere in the JSON tree\n\n\nYou can reference URLs anywhere in the JSON tree, as many times as you want. They will all be downloaded in parallel at load time and substituted in automatically.\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"data\": {\n        \"users\": {\n          \"@\": \"https://lorem.ipsum/data.json\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each users}}\": {\n                \"@\": \"https://lorem.ipsum/user_item_template.json\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nYou can even create an entire JSON tree with a mixin:\n\n\n{\n  \"@\": \"https://jasonbase.com/things/3nf.json\"\n}\n\n\n\nThis particular example may seem silly but it becomes powerful when combined with the \noverride\n feature.\n\n\nBasically you can use this to mix-in a base JSON you wish to inherit from, and then simply add a small amount of code to customize it. \nSee \"override\" section\n for details.\n\n\n\n\n\u25a0 Partial Mixin\n\n\nSometimes you may want to mix-in only the subtree of a remote JSON file.\n\n\nIn this case, we use the following syntax:\n\n\n[JSON_PATH]@[JSON_URL]\n\n\n\nFor example, let's say we have a \"drinks\" database at \nhttps://drinks.db/drinks.json\n.\n\n\n{\n  \"drinks\": {\n    \"coffee\": [\"ethiopia\", \"sumatra\", \"nigeria\"],\n    \"tea\": [\"english breakfast\", \"chai\", \"green\", \"oolong\", \"yerba mate\"],\n    \"sparkling water\": [\"perrier\", \"poland spring\", \"la croix\", \"s. pellegriono\"]\n  }\n}\n\n\n\nWe want to only use the coffee database, how do we do this? \n\n\n{\n  \"coffee\": {\n    \"@\": \"drinks.coffee@https://drinks.db/drinks.json\"\n  }\n}\n\n\n\nAs you can see, we're prefixing the URL with the path \ndrinks.coffee\n so it assigns only that subtree into the coffee attribute.\n\n\n\n\n\u25a0 Overriding mixed in values\n\n\nSometimes you may want to mix-in and override certain attributes from the mixed-in JSON.\n\n\nIn this case you simply define the attribute locally and it will automatically override the mixed-in value.\n\n\nLet's say we have a JSON at \nhttps://jasonbase.com/things/dnf.json\n that looks like this:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"this is a placehlder\",\n  \"style\": {\n    \"font\": \"HelveticaNeue\",\n    \"size\": \"12\"\n  }\n}\n\n\n\nWe may want to use this JSON somewhere but also customize the \ntext\n part so that it doesn't say \nthis is a placeholder\n. Here's how you would do it:\n\n\n{\n  \"items\": [{\n    \"@\": \"https://jasonbase.com/thing/dnf.json\",\n    \"text\": \"This is a custom label\"\n  }]\n}\n\n\n\nHere's what happens when Jasonette sees this JSON:\n\n\n\n\nIt first mixes the referenced JSON in.\n\n\nAnd then it goes through the rest of the attributes.\n\n\nIf there's a collision, it overrides the mixed-in value with the local value.\n\n\nKeep going until all key/value pairs are processed.\n\n\n\n\nIn this case it ends up overriding the \ntext\n attribute. The result:\n\n\n{\n  \"items\": [{\n    \"type\": \"label\",\n    \"text\": \"This is a custom label\",\n    \"style\": {\n      \"font\": \"HelveticaNeue\",\n      \"size\": \"12\"\n    }\n  }]\n}\n\n\n\n\u25a0 Self Mixin\n\n\nMix-in is not limited to remote JSON files. A JSON can even mix-in itself and its own subtree to another location within itself.\n\n\nTo access the current JSON object, you just need to use the \n$document\n object.\n\n\nHere's an example:\n\n\n{\n  \"users\": {\n    \"{{#each users}}\": {\n      \"@\": \"$document.item\"\n    }\n  },\n  \"item\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\"\n  }\n}\n\n\n\nHere, the \n$document.item\n is equivalent to:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"{{name}}\"\n}\n\n\n\nAfter the mix-in resolution finishes, it turns into:\n\n\n{\n  \"users\": {\n    \"{{#each users}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\"\n    }\n  },\n  \"item\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\"\n  }\n}\n\n\n\nAnother example:\n\n\n{\n  \"custom_templates\": {\n    \"item\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\",\n      \"style\": {\n        \"color\": \"#ff0000\",\n        \"size\": \"12\"\n      }\n    }\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nWhen parsed, this turns into: \n\n\n{\n  \"custom_templates\": {\n    \"item\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\",\n      \"style\": {\n        \"color\": \"#ff0000\",\n        \"size\": \"12\"\n      }\n    }\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"type\": \"label\",\n                \"text\": \"{{name}}\",\n                \"style\": {\n                  \"color\": \"#ff0000\",\n                  \"size\": \"12\"\n                }\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\n\u25a0 Mix remote and local mixins\n\n\nYou can do all kinds of things when you combine remote mixins with local mixins.\n\n\nLet's revisit the above example:\n\n\n{\n  \"custom_templates\": {\n    \"item\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\",\n      \"style\": {\n        \"color\": \"#ff0000\",\n        \"size\": \"12\"\n      }\n    }\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nWe can extract out the \ncustom_templates\n as its own JSON file.\n\n\nLet's save it at \nhttps://custom.templates/item.json\n.\n\n\n{\n  \"item\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\",\n    \"style\": {\n      \"color\": \"#ff0000\",\n      \"size\": \"12\"\n    }\n  }\n}\n\n\n\nThen we can update the code like so:\n\n\n{\n  \"custom_templates\": {\n    \"@\": \"https://custom.templates/item.json\"\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nLet's go deeper. We will save everything under \n$jason\n into \nhttps://blahblah.blah/view.json\n:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}\n\n\n\nThen we can update the original code down to:\n\n\n{\n  \"custom_templates\": {\n    \"@\": \"https://custom.templates/item.json\"\n  },\n  \"@\": \"https://blahblah.blah/view.json\"\n}\n\n\n\nThere! An entire app in 6 lines of JSON.", 
            "title": "\u2605 Mix-in"
        }, 
        {
            "location": "/mixin/#basics", 
            "text": "You can use  @  to mix-in a remote JSON object.  Let's say  https://lorem.ipsum/simpsons.json  contains the following content:  [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"]  We can mix this into our JSON simply by doing this:  {\n  \"the_simpsons\": {\n    \"firstnames\": {\n      \"@\": \"https://lorem.ipsum/simpsons.json\"\n    },\n    \"lastname\": \"Simpson\"\n  }\n}  Jasonette fetches the JSON from the URL and simply replaces it with the  @  node.  Here's the result:  {\n  \"the_simpsons\": {\n    \"firstnames\": [\"Homer\", \"Marge\", \"Lisa\", \"Bart\", \"Maggie\"],\n    \"lastname\": \"Simpson\"\n  }\n}", 
            "title": "\u25a0 Basics"
        }, 
        {
            "location": "/mixin/#how-it-works", 
            "text": "It's useful to understand how this works internally. Whenever Jasonette loads a single JSON file here's what happens:   Load JSON from a URL.  Jasonette scans the JSON to resolve the mixins if any.  Sometimes it's not enough to resolve it once, especially when you mix  remote mixins with local mixins . Jasonette continues mixin resolution until everything is resolved.  Jasonette draws the view.  The system triggers  $load  /  $show  events.    Note 1: All mixins resolutions are carried out in parallel, and the rendering starts only when all mixins have resolved (or failed).   Note 2: In case an endpoint doesn't respond or returns an error, that part gets resolved as an empty string and silently fails instead of halting everything.   Note 3: The order is important. Since the mixin resolution happens BEFORE actual rendering, you can even mix-in a template expression from a remote JSON", 
            "title": "\u25a0 How it works"
        }, 
        {
            "location": "/mixin/#multiple-mixins", 
            "text": "You are not limited to a single mixin. You can mix-in as many remote JSON urls as you want. For example:  {\n  \"cats\": {\n    \"@\": \"https://lorem.ipsum/cats.json\"\n  },\n  \"dogs\": {\n    \"@\": \"https://lorem.ipsum/dogs.json\"\n  },\n  \"monsters\": {\n    \"@\": \"https://lorem.ipsum/monsters.json\"\n  }\n}  Jasonette automatically detects all occurrences of mixins in a JSON file, fetches them in parallel, and attaches them to their corresponding locations.", 
            "title": "\u25a0 Multiple Mixins"
        }, 
        {
            "location": "/mixin/#anywhere-in-the-json-tree", 
            "text": "You can reference URLs anywhere in the JSON tree, as many times as you want. They will all be downloaded in parallel at load time and substituted in automatically.  {\n  \"$jason\": {\n    \"head\": {\n      \"data\": {\n        \"users\": {\n          \"@\": \"https://lorem.ipsum/data.json\"\n        }\n      },\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each users}}\": {\n                \"@\": \"https://lorem.ipsum/user_item_template.json\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}  You can even create an entire JSON tree with a mixin:  {\n  \"@\": \"https://jasonbase.com/things/3nf.json\"\n}  This particular example may seem silly but it becomes powerful when combined with the  override  feature.  Basically you can use this to mix-in a base JSON you wish to inherit from, and then simply add a small amount of code to customize it.  See \"override\" section  for details.", 
            "title": "\u25a0 Anywhere in the JSON tree"
        }, 
        {
            "location": "/mixin/#partial-mixin", 
            "text": "Sometimes you may want to mix-in only the subtree of a remote JSON file.  In this case, we use the following syntax:  [JSON_PATH]@[JSON_URL]  For example, let's say we have a \"drinks\" database at  https://drinks.db/drinks.json .  {\n  \"drinks\": {\n    \"coffee\": [\"ethiopia\", \"sumatra\", \"nigeria\"],\n    \"tea\": [\"english breakfast\", \"chai\", \"green\", \"oolong\", \"yerba mate\"],\n    \"sparkling water\": [\"perrier\", \"poland spring\", \"la croix\", \"s. pellegriono\"]\n  }\n}  We want to only use the coffee database, how do we do this?   {\n  \"coffee\": {\n    \"@\": \"drinks.coffee@https://drinks.db/drinks.json\"\n  }\n}  As you can see, we're prefixing the URL with the path  drinks.coffee  so it assigns only that subtree into the coffee attribute.", 
            "title": "\u25a0 Partial Mixin"
        }, 
        {
            "location": "/mixin/#overriding-mixed-in-values", 
            "text": "Sometimes you may want to mix-in and override certain attributes from the mixed-in JSON.  In this case you simply define the attribute locally and it will automatically override the mixed-in value.  Let's say we have a JSON at  https://jasonbase.com/things/dnf.json  that looks like this:  {\n  \"type\": \"label\",\n  \"text\": \"this is a placehlder\",\n  \"style\": {\n    \"font\": \"HelveticaNeue\",\n    \"size\": \"12\"\n  }\n}  We may want to use this JSON somewhere but also customize the  text  part so that it doesn't say  this is a placeholder . Here's how you would do it:  {\n  \"items\": [{\n    \"@\": \"https://jasonbase.com/thing/dnf.json\",\n    \"text\": \"This is a custom label\"\n  }]\n}  Here's what happens when Jasonette sees this JSON:   It first mixes the referenced JSON in.  And then it goes through the rest of the attributes.  If there's a collision, it overrides the mixed-in value with the local value.  Keep going until all key/value pairs are processed.   In this case it ends up overriding the  text  attribute. The result:  {\n  \"items\": [{\n    \"type\": \"label\",\n    \"text\": \"This is a custom label\",\n    \"style\": {\n      \"font\": \"HelveticaNeue\",\n      \"size\": \"12\"\n    }\n  }]\n}", 
            "title": "\u25a0 Overriding mixed in values"
        }, 
        {
            "location": "/mixin/#self-mixin", 
            "text": "Mix-in is not limited to remote JSON files. A JSON can even mix-in itself and its own subtree to another location within itself.  To access the current JSON object, you just need to use the  $document  object.  Here's an example:  {\n  \"users\": {\n    \"{{#each users}}\": {\n      \"@\": \"$document.item\"\n    }\n  },\n  \"item\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\"\n  }\n}  Here, the  $document.item  is equivalent to:  {\n  \"type\": \"label\",\n  \"text\": \"{{name}}\"\n}  After the mix-in resolution finishes, it turns into:  {\n  \"users\": {\n    \"{{#each users}}\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\"\n    }\n  },\n  \"item\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\"\n  }\n}  Another example:  {\n  \"custom_templates\": {\n    \"item\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\",\n      \"style\": {\n        \"color\": \"#ff0000\",\n        \"size\": \"12\"\n      }\n    }\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}  When parsed, this turns into:   {\n  \"custom_templates\": {\n    \"item\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\",\n      \"style\": {\n        \"color\": \"#ff0000\",\n        \"size\": \"12\"\n      }\n    }\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"type\": \"label\",\n                \"text\": \"{{name}}\",\n                \"style\": {\n                  \"color\": \"#ff0000\",\n                  \"size\": \"12\"\n                }\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}", 
            "title": "\u25a0 Self Mixin"
        }, 
        {
            "location": "/mixin/#mix-remote-and-local-mixins", 
            "text": "You can do all kinds of things when you combine remote mixins with local mixins.  Let's revisit the above example:  {\n  \"custom_templates\": {\n    \"item\": {\n      \"type\": \"label\",\n      \"text\": \"{{name}}\",\n      \"style\": {\n        \"color\": \"#ff0000\",\n        \"size\": \"12\"\n      }\n    }\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}  We can extract out the  custom_templates  as its own JSON file.  Let's save it at  https://custom.templates/item.json .  {\n  \"item\": {\n    \"type\": \"label\",\n    \"text\": \"{{name}}\",\n    \"style\": {\n      \"color\": \"#ff0000\",\n      \"size\": \"12\"\n    }\n  }\n}  Then we can update the code like so:  {\n  \"custom_templates\": {\n    \"@\": \"https://custom.templates/item.json\"\n  },\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}  Let's go deeper. We will save everything under  $jason  into  https://blahblah.blah/view.json :  {\n  \"$jason\": {\n    \"head\": {\n      \"templates\": {\n        \"body\": {\n          \"sections\": [{\n            \"items\": {\n              \"{{#each $jason.items}}\": {\n                \"@\": \"$document.custom_templates.item\"\n              }\n            }\n          }]\n        }\n      }\n    }\n  }\n}  Then we can update the original code down to:  {\n  \"custom_templates\": {\n    \"@\": \"https://custom.templates/item.json\"\n  },\n  \"@\": \"https://blahblah.blah/view.json\"\n}  There! An entire app in 6 lines of JSON.", 
            "title": "\u25a0 Mix remote and local mixins"
        }, 
        {
            "location": "/offline/", 
            "text": "What does \"Offline\" mean?\n\n\nJasonette supports various offline features.\n\n\nNote that \"offline\" doesn't mean your entire app needs to be offline. Parts of your app can be online and parts of it can be offline.\n\n\nThis is because \neverything\n on Jasonette is described in JSON. You can selectively load your JSON from multiple sources and combine them together. You can do things like:\n\n\n\n\nStore the model locally, and load view and controller from remote.\n\n\nStore the view and controller locally, and load model from remote.\n\n\nStore all model, view, controller locally.\n\n\nEtc.\n\n\n\n\nBut this is just the basics. Imagine what's possible when you use \nmixins\n. You can mix and match different modules from different sources, some online, some offline, to finally construct the final app.\n\n\n\n\nFeatures\n\n\n\n\nLoading from Local File\n\n\nGlobal Key-value Persistent Store\n\n\nAutomatic JSON Caching\n\n\nData-uri\n\n\nLoading Screen\n\n\nError Screen\n\n\n\n\n\n\n1. Loading from Local File\n\n\nJust like you can fetch remote files over \nhttp\n to construct a Jasonette app, you can also use local files packaged with the app, using a file url scheme (\nfile://\n)\n\n\n\n\nUsing File URL Scheme\n\n\n\n\n\n\nA. Home URL \n\n\nInstead of setting a remote URL you can point it to a local JSON file.\n\n\n\n\n\n\n\n\nHere's what it looks like on Android:\n\n\n\n\n\n\n\n\n\n\n\n\nHere's what it looks like on iOS:\n\n\n\n\n\n\n\n\n\n\nB. Offline HREF\n\n\nYou can also \nhref\n into local JSON URLs:\n\n\n\n\n    {\n      \ntype\n: \nlabel\n,\n      \ntext\n: \nGo\n,\n      \nhref\n: {\n        \nurl\n: \nfile://demo.json\n\n      }\n    }\n\n\n\n\n\n\n\n\nC. Offline Require\n\n\nYou can \n$require\n offline JSON URLs:\n\n\n\n\n    {\n      \ntype\n: \n$require\n,\n      \noptions\n: {\n        \nitems\n: [\nfile://item1.json\n, \nfile://item2.json\n]\n      }\n    }\n\n\n\n\n\n\n\n\nD. Offline Mixin\n\n\nYou can use file urls with \nmixins\n:\n\n\n\n\n    {\n      \n@\n: \nfile://mixin.json\n,\n      \nitems\n: [],\n      ...\n    }\n\n\n\n\n\n\n\n\nE. Offline Images\n\n\nJasonette not only lets you render remote images but also lets you bundle them up on the app locally and load them locally. Just like you can use the \nfile:// scheme\n to render local JSON objects, you can use the same \nfile://\n scheme to access locally stored images.\n\n\n\n\n{\n  \ntype\n: \nimage\n,\n  \nurl\n: \nfile://avatar.png\n\n}\n\n\n\n\n\n\nSupported everywhere:\n\n\n\n\nbody.background\n\n\nheader.menu\n\n\nheader.title\n\n\nfooter.tabs\n\n\nfooter.input\n\n\nimage component\n\n\nbutton component\n\n\nimage layers\n\n\n\n\n\n\n\n\n\n\nStoring files locally\n\n\nTo utilize this feature, you first need to store files under the right folders. Let me show you how:\n\n\n\n\niOS File URL\n\n\n\n\nOpen XCode, go to \nJasonette \n Core \n file://\n from the sidebar, and add your files there by drag and dropping.\n\n\nAccess using \nfile://your_filename.json\n\n\n\n\n\n\n\n\n\n\n Android File URL\n\n\n\n\nOpen Android Studio, go to \napp \n assets \n file\n. Copy and paste your files there.\n\n\nAccess using \nfile://your_filename.json\n\n\n\n\n\n\n\n\n\n\n\n\n2. Global Key-Value Persistent Store\n\n\nNormally, variables on Jasonette are sandboxed per URL (local variables and cache).\n\n\nHowever, a lot of times you may want to have a global variable that's accessible from all your views.\nAlso, you probably want them to be persisted so you can use it like a Database.\n\n\nThis is what global key-value store does.\n\n\nThe global key-value store is supported as an \naction\n. See \n$global API section\n to learn more.\n\n\n\n\n\n\n3. Automatic JSON caching\n\n\nYou can have best of both worlds (Stream the app on demand to keep it up-to-date all the time, as well as have the app logic cached locally so it loads instantly) by using the offline caching feature.\n\n\n\n\nHow JSON caching works\n\n\n\n\n\n\nThe first time the app loads, Jasonette fetches the JSON from your server.\n\n\n\n\n\n\nIf you specify that you want to use offline caching, Jasonette will cache the entire JSON for that view.\n\n\n\n\n\n\nNext time you open the view, Jasonette will load immediately from the offline cached version.\n\n\n\n\n\n\nBut it doesn't stop there, Jaasonette checks to see if the network is available, and if it is, it re-fetches the JSON and updates the view. The trick is \nstep 3\n comes first, so it will ONLY update if the network is available. Otherwise you'll still have your offline cached version of your app.\n\n\n\n\n\n\n\n\nHow to use\n\n\nOffline caching is managed on a per-view basis. All you need to do to enable is put \n\"offline\": \"true\"\n under \n$jason.head\n, like this:\n\n\n{\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"offline test\",\n      \"offline\": \"true\",\n      ...\n}\n\n\n\n\n\n4. Data-uri\n\n\nJasonette supports \ndata-uri\n for urls. This means you can store the entire content within the URL itself. It's not always practical but there are several cases where you can get neat effects using this approach.\n\n\nTry entering a data-url instead of http or https based url. It should work.\n\n\n\n\n5. Loading Screen\n\n\nThe loading screen is displayed while a view is being loaded. \n\n\nIt is loaded from \nfile://loading.json\n, which comes with the project, but you can customize it as you like.\n\n\n\n\n\n\n\n\nRemember, this is a full fledged JASON view, which means you can do anything you can do in a regular view.\n\n\n\n\nIf you don't want a loading view, replace it with an empty view.\n\n\nIf you want a simple background colour instead of loading animation, you can do so by setting the background color\n\n\nYou can get creative and use the \n$global\n and \n$env\n variables to construct custom loading screens for each view.\n\n\n\n\n\n\n6. Error Screen\n\n\nThe error screen is displayed when the view fails to load because of network connection.\n\n\n\n\n\n\n\n\nIt is loaded from \nfile://error.json\n, but you can customize it as you like.\n\n\nAgain, it's a full fledged JASON view, so anything you can do on a regular view is possible in the error view, such as rendering templates, running actions on certain events, etc.", 
            "title": "\u2605 Offline"
        }, 
        {
            "location": "/offline/#what-does-offline-mean", 
            "text": "Jasonette supports various offline features.  Note that \"offline\" doesn't mean your entire app needs to be offline. Parts of your app can be online and parts of it can be offline.  This is because  everything  on Jasonette is described in JSON. You can selectively load your JSON from multiple sources and combine them together. You can do things like:   Store the model locally, and load view and controller from remote.  Store the view and controller locally, and load model from remote.  Store all model, view, controller locally.  Etc.   But this is just the basics. Imagine what's possible when you use  mixins . You can mix and match different modules from different sources, some online, some offline, to finally construct the final app.", 
            "title": "What does \"Offline\" mean?"
        }, 
        {
            "location": "/offline/#features", 
            "text": "Loading from Local File  Global Key-value Persistent Store  Automatic JSON Caching  Data-uri  Loading Screen  Error Screen", 
            "title": "Features"
        }, 
        {
            "location": "/offline/#1-loading-from-local-file", 
            "text": "Just like you can fetch remote files over  http  to construct a Jasonette app, you can also use local files packaged with the app, using a file url scheme ( file:// )", 
            "title": "1. Loading from Local File"
        }, 
        {
            "location": "/offline/#using-file-url-scheme", 
            "text": "A. Home URL   Instead of setting a remote URL you can point it to a local JSON file.     Here's what it looks like on Android:       Here's what it looks like on iOS:      B. Offline HREF  You can also  href  into local JSON URLs:       {\n       type :  label ,\n       text :  Go ,\n       href : {\n         url :  file://demo.json \n      }\n    }    C. Offline Require  You can  $require  offline JSON URLs:       {\n       type :  $require ,\n       options : {\n         items : [ file://item1.json ,  file://item2.json ]\n      }\n    }    D. Offline Mixin  You can use file urls with  mixins :       {\n       @ :  file://mixin.json ,\n       items : [],\n      ...\n    }    E. Offline Images  Jasonette not only lets you render remote images but also lets you bundle them up on the app locally and load them locally. Just like you can use the  file:// scheme  to render local JSON objects, you can use the same  file://  scheme to access locally stored images.   {\n   type :  image ,\n   url :  file://avatar.png \n}   Supported everywhere:   body.background  header.menu  header.title  footer.tabs  footer.input  image component  button component  image layers", 
            "title": "Using File URL Scheme"
        }, 
        {
            "location": "/offline/#storing-files-locally", 
            "text": "To utilize this feature, you first need to store files under the right folders. Let me show you how:   iOS File URL   Open XCode, go to  Jasonette   Core   file://  from the sidebar, and add your files there by drag and dropping.  Access using  file://your_filename.json       Android File URL   Open Android Studio, go to  app   assets   file . Copy and paste your files there.  Access using  file://your_filename.json", 
            "title": "Storing files locally"
        }, 
        {
            "location": "/offline/#2-global-key-value-persistent-store", 
            "text": "Normally, variables on Jasonette are sandboxed per URL (local variables and cache).  However, a lot of times you may want to have a global variable that's accessible from all your views.\nAlso, you probably want them to be persisted so you can use it like a Database.  This is what global key-value store does.  The global key-value store is supported as an  action . See  $global API section  to learn more.", 
            "title": "2. Global Key-Value Persistent Store"
        }, 
        {
            "location": "/offline/#3-automatic-json-caching", 
            "text": "You can have best of both worlds (Stream the app on demand to keep it up-to-date all the time, as well as have the app logic cached locally so it loads instantly) by using the offline caching feature.", 
            "title": "3. Automatic JSON caching"
        }, 
        {
            "location": "/offline/#how-json-caching-works", 
            "text": "The first time the app loads, Jasonette fetches the JSON from your server.    If you specify that you want to use offline caching, Jasonette will cache the entire JSON for that view.    Next time you open the view, Jasonette will load immediately from the offline cached version.    But it doesn't stop there, Jaasonette checks to see if the network is available, and if it is, it re-fetches the JSON and updates the view. The trick is  step 3  comes first, so it will ONLY update if the network is available. Otherwise you'll still have your offline cached version of your app.", 
            "title": "How JSON caching works"
        }, 
        {
            "location": "/offline/#how-to-use", 
            "text": "Offline caching is managed on a per-view basis. All you need to do to enable is put  \"offline\": \"true\"  under  $jason.head , like this:  {\n  \"$jason\": {\n    \"head\": {\n      \"title\": \"offline test\",\n      \"offline\": \"true\",\n      ...\n}", 
            "title": "How to use"
        }, 
        {
            "location": "/offline/#4-data-uri", 
            "text": "Jasonette supports  data-uri  for urls. This means you can store the entire content within the URL itself. It's not always practical but there are several cases where you can get neat effects using this approach.  Try entering a data-url instead of http or https based url. It should work.", 
            "title": "4. Data-uri"
        }, 
        {
            "location": "/offline/#5-loading-screen", 
            "text": "The loading screen is displayed while a view is being loaded.   It is loaded from  file://loading.json , which comes with the project, but you can customize it as you like.     Remember, this is a full fledged JASON view, which means you can do anything you can do in a regular view.   If you don't want a loading view, replace it with an empty view.  If you want a simple background colour instead of loading animation, you can do so by setting the background color  You can get creative and use the  $global  and  $env  variables to construct custom loading screens for each view.", 
            "title": "5. Loading Screen"
        }, 
        {
            "location": "/offline/#6-error-screen", 
            "text": "The error screen is displayed when the view fails to load because of network connection.     It is loaded from  file://error.json , but you can customize it as you like.  Again, it's a full fledged JASON view, so anything you can do on a regular view is possible in the error view, such as rendering templates, running actions on certain events, etc.", 
            "title": "6. Error Screen"
        }, 
        {
            "location": "/web/", 
            "text": "New to Jasonette? Check out \nGetting Started with Jasonette\n first.\n\n\n\n\nJSON Web Container\n\n\nWhat if you could take any number of web elements, plug them straight into a native app layout, resize, scroll, interact with, and pretty much treat them just like any other \nnative components\n?\n\n\n\n\n\n\nWeb Containers are self-contained web views that render into native app layout as native components.\n\n\nOf course, the great part is you can describe them all in JSON, just like the rest of \nJasonette components\n.\n\n\n\n\n\n\n\n\nWeb containers are designed to be plugged into a native app layout alongside other \nnative components\n.\n\n\n\n\nAs you can see in above example, it's a combination of JSON and HTML.\n\n\nFirst, use HTML/CSS/Javascript to describe the internals of the container view.\n\n\nThen, \nplug it into your native app using JSON\n as just another \ncomponent\n.\n\n\n\n\n\n  \n\n    \n\n            \n\n    \n\n  \n\n\n\n\n\n\n\n\nTable of Contents\n\n\n\n\nNotice\n\n\nWeb containers in action\n\n\nFeatures\n\n\nWhat is possible?\n\n\nUsage\n\n\n\n\n\n\n\n\nNotice\n\n\nBefore we jump in, just a few things:\n\n\n\n\n\n\nThe web container performs pretty nicely on modern mobile devices, in fact so nicely that sometimes you forget that you're using web containers. But don't go overboard with it. Native will always be more performant and you should use native whenever possible. Try experimenting and you'll reach the sweet spot.\n\n\n\n\n\n\nA lot of design decisions around Web containers were made specifically for displaying rich dynamic content, which used to be tricky using just native components. Try to think of this as just another \ncomponent\n and try not to use the web container to implement app logic. It will most likely result in bad user experience.\n\n\n\n\n\n\nYou can do a lot of cool things with this, such as implementing little animations here and there without having to invent a whole new JSON syntax because you can now just use CSS or Javascript animation. Also you can do things like text overlay over image simply by using CSS positioning. \nPlease share cool use cases you find\n.\n\n\n\n\n\n\nThis is just the first draft and intentionally minimal. We may add more features depending on how it goes. Feedback appreciated.\n\n\n\n\n\n\n\n\nWeb Containers in Action\n\n\nWeb containers can be used both as a \nfullscreen background\n and as an \ninline component\n. Here are some examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnime.js (Mix and match with native)\n\n\nNative feed view + partial web\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD3.js (Native slider controller + Web container output)\n\n\nCanvas + JS Demo (Background type)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnime.js (Animated HTML element inside native scroll view)\n\n\nPhaser.js (Background type, with user interaction)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThree.js (background type)\n\n\nThree.js (background type)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nUse alongside native components\n\n\nWeb containers plug into native layout alongside other native components so seamlessly that you won't even be able to tell the difference in most cases. It's just like any other \ncomponent\n! Style and use them together with other native Jasonette components.\n\n\n\n\n\n\nDissolve right into native layout\n\n\nSame native \nlayout system\n you already know. \n\n\n\n\n\n\nScroll just like other components\n\n\nSince it's just like any other component, you can use it in a scroll view, and scroll it just like label, button, image, etc.\n\n\n[Note] This is possible because of the \ndesign decision\n made to make the contents inside a web container NOT scrollable when contained within a scroll view (for obvious UX reasons).\n\n\n\n\n\n\nOr use as fullscreen background\n\n\nNot just for scrolling components. you can use it as a background by setting \"html\" type for background.\n\n\n\n\n\n\nWrite once, use anywhere\n\n\nYou can use \nmix-ins\n to write a single HTML container inside JSON and mix them into any context such as the background or a layout.\n\n\n\n\n\n\nWhat is possible?\n\n\nSince each Web container is basically a self-contained web view, you can do anything you can do with a browser, which includes any HTML markup, Javascript, and CSS styling.\n\n\n\n\nCanvas\n\n\n\n\n\n\nSVG \n CSS\n\n\n\n\n\n\niframe\n\n\n\n\n\n\nJavascript\n\n\n\n\n\n\n\n\nInteraction between native actions and Web container\n\n\nTemplates\n work exactly the same as the rest of Jasonette. So you can use native UI elements as input, set \nlocal variables\n, and re-render accordingly using the local variable to dynamically display output onto the web container. \n\n\n\n\n\n\nMix and match\n\n\nJasonette already has most of what you need to build sophisticated native apps, even without the web container.\n\n\nBut web containers can be powerful when seamlessly blended into the rest of the native app to perform things that were hard to do with existing Jasonette api.\n\n\n\n\n\n\nUsage\n\n\n\n\nSyntax\n\n\nExamples\n\n\nImportant Tips (MUST READ)\n\n\n\n\n\n\nSyntax\n\n\n\n\n1. As Component\n\n\nJust like rest of the Jasonette \ncomponents\n, you can plug it into \nlayouts\n and \nscroll views(sections)\n. \n\n\n\n\n\n\n\n\nweb containers plugged in everywhere\n\n\nusing web container to animate text via JS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype\n: \n\"html\"\n\n\ntext\n: A self contained HTML text (\nhtml\n...\n/html\n), which means everything from \nscript\n tag to \nstyle\n tag.\n\n\nstyle\n: \nRequired. Especially the height\n. Web containers should NOT scroll, therefore everything outside of the \nstyle.height\n you specify will get cut off. This attribute is about how the web container looks from the outside. To style the HTML elements inside, just include the CSS inside the HTML markup. \n\n\naction\n: (optional) Connect with any \naction\n or a web container specific action: \n\"type\": \"$default\"\n.\n\n\n[IMPORTANT]\n By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything.\n\n\nIn order to override this behavior, attach a \n\"type\": \"$default\"\n action, so the web container knows.\n\n\n\n\n\n\n\n\n{\n  \nitems\n: [{\n    \ntype\n: \nhtml\n,\n    \ntext\n: \nhtml\n....\n/html\n,\n        \nstyle\n: {\n            \nheight\n: \n100\n\n        },\n    \naction\n: {\n      \ntype\n: \n$default\n\n    }\n  }]\n}\n\n\n\n\n\n\n2. As Background\n\n\nWeb containers can be plugged into \nbody.style.background\n too, which will take up the full screen.\n\n\n\n\n\n\n\n\nUse any JS library\n\n\nInteracting with HTML content via touch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSame as component usage, except there's no need for \nstyle\n, and you can't attache an \naction\n other than \n\"type\": \"$default\"\n.\n\n\n\n\ntype\n: \n\"html\"\n\n\ntext\n: A self contained HTML text (\nhtml\n...\n/html\n), which means everything from \nscript\n tag to \nstyle\n tag.\n\n\naction\n: (optional) Connect with \n\"type\": \"$default\"\n in order to let the web container handle the touch event. Otherwise not needed.\n\n\n[IMPORTANT]\n By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything.\n\n\nIn order to override this behavior, attach a \n\"type\": \"$default\"\n action, so the web container knows.\n\n\n\n\n\n\n\n\n{\n  \nbody\n: {\n    \nstyle\n: {\n      \nbackground\n: {\n        \ntype\n: \nhtml\n,\n        \ntext\n: \nhtml\n....\n/html\n,\n        \naction\n: {\n          \ntype\n: \n$default\n\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\n\nExample\n\n\n\n\nDisplay scrolling H1 elements\n\n\n{\n    \n$jason\n: {\n        \nhead\n: {\n            \ntitle\n: \nScrolling Web Container\n\n            \ndata\n: {\n                \ncolors\n: [{\n                    \ncode\n: \n#ff0000\n\n                }, {\n                    \ncode\n: \nrgba(0,0,0,0.3)\n\n                }, {\n                    \ncode\n: \n#00ff00\n\n                }, {\n                    \ncode\n: \nrgb(130,43,32)\n\n                }]\n            },\n            \ntemplates\n: {\n                \nbody\n: {\n                    \nsections\n: [{\n                        \nitems\n: {\n                            \n{{#each colors}}\n: {\n                                \ntype\n: \nhtml\n,\n                                \nstyle\n: {\n                                    \nheight\n: \n50\n\n                                },\n                                \ntext\n: \nhtml\nhead\nstyle\nh1{font-size: 30px; color: {{code}};}\n/style\n/head\nbody\nh1\nHello World\n/h1\n/body\n/html\n\n                            }\n                        }\n                    }]\n                }\n            }\n        }\n    }\n}\n\n\n\n\n\n\niframe as background\n\n\n{\n  \n$jason\n: {\n    \nhead\n: {\n      \ntitle\n: \npdf.js\n\n    },\n    \nbody\n: {\n      \nstyle\n: {\n        \nbackground\n: {\n          \ntype\n: \nhtml\n,\n          \ntext\n: \nhtml\nhead\nstyle\nhtml{padding:0;margin:0;margin-top: 64px;} body,iframe{width:100%;height:100%;padding:0;margin:0;border:0;}\n/style\nbody\niframe src='https://mozilla.github.io/pdf.js/web/viewer.html'/\n/body\n/html\n\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\n\nthree.js as background\n\n\n{\n  \n$jason\n: {\n    \nhead\n: {\n        \ntitle\n: \npdf.js\n\n    },\n    \nbody\n: {\n        \nstyle\n: {\n            \nborder\n: \nnone\n,\n            \ncolor\n: \nrgba(0,0,0,0)\n,\n            \nbackground\n: {\n                \ntype\n: \nhtml\n,\n                \ntext\n: \nhtml\n \nhead\n \nstyle\n body { margin: 0; padding: 0; background: #111; overflow: hidden; } .dg{visibility: hidden;}\n/style\n \n/head\n \nbody\n \nscript src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js'\n/script\nscript src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'\n/script\nscript src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r50/three.min.js'\n/script\nscript\n window.onload = function(){ var $container = $('#container'); var renderer = new THREE.WebGLRenderer({antialias: true}); var camera = new THREE.PerspectiveCamera(80,window.innerWidth/window.innerHeight,0.1,10000); var scene = new THREE.Scene(); var mouseX = 0, mouseY = 0; scene.add(camera); renderer.setSize(window.innerWidth, window.innerHeight); $container.append(renderer.domElement); window.addEventListener( 'resize', onWindowResize, false ); var Controls = function() { this.speed = 2; this.rotation = 0; }; var text = new Controls(), gui = new dat.GUI(); gui.add(text, 'speed', 0, 10); gui.add(text, 'rotation',0,15); var normalMaterial = new THREE.MeshNormalMaterial({}); function Torus(f){ this.b = new THREE.Mesh(new THREE.TorusGeometry( 160, 75, 2, 13),normalMaterial); this.b.position.x = 57*Math.cos(f); this.b.position.y = 57*Math.sin(f); this.b.position.z = f*1.25; this.b.rotation.z = f*0.03; } var numTorus = 80; var tabTorus = []; for(var i=0; i\nnumTorus; i++){ tabTorus.push(new Torus(-i*13)); scene.add(tabTorus[i].b); }  function update(){ for(var i=0; i\nnumTorus; i++){ tabTorus[i].b.position.z+=text.speed; tabTorus[i].b.rotation.z+=i*text.rotation/10000; if(tabTorus[i].b.position.z\n0) { tabTorus[i].b.position.z=-1000; } } } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize( window.innerWidth, window.innerHeight ); } function onDocumentMouseMove(event) { mouseX = ( event.clientX - windowHalfX ); mouseY = ( event.clientY - windowHalfY ); } function render() { requestAnimationFrame( render); camera.position.x += ( mouseX - camera.position.x ) * .05; camera.position.y += ( - mouseY - camera.position.y ) * .05; renderer.render(scene, camera); update(); } render(); }; \n/script\n \ndiv id='container'\n/div\n \n/body\n \n/html\n\n  }\n}\n\n\n\n\n\n\nTips\n\n\n \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  IMPORTANT. READ ALL!!!!     \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \n\n\n\n\n1. Web container content scrolls ONLY when used as a background\n\n\nWhen you use a web container \nas a background\n, it scrolls just fine, and behaves like you would expect.\n\n\nHowever when you use a web container \nas a component inside a scrolling view\n, the content inside \ndoes not scroll\n because the container itself is supposed to scroll. \n\n\nWhich brings us to:\n\n\n\n\n2. Must specify height when in scroll view\n\n\nEvery web container must have a fixed height when inside a scroll view (sections).\n\n\nThis is so that there exists no scrolling view within a scroll view, which is a bad user experience.\n\n\n{\n    ...\n    \nsections\n: [{\n        \nitems\n: [{\n            \ntype\n: \nhtml\n,\n            \ntext\n: \nhtml\n....\n/html\n,\n            \nstyle\n: {\n                \nheight\n: \n100\n\n            },\n            \naction\n: {\n                \ntype\n: \n$default\n\n            }\n        }, {\n            ...\n        }],\n        ...\n    }]\n}\n\n\n\n\n\n\n3. Use single quotes\n\n\nObviously, an entire HTML markup can be a long text. Sometimes it will contain double quotes and some characters that need to be escaped.\n\n\nSince we're trying to package an entire HTML markup into a text attribute, you'll either need to escape these characters or use single quotes instead of double quotes.\n\n\n\n\n4. Wrap all script content inside \nwindow.onload = function() { ... }\n\n\nBecause of the way native scroll views recycle their child items, you need to make sure your javascript lines are run AFTER the container has loaded.\n\n\nTo do this, wrap your Javascript inside \nwindow.onload\n. Here's an example:\n\n\n{\n  \ntype\n: \nhtml\n,\n  \ntext\n: \nhtml\nhead\nstyle\n.square{background: red; width: 50px; height: 50px;}\n/style\nscript src='https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.0/anime.min.js'\n/script\nscript\nvar x=200; var move = function() {var el = document.querySelector('#domNode .el'); var domNode = anime({ targets: el, translateX: x, translateY: x}); x=200-x;}; document.addEventListener('DOMContentLoaded', function(event) { setInterval(move, 1000); }); \n/script\nbody\ndiv id='domNode'\ndiv class='large square el'\n/div\n/div\n/body\n/html\n\n}\n\n\n\n\n\n\n5. By default, the HTML content does NOT respond to user input\n\n\nHTML content inside a web container is NOT interactive by default. This means NOTHING will happen when you touch the contents inside, even if it's a link. (Especially if it's a link, because it would be weird to have a small portion of a native app redirect to a completely different web page)\n\n\n\n\nThe interaction is disabled by default because the web container is designed as a \ndynamic output method\n and \nNOT as an input method\n.\n\n\n\n\nWeb containers are very useful when it comes to \ndisplaying rich dynamic content\n, and this is the primary purpose of the web container. Also, in most cases we want to trigger native actions instead of letting the HTML content handle events. If we allowed HTML to handle user touch for example, then we wouldn't have a way to take advantage of Jasonette's \nnative actions\n.\n\n\n\n\nSo whenever possible, use native components such as \ntextarea\n or \ntextfield\n to receive user input instead of trying to use the HTML\nform\n element. \n\n\nAlso, keep in mind pure native components generally perform better too. Just use it wisely.\n\n\n\n\nThat said, there are some cases where it does make sense to let the HTML handle events. In which case you could:\n\n\n\n\n6. Use the \n\"type\": \"$default\"\n action to force Jasonette to let HTML handle events.\n\n\nIf you know what you're doing, you can override the block and let the HTML handle user events.\n\n\n{\n    \ntype\n: \nhtml\n,\n    \ntext\n: \nhtml\nbody\nscript src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'\nscript\n$(function(){$(document).on('click', function(){ $('body').css('background', '#ff0000'); }); });\n/script\n/body\n/html\n,\n    \naction\n: {\n        \ntype\n: \n$default\n\n    }\n}\n\n\n\n\n\n\nTechnical Details\n\n\nUnder the hood, each web container is a containerized instance of web view (\nUIWebView for iOS\n and \nWebView for Android\n).\n\n\nIt gets recycled when you scroll just like rest of the native components so it's pretty efficient.", 
            "title": "\u2605 Web Container"
        }, 
        {
            "location": "/web/#json-web-container", 
            "text": "What if you could take any number of web elements, plug them straight into a native app layout, resize, scroll, interact with, and pretty much treat them just like any other  native components ?    Web Containers are self-contained web views that render into native app layout as native components.  Of course, the great part is you can describe them all in JSON, just like the rest of  Jasonette components .     Web containers are designed to be plugged into a native app layout alongside other  native components .   As you can see in above example, it's a combination of JSON and HTML.  First, use HTML/CSS/Javascript to describe the internals of the container view.  Then,  plug it into your native app using JSON  as just another  component .", 
            "title": "JSON Web Container"
        }, 
        {
            "location": "/web/#table-of-contents", 
            "text": "Notice  Web containers in action  Features  What is possible?  Usage", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/web/#notice", 
            "text": "Before we jump in, just a few things:    The web container performs pretty nicely on modern mobile devices, in fact so nicely that sometimes you forget that you're using web containers. But don't go overboard with it. Native will always be more performant and you should use native whenever possible. Try experimenting and you'll reach the sweet spot.    A lot of design decisions around Web containers were made specifically for displaying rich dynamic content, which used to be tricky using just native components. Try to think of this as just another  component  and try not to use the web container to implement app logic. It will most likely result in bad user experience.    You can do a lot of cool things with this, such as implementing little animations here and there without having to invent a whole new JSON syntax because you can now just use CSS or Javascript animation. Also you can do things like text overlay over image simply by using CSS positioning.  Please share cool use cases you find .    This is just the first draft and intentionally minimal. We may add more features depending on how it goes. Feedback appreciated.", 
            "title": "Notice"
        }, 
        {
            "location": "/web/#web-containers-in-action", 
            "text": "Web containers can be used both as a  fullscreen background  and as an  inline component . Here are some examples:            Anime.js (Mix and match with native)  Native feed view + partial web        D3.js (Native slider controller + Web container output)  Canvas + JS Demo (Background type)        Anime.js (Animated HTML element inside native scroll view)  Phaser.js (Background type, with user interaction)        Three.js (background type)  Three.js (background type)", 
            "title": "Web Containers in Action"
        }, 
        {
            "location": "/web/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/web/#use-alongside-native-components", 
            "text": "Web containers plug into native layout alongside other native components so seamlessly that you won't even be able to tell the difference in most cases. It's just like any other  component ! Style and use them together with other native Jasonette components.", 
            "title": "Use alongside native components"
        }, 
        {
            "location": "/web/#dissolve-right-into-native-layout", 
            "text": "Same native  layout system  you already know.", 
            "title": "Dissolve right into native layout"
        }, 
        {
            "location": "/web/#scroll-just-like-other-components", 
            "text": "Since it's just like any other component, you can use it in a scroll view, and scroll it just like label, button, image, etc.  [Note] This is possible because of the  design decision  made to make the contents inside a web container NOT scrollable when contained within a scroll view (for obvious UX reasons).", 
            "title": "Scroll just like other components"
        }, 
        {
            "location": "/web/#or-use-as-fullscreen-background", 
            "text": "Not just for scrolling components. you can use it as a background by setting \"html\" type for background.", 
            "title": "Or use as fullscreen background"
        }, 
        {
            "location": "/web/#write-once-use-anywhere", 
            "text": "You can use  mix-ins  to write a single HTML container inside JSON and mix them into any context such as the background or a layout.", 
            "title": "Write once, use anywhere"
        }, 
        {
            "location": "/web/#what-is-possible", 
            "text": "Since each Web container is basically a self-contained web view, you can do anything you can do with a browser, which includes any HTML markup, Javascript, and CSS styling.", 
            "title": "What is possible?"
        }, 
        {
            "location": "/web/#canvas", 
            "text": "", 
            "title": "Canvas"
        }, 
        {
            "location": "/web/#svg-css", 
            "text": "", 
            "title": "SVG &amp; CSS"
        }, 
        {
            "location": "/web/#iframe", 
            "text": "", 
            "title": "iframe"
        }, 
        {
            "location": "/web/#javascript", 
            "text": "", 
            "title": "Javascript"
        }, 
        {
            "location": "/web/#interaction-between-native-actions-and-web-container", 
            "text": "Templates  work exactly the same as the rest of Jasonette. So you can use native UI elements as input, set  local variables , and re-render accordingly using the local variable to dynamically display output onto the web container.", 
            "title": "Interaction between native actions and Web container"
        }, 
        {
            "location": "/web/#mix-and-match", 
            "text": "Jasonette already has most of what you need to build sophisticated native apps, even without the web container.  But web containers can be powerful when seamlessly blended into the rest of the native app to perform things that were hard to do with existing Jasonette api.", 
            "title": "Mix and match"
        }, 
        {
            "location": "/web/#usage", 
            "text": "Syntax  Examples  Important Tips (MUST READ)", 
            "title": "Usage"
        }, 
        {
            "location": "/web/#syntax", 
            "text": "", 
            "title": "Syntax"
        }, 
        {
            "location": "/web/#1-as-component", 
            "text": "Just like rest of the Jasonette  components , you can plug it into  layouts  and  scroll views(sections) .      web containers plugged in everywhere  using web container to animate text via JS            type :  \"html\"  text : A self contained HTML text ( html ... /html ), which means everything from  script  tag to  style  tag.  style :  Required. Especially the height . Web containers should NOT scroll, therefore everything outside of the  style.height  you specify will get cut off. This attribute is about how the web container looks from the outside. To style the HTML elements inside, just include the CSS inside the HTML markup.   action : (optional) Connect with any  action  or a web container specific action:  \"type\": \"$default\" .  [IMPORTANT]  By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything.  In order to override this behavior, attach a  \"type\": \"$default\"  action, so the web container knows.     {\n   items : [{\n     type :  html ,\n     text :  html .... /html ,\n         style : {\n             height :  100 \n        },\n     action : {\n       type :  $default \n    }\n  }]\n}", 
            "title": "1. As Component"
        }, 
        {
            "location": "/web/#2-as-background", 
            "text": "Web containers can be plugged into  body.style.background  too, which will take up the full screen.     Use any JS library  Interacting with HTML content via touch           Same as component usage, except there's no need for  style , and you can't attache an  action  other than  \"type\": \"$default\" .   type :  \"html\"  text : A self contained HTML text ( html ... /html ), which means everything from  script  tag to  style  tag.  action : (optional) Connect with  \"type\": \"$default\"  in order to let the web container handle the touch event. Otherwise not needed.  [IMPORTANT]  By default, web container content DOES NOT respond to user touch. This means if you click on a link inside the HTML, it won't do anything.  In order to override this behavior, attach a  \"type\": \"$default\"  action, so the web container knows.     {\n   body : {\n     style : {\n       background : {\n         type :  html ,\n         text :  html .... /html ,\n         action : {\n           type :  $default \n        }\n      }\n    }\n  }\n}", 
            "title": "2. As Background"
        }, 
        {
            "location": "/web/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/web/#display-scrolling-h1-elements", 
            "text": "{\n     $jason : {\n         head : {\n             title :  Scrolling Web Container \n             data : {\n                 colors : [{\n                     code :  #ff0000 \n                }, {\n                     code :  rgba(0,0,0,0.3) \n                }, {\n                     code :  #00ff00 \n                }, {\n                     code :  rgb(130,43,32) \n                }]\n            },\n             templates : {\n                 body : {\n                     sections : [{\n                         items : {\n                             {{#each colors}} : {\n                                 type :  html ,\n                                 style : {\n                                     height :  50 \n                                },\n                                 text :  html head style h1{font-size: 30px; color: {{code}};} /style /head body h1 Hello World /h1 /body /html \n                            }\n                        }\n                    }]\n                }\n            }\n        }\n    }\n}", 
            "title": "Display scrolling H1 elements"
        }, 
        {
            "location": "/web/#iframe-as-background", 
            "text": "{\n   $jason : {\n     head : {\n       title :  pdf.js \n    },\n     body : {\n       style : {\n         background : {\n           type :  html ,\n           text :  html head style html{padding:0;margin:0;margin-top: 64px;} body,iframe{width:100%;height:100%;padding:0;margin:0;border:0;} /style body iframe src='https://mozilla.github.io/pdf.js/web/viewer.html'/ /body /html \n        }\n      }\n    }\n  }\n}", 
            "title": "iframe as background"
        }, 
        {
            "location": "/web/#threejs-as-background", 
            "text": "{\n   $jason : {\n     head : {\n         title :  pdf.js \n    },\n     body : {\n         style : {\n             border :  none ,\n             color :  rgba(0,0,0,0) ,\n             background : {\n                 type :  html ,\n                 text :  html   head   style  body { margin: 0; padding: 0; background: #111; overflow: hidden; } .dg{visibility: hidden;} /style   /head   body   script src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js' /script script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js' /script script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r50/three.min.js' /script script  window.onload = function(){ var $container = $('#container'); var renderer = new THREE.WebGLRenderer({antialias: true}); var camera = new THREE.PerspectiveCamera(80,window.innerWidth/window.innerHeight,0.1,10000); var scene = new THREE.Scene(); var mouseX = 0, mouseY = 0; scene.add(camera); renderer.setSize(window.innerWidth, window.innerHeight); $container.append(renderer.domElement); window.addEventListener( 'resize', onWindowResize, false ); var Controls = function() { this.speed = 2; this.rotation = 0; }; var text = new Controls(), gui = new dat.GUI(); gui.add(text, 'speed', 0, 10); gui.add(text, 'rotation',0,15); var normalMaterial = new THREE.MeshNormalMaterial({}); function Torus(f){ this.b = new THREE.Mesh(new THREE.TorusGeometry( 160, 75, 2, 13),normalMaterial); this.b.position.x = 57*Math.cos(f); this.b.position.y = 57*Math.sin(f); this.b.position.z = f*1.25; this.b.rotation.z = f*0.03; } var numTorus = 80; var tabTorus = []; for(var i=0; i numTorus; i++){ tabTorus.push(new Torus(-i*13)); scene.add(tabTorus[i].b); }  function update(){ for(var i=0; i numTorus; i++){ tabTorus[i].b.position.z+=text.speed; tabTorus[i].b.rotation.z+=i*text.rotation/10000; if(tabTorus[i].b.position.z 0) { tabTorus[i].b.position.z=-1000; } } } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize( window.innerWidth, window.innerHeight ); } function onDocumentMouseMove(event) { mouseX = ( event.clientX - windowHalfX ); mouseY = ( event.clientY - windowHalfY ); } function render() { requestAnimationFrame( render); camera.position.x += ( mouseX - camera.position.x ) * .05; camera.position.y += ( - mouseY - camera.position.y ) * .05; renderer.render(scene, camera); update(); } render(); };  /script   div id='container' /div   /body   /html \n  }\n}", 
            "title": "three.js as background"
        }, 
        {
            "location": "/web/#tips", 
            "text": "\u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  IMPORTANT. READ ALL!!!!     \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f  \u26a0\ufe0f", 
            "title": "Tips"
        }, 
        {
            "location": "/web/#1-web-container-content-scrolls-only-when-used-as-a-background", 
            "text": "When you use a web container  as a background , it scrolls just fine, and behaves like you would expect.  However when you use a web container  as a component inside a scrolling view , the content inside  does not scroll  because the container itself is supposed to scroll.   Which brings us to:", 
            "title": "1. Web container content scrolls ONLY when used as a background"
        }, 
        {
            "location": "/web/#2-must-specify-height-when-in-scroll-view", 
            "text": "Every web container must have a fixed height when inside a scroll view (sections).  This is so that there exists no scrolling view within a scroll view, which is a bad user experience.  {\n    ...\n     sections : [{\n         items : [{\n             type :  html ,\n             text :  html .... /html ,\n             style : {\n                 height :  100 \n            },\n             action : {\n                 type :  $default \n            }\n        }, {\n            ...\n        }],\n        ...\n    }]\n}", 
            "title": "2. Must specify height when in scroll view"
        }, 
        {
            "location": "/web/#3-use-single-quotes", 
            "text": "Obviously, an entire HTML markup can be a long text. Sometimes it will contain double quotes and some characters that need to be escaped.  Since we're trying to package an entire HTML markup into a text attribute, you'll either need to escape these characters or use single quotes instead of double quotes.", 
            "title": "3. Use single quotes"
        }, 
        {
            "location": "/web/#4-wrap-all-script-content-inside-windowonload-function", 
            "text": "Because of the way native scroll views recycle their child items, you need to make sure your javascript lines are run AFTER the container has loaded.  To do this, wrap your Javascript inside  window.onload . Here's an example:  {\n   type :  html ,\n   text :  html head style .square{background: red; width: 50px; height: 50px;} /style script src='https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.0/anime.min.js' /script script var x=200; var move = function() {var el = document.querySelector('#domNode .el'); var domNode = anime({ targets: el, translateX: x, translateY: x}); x=200-x;}; document.addEventListener('DOMContentLoaded', function(event) { setInterval(move, 1000); });  /script body div id='domNode' div class='large square el' /div /div /body /html \n}", 
            "title": "4. Wrap all script content inside window.onload = function() { ... }"
        }, 
        {
            "location": "/web/#5-by-default-the-html-content-does-not-respond-to-user-input", 
            "text": "HTML content inside a web container is NOT interactive by default. This means NOTHING will happen when you touch the contents inside, even if it's a link. (Especially if it's a link, because it would be weird to have a small portion of a native app redirect to a completely different web page)   The interaction is disabled by default because the web container is designed as a  dynamic output method  and  NOT as an input method .   Web containers are very useful when it comes to  displaying rich dynamic content , and this is the primary purpose of the web container. Also, in most cases we want to trigger native actions instead of letting the HTML content handle events. If we allowed HTML to handle user touch for example, then we wouldn't have a way to take advantage of Jasonette's  native actions .   So whenever possible, use native components such as  textarea  or  textfield  to receive user input instead of trying to use the HTML form  element.   Also, keep in mind pure native components generally perform better too. Just use it wisely.   That said, there are some cases where it does make sense to let the HTML handle events. In which case you could:", 
            "title": "5. By default, the HTML content does NOT respond to user input"
        }, 
        {
            "location": "/web/#6-use-the-type-default-action-to-force-jasonette-to-let-html-handle-events", 
            "text": "If you know what you're doing, you can override the block and let the HTML handle user events.  {\n     type :  html ,\n     text :  html body script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js' script $(function(){$(document).on('click', function(){ $('body').css('background', '#ff0000'); }); }); /script /body /html ,\n     action : {\n         type :  $default \n    }\n}", 
            "title": "6. Use the \"type\": \"$default\" action to force Jasonette to let HTML handle events."
        }, 
        {
            "location": "/web/#technical-details", 
            "text": "Under the hood, each web container is a containerized instance of web view ( UIWebView for iOS  and  WebView for Android ).  It gets recycled when you scroll just like rest of the native components so it's pretty efficient.", 
            "title": "Technical Details"
        }, 
        {
            "location": "/env/", 
            "text": "You can get useful information about the device or the app's current state via the \n$env\n variable.\n\n\nNote that \n$env\n is a \nread-only\n variable, so you can only read and not write to it.\n\n\nYou can access them using templates, just like other variables (global variable, cache, local variables).\n\n\nSupported Attributes\n\n\n\n\n$env.device.width\n : device width\n\n\n$env.device.height\n : device height\n\n\n$env.device.os.name\n : os name\n\n\n$env.device.os.version\n : os version\n\n\n$env.device.language\n: device language (\n\"en-US\"\n, etc.)\n\n\n$env.view.url\n: current view url\n\n\n\n\nExample\n\n\n{\n  \n$jason\n: {\n    \nhead\n: {\n      \ntitle\n: \n$env.device access\n,\n      \nactions\n: {\n        \n$load\n: {\n          \ntype\n: \n$render\n\n        }\n      },\n      \ntemplates\n: {\n        \nbody\n: {\n          \nsections\n: [\n            {\n              \nitems\n: [\n                {\n                  \ntype\n: \nlabel\n,\n                  \ntext\n: \nDevice width: {{$env.device.width}}\n\n                },\n                {\n                  \ntype\n: \nlabel\n,\n                  \ntext\n: \nDevice height: {{$env.device.height}}\n\n                },\n                {\n                  \ntype\n: \nlabel\n,\n                  \ntext\n: \n{{$env.device.os.name}}\n\n                },\n                {\n                  \ntype\n: \nlabel\n,\n                  \ntext\n: \nversion: {{$env.device.os.version}}\n\n                },\n                {\n                  \ntype\n: \nlabel\n,\n                  \ntext\n: \nversion: {{$env.device.language}}\n\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  }\n}", 
            "title": "\u2605 Environment Variables"
        }, 
        {
            "location": "/env/#supported-attributes", 
            "text": "$env.device.width  : device width  $env.device.height  : device height  $env.device.os.name  : os name  $env.device.os.version  : os version  $env.device.language : device language ( \"en-US\" , etc.)  $env.view.url : current view url", 
            "title": "Supported Attributes"
        }, 
        {
            "location": "/env/#example", 
            "text": "{\n   $jason : {\n     head : {\n       title :  $env.device access ,\n       actions : {\n         $load : {\n           type :  $render \n        }\n      },\n       templates : {\n         body : {\n           sections : [\n            {\n               items : [\n                {\n                   type :  label ,\n                   text :  Device width: {{$env.device.width}} \n                },\n                {\n                   type :  label ,\n                   text :  Device height: {{$env.device.height}} \n                },\n                {\n                   type :  label ,\n                   text :  {{$env.device.os.name}} \n                },\n                {\n                   type :  label ,\n                   text :  version: {{$env.device.os.version}} \n                },\n                {\n                   type :  label ,\n                   text :  version: {{$env.device.language}} \n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/convention/", 
            "text": "Jasonette is built around various conventions in order to make things simpler.\n\n\n\n\nRules\n\n\n\u25a0  Everything is a string\n\n\nThe JSON we use in Jasonette is completely string based. All values are string. Sometimes this may look inconvenient, but \nassuming everything is a string\n provides lots of convenience when JSON parsing is concerned.\n\n\n\u25a0  All keywords are lowercased\n\n\nAll reserved keywords on Jasonette (component name, action name, etc.) are lowercased. \n\n\n\n\nValues\n\n\n\u25a0 color\n\n\nrgb\n\n\nWe can use rgb code.\n\n\n{\n  \"body\": {\n    \"style\": {\n      \"background\": \"rgb(244,244,244)\"\n    }\n  }\n}\n\n\n\nrgba\n\n\nWe can use rgba code. r,g,b parts are same as rgb, but the last value is the opacity.\n\n\n{\n  \"body\": {\n    \"style\": {\n      \"background\": \"rgba(255,255,255,0.3)\"\n    }\n  }\n}\n\n\n\nhex code\n\n\nWe can also use hex code\n\n\n{\n  \"body\": {\n    \"style\": {\n      \"background\": \"#ff0000\"\n    }\n  }\n}\n\n\n\n\n\n\u25a0 dimension\n\n\nAll numbers are pixels unless otherwise specified.\n\n\n1. Pixels\n\n\nBelow we create a label with 300pixel width.\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"hi\",\n  \"style\": {\n    \"width\": \"300\"\n  }\n}\n\n\n\n2. Percentage\n\n\nWe can use the \n%\n sign. When we do so, it sets the dimension based on the current orientation.\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"hi\",\n  \"style\": {\n    \"width\": \"100%\"\n  }\n}\n\n\n\n3. Pixels and Percentage\n\n\nWe can also use a combination of percentage and pixels.\n\n\nIn the following example we create a label that's 80 pixels smaller horizontally than the full device width:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"hi\",\n  \"style\": {\n    \"width\": \"100%-80\"\n  }\n}", 
            "title": "\u25a0 Tips"
        }, 
        {
            "location": "/convention/#rules", 
            "text": "", 
            "title": "Rules"
        }, 
        {
            "location": "/convention/#everything-is-a-string", 
            "text": "The JSON we use in Jasonette is completely string based. All values are string. Sometimes this may look inconvenient, but  assuming everything is a string  provides lots of convenience when JSON parsing is concerned.", 
            "title": "\u25a0  Everything is a string"
        }, 
        {
            "location": "/convention/#all-keywords-are-lowercased", 
            "text": "All reserved keywords on Jasonette (component name, action name, etc.) are lowercased.", 
            "title": "\u25a0  All keywords are lowercased"
        }, 
        {
            "location": "/convention/#values", 
            "text": "", 
            "title": "Values"
        }, 
        {
            "location": "/convention/#color", 
            "text": "", 
            "title": "\u25a0 color"
        }, 
        {
            "location": "/convention/#rgb", 
            "text": "We can use rgb code.  {\n  \"body\": {\n    \"style\": {\n      \"background\": \"rgb(244,244,244)\"\n    }\n  }\n}", 
            "title": "rgb"
        }, 
        {
            "location": "/convention/#rgba", 
            "text": "We can use rgba code. r,g,b parts are same as rgb, but the last value is the opacity.  {\n  \"body\": {\n    \"style\": {\n      \"background\": \"rgba(255,255,255,0.3)\"\n    }\n  }\n}", 
            "title": "rgba"
        }, 
        {
            "location": "/convention/#hex-code", 
            "text": "We can also use hex code  {\n  \"body\": {\n    \"style\": {\n      \"background\": \"#ff0000\"\n    }\n  }\n}", 
            "title": "hex code"
        }, 
        {
            "location": "/convention/#dimension", 
            "text": "All numbers are pixels unless otherwise specified.", 
            "title": "\u25a0 dimension"
        }, 
        {
            "location": "/convention/#1-pixels", 
            "text": "Below we create a label with 300pixel width.  {\n  \"type\": \"label\",\n  \"text\": \"hi\",\n  \"style\": {\n    \"width\": \"300\"\n  }\n}", 
            "title": "1. Pixels"
        }, 
        {
            "location": "/convention/#2-percentage", 
            "text": "We can use the  %  sign. When we do so, it sets the dimension based on the current orientation.  {\n  \"type\": \"label\",\n  \"text\": \"hi\",\n  \"style\": {\n    \"width\": \"100%\"\n  }\n}", 
            "title": "2. Percentage"
        }, 
        {
            "location": "/convention/#3-pixels-and-percentage", 
            "text": "We can also use a combination of percentage and pixels.  In the following example we create a label that's 80 pixels smaller horizontally than the full device width:  {\n  \"type\": \"label\",\n  \"text\": \"hi\",\n  \"style\": {\n    \"width\": \"100%-80\"\n  }\n}", 
            "title": "3. Pixels and Percentage"
        }, 
        {
            "location": "/advanced/", 
            "text": "What is this page about?\n\n\nYou can probably build any app you can imagine with Jasonette alone.\n\n\nHowever sometimes you may want to:\n\n\n\n\nExtend Jasonette engine itself:\n Want a JSON powered MapKit? Want a JSON powered video livestream view? Want a JSON powered ApplePay? Just write an extension! (No, really, please someone write an extension.)\n\n\nIntegrate Jasonette with existing code:\n Already have your own app code? Plug in Jasonette to your existing app with just a few lines!\n\n\n\n\n\n\nExtension vs. Integration\n\n\nBoth extending and integrating involve writing native iOS code. But here's the difference:\n\n\n\n\n\n\nExtending Jasonette\n means you're extending Jasonette itself. This means:\n\n\n\n\nAll your custom modules will be JSON powered, just like the rest of Jasonette.\n\n\nYou will need to follow a simple convention when writing the extension. \n\n\nYou can share it with the community when you're done. If it's useful enough it may even be integrated into the main codebase.\n\n\n\n\n\n\n\n\nIntegrating with Jasonette\n means you already have existing code and are using Jasonette only partially. This means:\n\n\n\n\nYou can start using Jasonette in your existing app instantly, without re-writing anything. Just a few lines of code necessary.\n\n\nYou will be able to take advantage of all of Jasonette's power whenever you use the Jasonette view.\n\n\nThe only drawback is you can't control your own non-Jasonette code with JSON\n\n\n\n\n\n\n\n\nExtending Jasonette is the recommended way in most cases,\n since it requires very little additional effort, but automatically comes with the power to control your own custom native modules via JSON.\n\n\n\n\n\u2605  Extension\n\n\nLet's jump into writing extensions! There are two things you can extend: \nComponents\n and \nActions\n\n\n1. Extend UI Components\n\n\nJasonette comes with various \nUI components\n right out of the box, but you can easily build your own native component if you need to. Just follow the instructions below to write your component class, and you will instantly be able to summon your component within the \nJasonette layout system\n simply by describing in JSON.\n\n\n1.1. How to write a UI Component class\n\n\nAll you need to do is write a class with a single builder method that returns a \nUIView\n subclass. Here's how:\n\n\n\n\nStep 1. Create a \nJasonComponent\n subclass\n\n\nThe example below demonstrates how to create a \nmap\n component.\n\n\nJust remember the following rules:\n\n\n\n\nCreate a class that inherits from \nJasonComponent.h\n.\n\n\nThe class name should follow this convention: \nJason(COMPONENT_NAME)Component\n\n\nOnly the first character of the COMPONENT_NAME should be capitalized\n\n\n\n\nSo, to create a \nmap\n component:\n\n\n\n\nwe create a subclass of \nJasonComponent\n\n\nAnd name it \nJasonMapComponent\n (Notice the capitalization).\n\n\nWe also import \nMapKit\n since we will need to access the iOS MapKit API.\n\n\n\n\nHere's the result:\n\n\n// JasonMapComponent.h\n#import \"JasonComponent.h\"\n#import \nMapKit/MapKit.h\n\n@interface JasonMapComponent : JasonComponent \nMKMapViewDelegate\n\n@end\n\n\n\n\n\nStep 2. Implement the builder method\n\n\nYou only need to implement a single class method:\n\n\n+ (UIView \n)build: (UIView\n)component withJSON: (NSDictionary \n)json withOptions: (NSDictionary \n)options\n.\n\n\nBasically it's a builder method that takes three arguments to create a UIView subclass. The arguments are:\n\n\nA. \ncomponent\n: A UIView instance to fill in. Just assume that a UIView will be passed in, and repurpose it to your liking.\n\n\nB. \njson\n: A JSON snippet in NSDictionary format which includes all the information we need to construct this component.\n\n\nC. \noptions\n: Useful in a few cases but you don't need to use this in most cases, so let's not worry about it here.\n\n\nThe result can be a UILabel, UIButton, or whatever, as long as it's a subclass of \nUIView\n.\n\n\nHere's how it works:\n\n\nWhen Jasonette is building a layout, it will call this \nbuild:withJSON:withOptions\n method, passing in a relevant UIView instance (\ncomponent\n) as well as the JSON blueprint (\njson\n) from which you will build your own UIView subclass.\n\n\nFrom here, all you need to do is:\n\n\n\n\n\n\nCheck if the \ncomponent\n is nil. If it's nil, create a new instance. If it's not, then we just reuse it.\n\n\n\n\n\n\nConstruct your own custom UIView subclass instance based on the \njson\n object received, and return. You're done!\n\n\n\n\n\n\nHere's what the most primitive version would look like:\n\n\n// JasonMapComponent.m\n@implementation JasonMapComponent\n+ + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n  return mapView;\n}\n@end\n\n\n\nThis works since \nMKMapView\n is a subclass of \nUIView\n.\n\n\n\n\nStep 3. And that's it!\n\n\nThis is seriously all we need to do! Our map component is now 100% powered by JSON, just like rest of the \nJasonette components\n.\n\n\nHere's an example of how we would summon our \nmap\n component.\n\n\n{\n  \"type\": \"vertical\",\n  \"components\": [\n    { \"type\": \"label\", \"text\": \"This is a map\" },\n    { \"type\": \"map\" }\n  ]\n}\n\n\n\nSo how does this work behind the scenes? Whenever Jasonette encounters a component description, \n\n\n\n\nIt looks at its \ntype\n first. Here we see the \n{\"type\": \"map\"}\n, so it's a \nmap\n component.\n\n\nBased on this, it looks for a class named \nJasonMapComponent\n (Remember the naming convention is: \nJason(COMPONENT_NAME_WITH_FIRST_LETTER_CAPITALIZED)Component\n\n\nWhen it finds the component class, it runs its \nbuild:withOptions:\n method to finally build the component.\n\n\n\n\nOf course, this is a simplified version of how the actual \nmap\n component works. In reality the \njson\n object would contain more information than just \n{ \"type\": \"map\" }\n. It may look something like this:\n\n\n{\n  \"type\": \"map\",\n  \"region\": {\n    \"coord\": \"40.7409395,-74.0083886\",\n    \"width\": \"50\"\n  }\n}\n\n\n\nAll you need to do is take this, parse it, and customize the \nmapView\n object before returning, like the comment below.\n\n\n// JasonMapComponent.m\n@implementation JasonMapComponent\n+ (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n\n  /*\n    Do some customization with the 'json' argument here.\n  */\n\n  return mapView;\n}\n@end\n\n\n\n\n\n1.2. Tips on writing component classes\n\n\n\n\nA. Keep it stateless and self contained\n\n\nThese component builder classes and methods are stateless by design. That's why the \nbuild:withOptions:\n method is \na class method\n that simply takes a \nNSDictionary\n as input and returns a \nUIView\n as output.\n\n\n\n\nB. Use class methods\n\n\nLike mentioned above, Jasonette requires that all the component methods are implemented as class methods.\n\n\nYou may ask \"But there's a delegate method I'm trying to use for handling events, and it's an instance method only. How do I deal with this?\".\n\n\nWell, in objective-c, classes are also objects, so you can in fact call them the same way you call an instance method.\n\n\nJust switch out the instance method with its class method version\n (use \n+\n instead of \n-\n at the beginning of the method definition), like below:\n\n\n// JasonMapComponent.m\n@implementation JasonMapComponent\n+ (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n\n  /*\n    Do some customization with the 'json' argument here\n  */\n\n  mapView.delegate = self;\n\n  return mapView;\n}\n\n+ (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation{\n  /*\n    Handle the event\n  */\n}\n@end\n\n\n\nHere we implement\n\n\n+ (void)mapView:(MKMapView \n)mapView didUpdateUserLocation:(MKUserLocation \n)userLocation\n\n\nto handle MapKit events.\n\n\n\n\nC. Take advantage of the built-in stylize method\n\n\nA lot of style attributes such as background, width, height, corner_radius, opacity, etc. are common across various types of components.\n\n\nJasonComponent\n class has a built-in method that you can utilize to automatically apply these styles. It's called:\n\n\n+ (void) stylize: (NSDictionary \n)json component: (UIView \n)component\n.\n\n\nJust by calling this method once, you can take advantage of all the following style attributes right out of the box!\n\n\n{\n  \"type\": \"mycustomitem\",\n  \"style\": {\n    \"width\": \"...\",\n    \"height\": \"...\",\n    \"opacity\": \"...\",\n    \"background\": \"...\",\n    \"color\": \"...\",\n    \"corner_radius\": \"...\"\n  }\n}\n\n\n\nHere's an example code that creates a UIView, runs it through the built-in \nstylize\n, and then applies additional custom styles.\n\n\n+ (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  // Build some component here\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n\n  /*\n  customize the component here\n  */\n\n  // run it through the default stylize method\n  [self stylize: json component: component];\n\n  // Add your own custom styling logic here, on top of the default styling above\n  if(style[@\"rotate\"] {\n    // some custom styling logic ....\n  }\n\n  return component;\n}\n\n\n\nYou don't even need to include an additional file, since the \nstylize\n method comes for free just by subclassing \nJasonComponent\n\n\n\n\n2. Extend Actions\n\n\nJust like components, you can easily write your own native \naction\n modules and call them using 100% JSON syntax.\n\n\nOne thing to keep in mind: \nAction classes contain a collection of related action methods\n, which is why most actions are namespaced as \n$(GROUPNAME).(METHODNAME)\n when you call it. \n\n\nFor example \nJasonNetworkAction\n class--an action class that deals with network requests--contains multiple methods: \nrequest\n, \nupload\n, \nauth\n, \nunauth\n. Each method can be invoked by Jasonette using \n$network.request\n, \n$network.auth\n, \n$network.upload\n, and \n$network.unauth\n actions.\n\n\n\n\n2.1. How to write an Action\n\n\nLet's try writing an action class (\n$util\n) and one of its methods which displays a banner (\n$util.banner\n).\n\n\nWe would like to parse this JSON markup:\n\n\n{\n  \"type\": \"$util.banner\",\n  \"options\": {\n    \"title\": \"Hello\",\n    \"description\": \"Hello world!\"\n  }\n}\n\n\n\nto display a notification banner that looks like this:\n\n\n[IMAGE]\n\n\n\n\nStep 1. Create an Action Class\n\n\nThree rules for writing your action class:\n\n\n\n\nCreate a class that inherits from \nJasonAction.h\n.\n\n\nThe class name should follow the following convention: \nJason(GROUP_NAME)Action\n\n\nOnly the first character of the GROUP_NAME should be capitalized\n\n\n\n\nTo create a class that responds to \n$util.banner\n, we first need a class for the \nutil\n group. Following the rule, we need to create a \nJasonUtilAction\n, which inherits from \nJasonAction\n:\n\n\n//  JasonUtilAction.h\n#import \"JasonAction.h\"\n@interface JasonUtilAction : JasonAction\n@end\n\n//  JasonUtilAction.m\n#import \"JasonUtilAction.h\"\n@implementation JasonUtilAction\n@end\n\n\n\n\n\nStep 2. Write an Action Method\n\n\nThree rules for naming an action method:\n\n\n\n\nIt should be an \ninstance method\n.\n\n\nIts return value should be \nvoid\n.\n\n\nWhatever you name your method will respond to an action call \n$[GROUP_NAME].[METHOD_NAME]\n.\n\n\n\n\nFor example, to handle \n$util.banner\n action we need to implement an \ninstance method\n, and its name should be \nbanner\n, like this:\n\n\n//  JasonUtilAction.h\n#import \"JasonAction.h\"\n@interface JasonUtilAction : JasonAction\n@end\n\n//  JasonUtilAction.m\n#import \"JasonUtilAction.h\"\n@implementation JasonUtilAction\n- (void)banner{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [[TWMessageBarManager sharedInstance] showMessageWithTitle: @\"Banner Title\"\n                                                       description: @\"Here goes banner description\"\n                                                              type: TWMessageBarMessageTypeInfo];\n    });\n    [[Jason client] success];\n}\n@end\n\n\n\nThis will display a banner when the following action is triggered\n\n\n{\n  \"type\": \"$util.banner\"\n}\n\n\n\nNotice the \n[[Jason client] success]\n line. This is how your action signals that its job is over. More on this later.\n\n\n\n\nStep 3. Pass arguments to the action\n\n\nIn the previous example we hardcoded the title and description for the banner. But a component that displays the same text all the time is not cool. Instead we want to pass some arguments and have them customize how the action is run. For example, we want the \n$util.banner\n action to take an \noptions\n attribute and build a custom banner, like this:\n\n\n{\n  \"type\": \"$util.banner\",\n  \"options\": {\n    \"title\": \"Yo\",\n    \"description\": \"Dawg\"\n  }\n}\n\n\n\nTo access the \noptions\n attribute of an action, simply use \nself.options\n inside the method, like this:\n\n\n//  JasonUtilAction.h\n#import \"JasonAction.h\"\n@interface JasonUtilAction : JasonAction\n@end\n\n//  JasonUtilAction.m\n#import \"JasonUtilAction.h\"\n@implementation JasonUtilAction\n- (void)banner{\n\n    // Extract title and description out of self.options!\n    NSString *title = self.options[@\"title\"];\n    NSString *description = self.options[@\"description\"];\n\n    // Use the custom title and description instead of hardcoding!\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [[TWMessageBarManager sharedInstance] showMessageWithTitle: title\n                                                       description: description\n                                                              type: TWMessageBarMessageTypeInfo];\n    });\n    [[Jason client] success];\n}\n@end\n\n\n\nYou don't need to define \nself.options\n anywhere because you get it for free just by subclassing \nJasonAction\n.\n\n\n\n\nStep 4. End the action\n\n\nYou MUST explicitly signal the end of each action when implementing an action method\n.\n\n\nThis is because we can't assume that all actions end when they reach the last line. \nSome actions trigger asynchronous background tasks, and we need to wait until that task is over.\n \n\n\nTo signal the end of an action we call:\n \n\n\n[[Jason client] success];\n\n\nThis command will:\n\n\n\n\nFinish the current action\n\n\nSee if the current action has a \nsuccess\n attribute, and if it does, proceed to call that action.\n\n\n\n\nHere's an example where we make a network request, and then display a success banner when it succeeds:\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://imagejason.herokuapp.com\",\n    \"method\": \"post\"\n  },\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Success!\",\n      \"description\": \"Successfully posted!\"\n    }\n  }\n}\n\n\n\nThe implementation for \n$network.request\n may look something like this:\n\n\n//  JasonNetworkAction.m\n#import \"JasonNetworkAction.h\"\n@implementation JasonNetworkAction\n...\n- (void)request{\n  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n  ... \n  dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){\n    [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) {\n    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[Jason client] success];\n      });\n    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {\n    }];\n  });\n}\n... \n@end\n\n\n\nNotice how we call the \n[[Jason client] success]\n line \ninside the \"success\" block, instead of the last line of the method\n. This is because the network request task runs asynchronously and the action shouldn't end until it reaches inside the \nsuccess\n block.\n\n\n\n\nStep 5. Handle exceptions\n\n\nWe can end an action with \n[[Jason client] success]\n when everything goes as expected. But what if something goes wrong? We still need to end the action but also run an exception handling logic, instead of going on to the next action.\n\n\nFor example, the \n$network.request\n may fail because there's no Internet connection. To handle these exceptions, Jason actions have another attribute called \nerror\n, as demonstrated below:\n\n\n{\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://imagejason.herokuapp.com\",\n    \"method\": \"post\"\n  },\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Success!\",\n      \"description\": \"Successfully fetched!\"\n    }\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"ERROR!!!!\",\n      \"description\": \"Uh oh, something went wrong!\"\n    }\n  }\n}\n\n\n\nTo signal that the action has ended with an error when we implement action methods, we call:\n\n\n[[Jason client] error];\n.\n\n\nLet's take the previous code and add that line:\n\n\n//  JasonNetworkAction.m\n#import \"JasonNetworkAction.h\"\n@implementation JasonNetworkAction\n...\n- (void)request{\n  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n  ... \n  dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){\n    [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) {\n    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[Jason client] success];\n      });\n    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[Jason client] error];\n      });\n    }];\n  });\n}\n... \n@end\n\n\n\nThe code is mostly same as the previous one, except we've added the \n[[Jason client] error];\n inside the \nfailure\n block of the task.\n\n\n\n\nStep 6. Set the return value\n\n\nIn many cases we want to run an action, take its output, and pass it to another action. \n\n\nHere, we run a \n$geo.get\n action, and then display its return value as an alert using \n$util.alert\n.\n\n\n{\n  \"type\": \"$geo.get\",\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Current Location\",\n      \"description\": \"{{$jason.coord}}\"\n    }\n  }\n}\n\n\n\nNotice how we use a variable called \n$jason\n. This is how return values work in Jasonette--if an action has a return value, it passes it along to the next action as a variable named \n$jason\n.\n\n\nTo end an action with a return value, we call:\n\n\n[[Jason client] success: response]\n\n\nTo support the JSON markup above, the \n$geo.get\n action implementation should look like this:\n\n\n// JasonGeoAction.m\n#import \"JasonGeoAction.h\"\n@implementation JasonGeoAction\n- (void)get{\n\n  /*\n     Implement some location sensor logic that populates the 'currentLocation' variable\n  */\n\n  NSString *coord = [NSString stringWithFormat:@\"%g,%g\", currentLocation.coordinate.latitude, currentLocation.coordinate.longitude];\n  [[Jason client] success: @{@\"coord\": coord}];\n}\n@end\n\n\n\nHere we end \n$geo.get\n with an object \n@{@\"coord\": coord}\n. As mentioned above, this object will be accessible as \n$jason\n in the next action. This is how the \n$util.banner\n action can dynamically build itself using the\n$jason.coord\n value.\n\n\n\n\n\u2605  Integration\n\n\nJasonette by default covers most of what you need to build any app you can imagine. Also you can even extend its \nactions\n and \ncomponents\n, like we discussed above. \n\n\nHowever if you already have existing code and just want to integrate with Jasonette here and there, that's cool too! You don't have to throw away all your existing code and re-write everything just to take advantage of Jasonette!\n\n\nHow it works\n\n\nBasically, \nJasonViewController\n is a self contained class whose only requirement is that you set its \nurl\n before presenting it. This means you can integrate Jasonette just like using any other view controllers in your project.\n\n\n\n\n\u2605 REMEMBER - You will need to either copy all your existing project files into your Jasonette project, or Jasonette files into your own project, before you do this.\n\n\n\n\n1. Non-Jasonette =\n Jasonette\n\n\nHere's how you can open a \nJasonViewController\n from your own viewcontroller\u2014it's the same as opening any other viewcontrollers.\n\n\nA. First, include JasonViewController.h in your viewcontroller\n\n\n#import \"JasonViewController.h\"\n\n\n\nB. Open with push transition:\n\n\nTo open the \nJasonViewController\n with a push transition, do this:\n\n\nJasonViewController *vc = [[JasonViewController alloc] init];\nvc.url = @\"https://jasonbase.com/things/jYJ.json\";\n[self.navigationViewController pushViewController:vc animated:YES];\n\n\n\nC. Open with modal transition:\n\n\nTo open \nJasonViewController\n as a modal, do this:\n\n\nJasonViewController *vc = [[JasonViewController alloc] init];\nvc.url = @\"https://jasonbase.com/things/jYJ.json\";\nUINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];\n[self.navigationController presentViewController:nav animated:YES completion:nil];\n\n\n\nAnd that's it for Non-Jasonette =\n Jasonette view transition! Nothing special, just a regular viewcontroller.\n\n\n\n\n2. Jasonette =\n Non-Jasonette\n\n\nThis one's a bit different, since we are transitioning from a \nJasonViewController\n to your custom viewcontroller. \n\n\n\n\n\u2605 REMEMBER - Everything that happens on the Jasonette side is JSON powered.\n\n\nWhich means we need to handle the transition using JSON.\n\n\n\n\nHere's how to transition from a Jasonette view to your custom non-Jasonette view:\n\n\nOption A. Using Storyboard\n\n\nIt works exactly the same as normal Jasonette transitions--simply attach an \nhref\n and set its \nview\n attribute.\n\n\nYou need to name it like this:\n\n\n[STORYBOARD NAME].[STORYBOARD IDENTIFIER FOR THE VIEWCONTROLLER]\n\n\nFor example, to transition to a viewcontroller which has a storyboard ID of \nPaymentViewController\n on a storyboard named \nMainStoryboard.storyboard\n, we do the following:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Make a payment\",\n  \"href\": {\n    \"view\": \"MainStoryboard.PaymentViewController\"\n  }\n}\n\n\n\nOption B. Not using Storyboard\n\n\nIf you don't use storyboard, you can simply enter the viewcontroller's class name. For example, to transition to a \nPaymentViewController\n class,\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Make a payment\",\n  \"href\": {\n    \"view\": \"PaymentViewController\"\n  }\n}\n\n\n\n\n\nPassing arguments to your viewcontroller\n\n\nLet's say we now want to pass some arguments to the \nPaymentViewController\n. Here's how we can achieve this:\n\n\n\n\nStep 1. Add an \nNSDictionary\n property called \njason\n to your custom viewcontroller\n\n\nFor example if we wanted our \nPaymentViewController\n to support this feature, we will need to add an \nNSDictionary *jason\n property to the class, like this:\n\n\n// PaymentViewController.h\n#import \nUIKit/UIKit.h\n\n@interface PaymentViewController : UIViewController  \n  ....\n  @property (nonatomic, strong) NSDictionary *jason\n  ....\n@end\n\n\n\n\n\nStep 2. Pass the \noptions\n attribute inside \nhref\n.\n\n\nAnd we're all set! We can now start passing arguments to the \nPaymentViewController\n using the JSON syntax! Here's an example:\n\n\n{\n  \"type\": \"label\",\n  \"text\": \"Make a payment\",\n  \"href\": {\n    \"view\": \"MainStoryboard.PaymentViewController\",\n    \"options\": {\n      \"product_id\": \"3kzf9ela\",\n      \"user_id\": \"3kzf9ela\"\n    }\n  }\n}\n\n\n\n\n\nStep 3. Use the \njason\n property in your viewcontroller\n\n\nNow that our \nPaymentViewController\n is receiving the \noptions\n object as \njason\n, we just need to make use of it in the implementation. Example:\n\n\n// PaymentViewController.m\n#import \"PaymentViewController.h\"\n@implementation PaymentViewController\n  ....\n  - (void)viewDidLoad {\n    [super viewDidLoad];\n    NSString *product_id = self.jason[@\"product_id\"];\n    NSString *user_id = self.jason[@\"user_id\"];\n\n    /*\n      Use product_id and user_id for your custom logic!\n    */\n  }\n  ....\n@end", 
            "title": "\u25a0 Extending Jasonette (advanced)"
        }, 
        {
            "location": "/advanced/#what-is-this-page-about", 
            "text": "You can probably build any app you can imagine with Jasonette alone.  However sometimes you may want to:   Extend Jasonette engine itself:  Want a JSON powered MapKit? Want a JSON powered video livestream view? Want a JSON powered ApplePay? Just write an extension! (No, really, please someone write an extension.)  Integrate Jasonette with existing code:  Already have your own app code? Plug in Jasonette to your existing app with just a few lines!", 
            "title": "What is this page about?"
        }, 
        {
            "location": "/advanced/#extension-vs-integration", 
            "text": "Both extending and integrating involve writing native iOS code. But here's the difference:    Extending Jasonette  means you're extending Jasonette itself. This means:   All your custom modules will be JSON powered, just like the rest of Jasonette.  You will need to follow a simple convention when writing the extension.   You can share it with the community when you're done. If it's useful enough it may even be integrated into the main codebase.     Integrating with Jasonette  means you already have existing code and are using Jasonette only partially. This means:   You can start using Jasonette in your existing app instantly, without re-writing anything. Just a few lines of code necessary.  You will be able to take advantage of all of Jasonette's power whenever you use the Jasonette view.  The only drawback is you can't control your own non-Jasonette code with JSON     Extending Jasonette is the recommended way in most cases,  since it requires very little additional effort, but automatically comes with the power to control your own custom native modules via JSON.", 
            "title": "Extension vs. Integration"
        }, 
        {
            "location": "/advanced/#extension", 
            "text": "Let's jump into writing extensions! There are two things you can extend:  Components  and  Actions", 
            "title": "\u2605  Extension"
        }, 
        {
            "location": "/advanced/#1-extend-ui-components", 
            "text": "Jasonette comes with various  UI components  right out of the box, but you can easily build your own native component if you need to. Just follow the instructions below to write your component class, and you will instantly be able to summon your component within the  Jasonette layout system  simply by describing in JSON.", 
            "title": "1. Extend UI Components"
        }, 
        {
            "location": "/advanced/#11-how-to-write-a-ui-component-class", 
            "text": "All you need to do is write a class with a single builder method that returns a  UIView  subclass. Here's how:", 
            "title": "1.1. How to write a UI Component class"
        }, 
        {
            "location": "/advanced/#step-1-create-a-jasoncomponent-subclass", 
            "text": "The example below demonstrates how to create a  map  component.  Just remember the following rules:   Create a class that inherits from  JasonComponent.h .  The class name should follow this convention:  Jason(COMPONENT_NAME)Component  Only the first character of the COMPONENT_NAME should be capitalized   So, to create a  map  component:   we create a subclass of  JasonComponent  And name it  JasonMapComponent  (Notice the capitalization).  We also import  MapKit  since we will need to access the iOS MapKit API.   Here's the result:  // JasonMapComponent.h\n#import \"JasonComponent.h\"\n#import  MapKit/MapKit.h \n@interface JasonMapComponent : JasonComponent  MKMapViewDelegate \n@end", 
            "title": "Step 1. Create a JasonComponent subclass"
        }, 
        {
            "location": "/advanced/#step-2-implement-the-builder-method", 
            "text": "You only need to implement a single class method:  + (UIView  )build: (UIView )component withJSON: (NSDictionary  )json withOptions: (NSDictionary  )options .  Basically it's a builder method that takes three arguments to create a UIView subclass. The arguments are:  A.  component : A UIView instance to fill in. Just assume that a UIView will be passed in, and repurpose it to your liking.  B.  json : A JSON snippet in NSDictionary format which includes all the information we need to construct this component.  C.  options : Useful in a few cases but you don't need to use this in most cases, so let's not worry about it here.  The result can be a UILabel, UIButton, or whatever, as long as it's a subclass of  UIView .  Here's how it works:  When Jasonette is building a layout, it will call this  build:withJSON:withOptions  method, passing in a relevant UIView instance ( component ) as well as the JSON blueprint ( json ) from which you will build your own UIView subclass.  From here, all you need to do is:    Check if the  component  is nil. If it's nil, create a new instance. If it's not, then we just reuse it.    Construct your own custom UIView subclass instance based on the  json  object received, and return. You're done!    Here's what the most primitive version would look like:  // JasonMapComponent.m\n@implementation JasonMapComponent\n+ + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n  return mapView;\n}\n@end  This works since  MKMapView  is a subclass of  UIView .", 
            "title": "Step 2. Implement the builder method"
        }, 
        {
            "location": "/advanced/#step-3-and-thats-it", 
            "text": "This is seriously all we need to do! Our map component is now 100% powered by JSON, just like rest of the  Jasonette components .  Here's an example of how we would summon our  map  component.  {\n  \"type\": \"vertical\",\n  \"components\": [\n    { \"type\": \"label\", \"text\": \"This is a map\" },\n    { \"type\": \"map\" }\n  ]\n}  So how does this work behind the scenes? Whenever Jasonette encounters a component description,    It looks at its  type  first. Here we see the  {\"type\": \"map\"} , so it's a  map  component.  Based on this, it looks for a class named  JasonMapComponent  (Remember the naming convention is:  Jason(COMPONENT_NAME_WITH_FIRST_LETTER_CAPITALIZED)Component  When it finds the component class, it runs its  build:withOptions:  method to finally build the component.   Of course, this is a simplified version of how the actual  map  component works. In reality the  json  object would contain more information than just  { \"type\": \"map\" } . It may look something like this:  {\n  \"type\": \"map\",\n  \"region\": {\n    \"coord\": \"40.7409395,-74.0083886\",\n    \"width\": \"50\"\n  }\n}  All you need to do is take this, parse it, and customize the  mapView  object before returning, like the comment below.  // JasonMapComponent.m\n@implementation JasonMapComponent\n+ (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n\n  /*\n    Do some customization with the 'json' argument here.\n  */\n\n  return mapView;\n}\n@end", 
            "title": "Step 3. And that's it!"
        }, 
        {
            "location": "/advanced/#12-tips-on-writing-component-classes", 
            "text": "", 
            "title": "1.2. Tips on writing component classes"
        }, 
        {
            "location": "/advanced/#a-keep-it-stateless-and-self-contained", 
            "text": "These component builder classes and methods are stateless by design. That's why the  build:withOptions:  method is  a class method  that simply takes a  NSDictionary  as input and returns a  UIView  as output.", 
            "title": "A. Keep it stateless and self contained"
        }, 
        {
            "location": "/advanced/#b-use-class-methods", 
            "text": "Like mentioned above, Jasonette requires that all the component methods are implemented as class methods.  You may ask \"But there's a delegate method I'm trying to use for handling events, and it's an instance method only. How do I deal with this?\".  Well, in objective-c, classes are also objects, so you can in fact call them the same way you call an instance method.  Just switch out the instance method with its class method version  (use  +  instead of  -  at the beginning of the method definition), like below:  // JasonMapComponent.m\n@implementation JasonMapComponent\n+ (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n\n  /*\n    Do some customization with the 'json' argument here\n  */\n\n  mapView.delegate = self;\n\n  return mapView;\n}\n\n+ (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation{\n  /*\n    Handle the event\n  */\n}\n@end  Here we implement  + (void)mapView:(MKMapView  )mapView didUpdateUserLocation:(MKUserLocation  )userLocation  to handle MapKit events.", 
            "title": "B. Use class methods"
        }, 
        {
            "location": "/advanced/#c-take-advantage-of-the-built-in-stylize-method", 
            "text": "A lot of style attributes such as background, width, height, corner_radius, opacity, etc. are common across various types of components.  JasonComponent  class has a built-in method that you can utilize to automatically apply these styles. It's called:  + (void) stylize: (NSDictionary  )json component: (UIView  )component .  Just by calling this method once, you can take advantage of all the following style attributes right out of the box!  {\n  \"type\": \"mycustomitem\",\n  \"style\": {\n    \"width\": \"...\",\n    \"height\": \"...\",\n    \"opacity\": \"...\",\n    \"background\": \"...\",\n    \"color\": \"...\",\n    \"corner_radius\": \"...\"\n  }\n}  Here's an example code that creates a UIView, runs it through the built-in  stylize , and then applies additional custom styles.  + (UIView *)build: (UIView*)component withJSON: (NSDictionary *)json withOptions: (NSDictionary *)options{\n  // Build some component here\n  MKMapView *mapView;\n  if(component){\n    mapView = (MKMapView*)component;\n  } else {\n    mapView = [[MKMapView alloc] init];\n  }\n\n  /*\n  customize the component here\n  */\n\n  // run it through the default stylize method\n  [self stylize: json component: component];\n\n  // Add your own custom styling logic here, on top of the default styling above\n  if(style[@\"rotate\"] {\n    // some custom styling logic ....\n  }\n\n  return component;\n}  You don't even need to include an additional file, since the  stylize  method comes for free just by subclassing  JasonComponent", 
            "title": "C. Take advantage of the built-in stylize method"
        }, 
        {
            "location": "/advanced/#2-extend-actions", 
            "text": "Just like components, you can easily write your own native  action  modules and call them using 100% JSON syntax.  One thing to keep in mind:  Action classes contain a collection of related action methods , which is why most actions are namespaced as  $(GROUPNAME).(METHODNAME)  when you call it.   For example  JasonNetworkAction  class--an action class that deals with network requests--contains multiple methods:  request ,  upload ,  auth ,  unauth . Each method can be invoked by Jasonette using  $network.request ,  $network.auth ,  $network.upload , and  $network.unauth  actions.", 
            "title": "2. Extend Actions"
        }, 
        {
            "location": "/advanced/#21-how-to-write-an-action", 
            "text": "Let's try writing an action class ( $util ) and one of its methods which displays a banner ( $util.banner ).  We would like to parse this JSON markup:  {\n  \"type\": \"$util.banner\",\n  \"options\": {\n    \"title\": \"Hello\",\n    \"description\": \"Hello world!\"\n  }\n}  to display a notification banner that looks like this:  [IMAGE]", 
            "title": "2.1. How to write an Action"
        }, 
        {
            "location": "/advanced/#step-1-create-an-action-class", 
            "text": "Three rules for writing your action class:   Create a class that inherits from  JasonAction.h .  The class name should follow the following convention:  Jason(GROUP_NAME)Action  Only the first character of the GROUP_NAME should be capitalized   To create a class that responds to  $util.banner , we first need a class for the  util  group. Following the rule, we need to create a  JasonUtilAction , which inherits from  JasonAction :  //  JasonUtilAction.h\n#import \"JasonAction.h\"\n@interface JasonUtilAction : JasonAction\n@end\n\n//  JasonUtilAction.m\n#import \"JasonUtilAction.h\"\n@implementation JasonUtilAction\n@end", 
            "title": "Step 1. Create an Action Class"
        }, 
        {
            "location": "/advanced/#step-2-write-an-action-method", 
            "text": "Three rules for naming an action method:   It should be an  instance method .  Its return value should be  void .  Whatever you name your method will respond to an action call  $[GROUP_NAME].[METHOD_NAME] .   For example, to handle  $util.banner  action we need to implement an  instance method , and its name should be  banner , like this:  //  JasonUtilAction.h\n#import \"JasonAction.h\"\n@interface JasonUtilAction : JasonAction\n@end\n\n//  JasonUtilAction.m\n#import \"JasonUtilAction.h\"\n@implementation JasonUtilAction\n- (void)banner{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [[TWMessageBarManager sharedInstance] showMessageWithTitle: @\"Banner Title\"\n                                                       description: @\"Here goes banner description\"\n                                                              type: TWMessageBarMessageTypeInfo];\n    });\n    [[Jason client] success];\n}\n@end  This will display a banner when the following action is triggered  {\n  \"type\": \"$util.banner\"\n}  Notice the  [[Jason client] success]  line. This is how your action signals that its job is over. More on this later.", 
            "title": "Step 2. Write an Action Method"
        }, 
        {
            "location": "/advanced/#step-3-pass-arguments-to-the-action", 
            "text": "In the previous example we hardcoded the title and description for the banner. But a component that displays the same text all the time is not cool. Instead we want to pass some arguments and have them customize how the action is run. For example, we want the  $util.banner  action to take an  options  attribute and build a custom banner, like this:  {\n  \"type\": \"$util.banner\",\n  \"options\": {\n    \"title\": \"Yo\",\n    \"description\": \"Dawg\"\n  }\n}  To access the  options  attribute of an action, simply use  self.options  inside the method, like this:  //  JasonUtilAction.h\n#import \"JasonAction.h\"\n@interface JasonUtilAction : JasonAction\n@end\n\n//  JasonUtilAction.m\n#import \"JasonUtilAction.h\"\n@implementation JasonUtilAction\n- (void)banner{\n\n    // Extract title and description out of self.options!\n    NSString *title = self.options[@\"title\"];\n    NSString *description = self.options[@\"description\"];\n\n    // Use the custom title and description instead of hardcoding!\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [[TWMessageBarManager sharedInstance] showMessageWithTitle: title\n                                                       description: description\n                                                              type: TWMessageBarMessageTypeInfo];\n    });\n    [[Jason client] success];\n}\n@end  You don't need to define  self.options  anywhere because you get it for free just by subclassing  JasonAction .", 
            "title": "Step 3. Pass arguments to the action"
        }, 
        {
            "location": "/advanced/#step-4-end-the-action", 
            "text": "You MUST explicitly signal the end of each action when implementing an action method .  This is because we can't assume that all actions end when they reach the last line.  Some actions trigger asynchronous background tasks, and we need to wait until that task is over.    To signal the end of an action we call:    [[Jason client] success];  This command will:   Finish the current action  See if the current action has a  success  attribute, and if it does, proceed to call that action.   Here's an example where we make a network request, and then display a success banner when it succeeds:  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://imagejason.herokuapp.com\",\n    \"method\": \"post\"\n  },\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Success!\",\n      \"description\": \"Successfully posted!\"\n    }\n  }\n}  The implementation for  $network.request  may look something like this:  //  JasonNetworkAction.m\n#import \"JasonNetworkAction.h\"\n@implementation JasonNetworkAction\n...\n- (void)request{\n  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n  ... \n  dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){\n    [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) {\n    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[Jason client] success];\n      });\n    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {\n    }];\n  });\n}\n... \n@end  Notice how we call the  [[Jason client] success]  line  inside the \"success\" block, instead of the last line of the method . This is because the network request task runs asynchronously and the action shouldn't end until it reaches inside the  success  block.", 
            "title": "Step 4. End the action"
        }, 
        {
            "location": "/advanced/#step-5-handle-exceptions", 
            "text": "We can end an action with  [[Jason client] success]  when everything goes as expected. But what if something goes wrong? We still need to end the action but also run an exception handling logic, instead of going on to the next action.  For example, the  $network.request  may fail because there's no Internet connection. To handle these exceptions, Jason actions have another attribute called  error , as demonstrated below:  {\n  \"type\": \"$network.request\",\n  \"options\": {\n    \"url\": \"https://imagejason.herokuapp.com\",\n    \"method\": \"post\"\n  },\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Success!\",\n      \"description\": \"Successfully fetched!\"\n    }\n  },\n  \"error\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"ERROR!!!!\",\n      \"description\": \"Uh oh, something went wrong!\"\n    }\n  }\n}  To signal that the action has ended with an error when we implement action methods, we call:  [[Jason client] error]; .  Let's take the previous code and add that line:  //  JasonNetworkAction.m\n#import \"JasonNetworkAction.h\"\n@implementation JasonNetworkAction\n...\n- (void)request{\n  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n  ... \n  dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(void){\n    [manager POST:url parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) {\n    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[Jason client] success];\n      });\n    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[Jason client] error];\n      });\n    }];\n  });\n}\n... \n@end  The code is mostly same as the previous one, except we've added the  [[Jason client] error];  inside the  failure  block of the task.", 
            "title": "Step 5. Handle exceptions"
        }, 
        {
            "location": "/advanced/#step-6-set-the-return-value", 
            "text": "In many cases we want to run an action, take its output, and pass it to another action.   Here, we run a  $geo.get  action, and then display its return value as an alert using  $util.alert .  {\n  \"type\": \"$geo.get\",\n  \"success\": {\n    \"type\": \"$util.banner\",\n    \"options\": {\n      \"title\": \"Current Location\",\n      \"description\": \"{{$jason.coord}}\"\n    }\n  }\n}  Notice how we use a variable called  $jason . This is how return values work in Jasonette--if an action has a return value, it passes it along to the next action as a variable named  $jason .  To end an action with a return value, we call:  [[Jason client] success: response]  To support the JSON markup above, the  $geo.get  action implementation should look like this:  // JasonGeoAction.m\n#import \"JasonGeoAction.h\"\n@implementation JasonGeoAction\n- (void)get{\n\n  /*\n     Implement some location sensor logic that populates the 'currentLocation' variable\n  */\n\n  NSString *coord = [NSString stringWithFormat:@\"%g,%g\", currentLocation.coordinate.latitude, currentLocation.coordinate.longitude];\n  [[Jason client] success: @{@\"coord\": coord}];\n}\n@end  Here we end  $geo.get  with an object  @{@\"coord\": coord} . As mentioned above, this object will be accessible as  $jason  in the next action. This is how the  $util.banner  action can dynamically build itself using the $jason.coord  value.", 
            "title": "Step 6. Set the return value"
        }, 
        {
            "location": "/advanced/#integration", 
            "text": "Jasonette by default covers most of what you need to build any app you can imagine. Also you can even extend its  actions  and  components , like we discussed above.   However if you already have existing code and just want to integrate with Jasonette here and there, that's cool too! You don't have to throw away all your existing code and re-write everything just to take advantage of Jasonette!", 
            "title": "\u2605  Integration"
        }, 
        {
            "location": "/advanced/#how-it-works", 
            "text": "Basically,  JasonViewController  is a self contained class whose only requirement is that you set its  url  before presenting it. This means you can integrate Jasonette just like using any other view controllers in your project.", 
            "title": "How it works"
        }, 
        {
            "location": "/advanced/#remember-you-will-need-to-either-copy-all-your-existing-project-files-into-your-jasonette-project-or-jasonette-files-into-your-own-project-before-you-do-this", 
            "text": "", 
            "title": "\u2605 REMEMBER - You will need to either copy all your existing project files into your Jasonette project, or Jasonette files into your own project, before you do this."
        }, 
        {
            "location": "/advanced/#1-non-jasonette-jasonette", 
            "text": "Here's how you can open a  JasonViewController  from your own viewcontroller\u2014it's the same as opening any other viewcontrollers.", 
            "title": "1. Non-Jasonette =&gt; Jasonette"
        }, 
        {
            "location": "/advanced/#a-first-include-jasonviewcontrollerh-in-your-viewcontroller", 
            "text": "#import \"JasonViewController.h\"", 
            "title": "A. First, include JasonViewController.h in your viewcontroller"
        }, 
        {
            "location": "/advanced/#b-open-with-push-transition", 
            "text": "To open the  JasonViewController  with a push transition, do this:  JasonViewController *vc = [[JasonViewController alloc] init];\nvc.url = @\"https://jasonbase.com/things/jYJ.json\";\n[self.navigationViewController pushViewController:vc animated:YES];", 
            "title": "B. Open with push transition:"
        }, 
        {
            "location": "/advanced/#c-open-with-modal-transition", 
            "text": "To open  JasonViewController  as a modal, do this:  JasonViewController *vc = [[JasonViewController alloc] init];\nvc.url = @\"https://jasonbase.com/things/jYJ.json\";\nUINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];\n[self.navigationController presentViewController:nav animated:YES completion:nil];  And that's it for Non-Jasonette =  Jasonette view transition! Nothing special, just a regular viewcontroller.", 
            "title": "C. Open with modal transition:"
        }, 
        {
            "location": "/advanced/#2-jasonette-non-jasonette", 
            "text": "This one's a bit different, since we are transitioning from a  JasonViewController  to your custom viewcontroller.", 
            "title": "2. Jasonette =&gt; Non-Jasonette"
        }, 
        {
            "location": "/advanced/#remember-everything-that-happens-on-the-jasonette-side-is-json-powered", 
            "text": "Which means we need to handle the transition using JSON.   Here's how to transition from a Jasonette view to your custom non-Jasonette view:", 
            "title": "\u2605 REMEMBER - Everything that happens on the Jasonette side is JSON powered."
        }, 
        {
            "location": "/advanced/#option-a-using-storyboard", 
            "text": "It works exactly the same as normal Jasonette transitions--simply attach an  href  and set its  view  attribute.  You need to name it like this:  [STORYBOARD NAME].[STORYBOARD IDENTIFIER FOR THE VIEWCONTROLLER]  For example, to transition to a viewcontroller which has a storyboard ID of  PaymentViewController  on a storyboard named  MainStoryboard.storyboard , we do the following:  {\n  \"type\": \"label\",\n  \"text\": \"Make a payment\",\n  \"href\": {\n    \"view\": \"MainStoryboard.PaymentViewController\"\n  }\n}", 
            "title": "Option A. Using Storyboard"
        }, 
        {
            "location": "/advanced/#option-b-not-using-storyboard", 
            "text": "If you don't use storyboard, you can simply enter the viewcontroller's class name. For example, to transition to a  PaymentViewController  class,  {\n  \"type\": \"label\",\n  \"text\": \"Make a payment\",\n  \"href\": {\n    \"view\": \"PaymentViewController\"\n  }\n}", 
            "title": "Option B. Not using Storyboard"
        }, 
        {
            "location": "/advanced/#passing-arguments-to-your-viewcontroller", 
            "text": "Let's say we now want to pass some arguments to the  PaymentViewController . Here's how we can achieve this:", 
            "title": "Passing arguments to your viewcontroller"
        }, 
        {
            "location": "/advanced/#step-1-add-an-nsdictionary-property-called-jason-to-your-custom-viewcontroller", 
            "text": "For example if we wanted our  PaymentViewController  to support this feature, we will need to add an  NSDictionary *jason  property to the class, like this:  // PaymentViewController.h\n#import  UIKit/UIKit.h \n@interface PaymentViewController : UIViewController  \n  ....\n  @property (nonatomic, strong) NSDictionary *jason\n  ....\n@end", 
            "title": "Step 1. Add an NSDictionary property called jason to your custom viewcontroller"
        }, 
        {
            "location": "/advanced/#step-2-pass-the-options-attribute-inside-href", 
            "text": "And we're all set! We can now start passing arguments to the  PaymentViewController  using the JSON syntax! Here's an example:  {\n  \"type\": \"label\",\n  \"text\": \"Make a payment\",\n  \"href\": {\n    \"view\": \"MainStoryboard.PaymentViewController\",\n    \"options\": {\n      \"product_id\": \"3kzf9ela\",\n      \"user_id\": \"3kzf9ela\"\n    }\n  }\n}", 
            "title": "Step 2. Pass the options attribute inside href."
        }, 
        {
            "location": "/advanced/#step-3-use-the-jason-property-in-your-viewcontroller", 
            "text": "Now that our  PaymentViewController  is receiving the  options  object as  jason , we just need to make use of it in the implementation. Example:  // PaymentViewController.m\n#import \"PaymentViewController.h\"\n@implementation PaymentViewController\n  ....\n  - (void)viewDidLoad {\n    [super viewDidLoad];\n    NSString *product_id = self.jason[@\"product_id\"];\n    NSString *user_id = self.jason[@\"user_id\"];\n\n    /*\n      Use product_id and user_id for your custom logic!\n    */\n  }\n  ....\n@end", 
            "title": "Step 3. Use the jason property in your viewcontroller"
        }, 
        {
            "location": "/faq/", 
            "text": "\"No provisioning...\" error\n\n\n\n\n\n\n\n\nJust press \"Fix Issue\" and sign in with your Apple account\n\n\nIf that doesn't work, read this post\n\n\n\n\n\"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\"\n\n\n\n\n\n\n\n\n\n\nSelect the project from XCode.\n\n\nGo to \"General\" section.\n\n\nClick \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.\n\n\n\n\n\n\n\n\n\"Code signing is required for product type 'Application' in SDK\"\n\n\n\n\n\n\n\n\n\n\nSelect the project from XCode.\n\n\nGo to \"General\" section.\n\n\nClick \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.\n\n\n\n\n\n\n\n\n\"Untrusted Enterprise Developer\"\n\n\nKeep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app?\n\n\n\n\n\n\n\n\n\n\n\n\n\nOr read the Apple Guideline below:\n\n\nGuidelines for installing custom enterprise apps on iOS\n\n\n\n\n\"Can't be opened because it is from an unidentified developer.\"\n\n\nDo you get the following error when you try to execute the \nSetup\n command?\n\n\n\n\n\n\n\n\nThis article will help you\n\n\n\n\n\"... is busy: Processing symbol files\"\n\n\nDo you get this alert when you press the \nplay\n button?\n\n\n\n\n\n\n\n\nJust wait for a bit until the progress bar gets to the end, and then retry.", 
            "title": "\u25a0 Troubleshoot"
        }, 
        {
            "location": "/faq/#no-provisioning-error", 
            "text": "Just press \"Fix Issue\" and sign in with your Apple account  If that doesn't work, read this post", 
            "title": "\"No provisioning...\" error"
        }, 
        {
            "location": "/faq/#signing-for-jasonette-requires-a-development-team-select-a-development-team-in-the-project-editor", 
            "text": "Select the project from XCode.  Go to \"General\" section.  Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.", 
            "title": "\"Signing for \"Jasonette\" requires a development team. Select a development team in the project editor.\""
        }, 
        {
            "location": "/faq/#code-signing-is-required-for-product-type-application-in-sdk", 
            "text": "Select the project from XCode.  Go to \"General\" section.  Click \"Team\" under Signing section. Switch it from \"None\" to your existing team. If you don't have one, select \"Add an account\" to add your own Apple account.", 
            "title": "\"Code signing is required for product type 'Application' in SDK\""
        }, 
        {
            "location": "/faq/#untrusted-enterprise-developer", 
            "text": "Keep getting \"Untrusted Enterprise Developer\" alert when you try to open the installed app?       Or read the Apple Guideline below:  Guidelines for installing custom enterprise apps on iOS", 
            "title": "\"Untrusted Enterprise Developer\""
        }, 
        {
            "location": "/faq/#cant-be-opened-because-it-is-from-an-unidentified-developer", 
            "text": "Do you get the following error when you try to execute the  Setup  command?     This article will help you", 
            "title": "\"Can't be opened because it is from an unidentified developer.\""
        }, 
        {
            "location": "/faq/#is-busy-processing-symbol-files", 
            "text": "Do you get this alert when you press the  play  button?     Just wait for a bit until the progress bar gets to the end, and then retry.", 
            "title": "\"... is busy: Processing symbol files\""
        }, 
        {
            "location": "/jason/", 
            "text": "What is Jason?\n\n\n{ \u00b7\u1d25\u00b7}\n\n\nJason is a single app that lets you summon and bookmark multiple Jasonette apps simply by entering the JSON url, \nwithout building your own physical app or setting up development environment.\n\n\nIt's good for \nusing as a container for single purpose apps or quick disposable apps, prototyping, beta testing, etc.\n.\n\n\n\n\n    \n\n    \niOS\n\n    \nAndroid\n\n  \n\n  \n\n    \n\n            \n\n    \n\n    \n\n      \n\n    \n\n  \n\n  \n\n    \n\n    \n\n  \n\n\n\n\n\n\n\n\n\n\n\nHow is related to Jasonette?\n\n\nMaybe it's easier if we put it this way:\n\n\nChrome : Webkit = Jason : Jasonette\n\n\n\n\n\n\n    \n\n        \n{ \u00b7\u1d25\u00b7}\njason\n\n        \n{ \u02c3\u0335\u0311\u1d25\u02c2\u0335\u0311}\njasonette\n\n    \n\n    \n\n        \nWhat is it?\nAn app that lets you bookmark and run multiple Jasonette apps without building your own.\nJason itself is built with Jasonette.\n\n        \nWhat is it?\nThe open source app engine that lets you build your own publishable app.\n\n    \n\n    \n\n        \n\n            \nWhen to use\n\n            \n\n                \nStart building without a development environment like XCode or Android Studio\n\n                \nUseful for quick prototyping\n\n        \nBeta test your Jasonette app with friends before submitting to the app store. Just need to share URL\n\n                \nBookmark and run multiple Jasonette apps from a single app\n\n                \nBuild apps that can't be / don't need to be published to the app store\n\n        \nDisposable apps, private apps\n\n            \n\n        \n\n        \n\n            \nWhen to use\n\n            \n\n                \nTo package up an app so you can publish to the app store\n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \nHow to use\n\n            \n\n                \nDownload Jason from the app store\n\n                \nEnter your JSON url in the address bar\n\n            \n\n        \n\n        \n\n            \nHow to use\n\n            \n\n                \nDownload Jasonette\n\n                \nAdd your JSON url to the project\n\n                \nBuild it in XCode or Android Studio\n\n                \nPublish to the app store or play store", 
            "title": "\u25a0 Jason"
        }, 
        {
            "location": "/jason/#what-is-jason", 
            "text": "{ \u00b7\u1d25\u00b7}  Jason is a single app that lets you summon and bookmark multiple Jasonette apps simply by entering the JSON url,  without building your own physical app or setting up development environment.  It's good for  using as a container for single purpose apps or quick disposable apps, prototyping, beta testing, etc. .  \n     \n     iOS \n     Android", 
            "title": "What is Jason?"
        }, 
        {
            "location": "/jason/#how-is-related-to-jasonette", 
            "text": "Maybe it's easier if we put it this way:", 
            "title": "How is related to Jasonette?"
        }
    ]
}